
PoweredExoskeleton-01_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002210  08002210  00012210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002214  08002214  00012214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08002218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000040  20000028  08002240  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000068  08002240  00020068  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   000064a5  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001645  00000000  00000000  000264f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008c8  00000000  00000000  00027b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000810  00000000  00000000  00028408  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000028a7  00000000  00000000  00028c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002582  00000000  00000000  0002b4bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002da41  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002444  00000000  00000000  0002dac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002ff04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002060 	.word	0x08002060

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002060 	.word	0x08002060

0800014c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <NVIC_PriorityGroupConfig+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800015c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000160:	60d3      	str	r3, [r2, #12]
}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	e000ed00 	.word	0xe000ed00

08000170 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000178:	2300      	movs	r3, #0
 800017a:	617b      	str	r3, [r7, #20]
 800017c:	2300      	movs	r3, #0
 800017e:	613b      	str	r3, [r7, #16]
 8000180:	230f      	movs	r3, #15
 8000182:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	78db      	ldrb	r3, [r3, #3]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d03a      	beq.n	8000202 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800018c:	4b27      	ldr	r3, [pc, #156]	; (800022c <NVIC_Init+0xbc>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	43db      	mvns	r3, r3
 8000192:	0a1b      	lsrs	r3, r3, #8
 8000194:	f003 0307 	and.w	r3, r3, #7
 8000198:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	f1c3 0304 	rsb	r3, r3, #4
 80001a0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80001a2:	68fa      	ldr	r2, [r7, #12]
 80001a4:	697b      	ldr	r3, [r7, #20]
 80001a6:	fa22 f303 	lsr.w	r3, r2, r3
 80001aa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	461a      	mov	r2, r3
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	fa02 f303 	lsl.w	r3, r2, r3
 80001b8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	789b      	ldrb	r3, [r3, #2]
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4013      	ands	r3, r2
 80001c4:	697a      	ldr	r2, [r7, #20]
 80001c6:	4313      	orrs	r3, r2
 80001c8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <NVIC_Init+0xc0>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	6979      	ldr	r1, [r7, #20]
 80001d8:	b2c9      	uxtb	r1, r1
 80001da:	4413      	add	r3, r2
 80001dc:	460a      	mov	r2, r1
 80001de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e2:	4a13      	ldr	r2, [pc, #76]	; (8000230 <NVIC_Init+0xc0>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	095b      	lsrs	r3, r3, #5
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	f003 031f 	and.w	r3, r3, #31
 80001f6:	2101      	movs	r1, #1
 80001f8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000200:	e00f      	b.n	8000222 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000202:	490b      	ldr	r1, [pc, #44]	; (8000230 <NVIC_Init+0xc0>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	095b      	lsrs	r3, r3, #5
 800020a:	b2db      	uxtb	r3, r3
 800020c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	f003 031f 	and.w	r3, r3, #31
 8000216:	2201      	movs	r2, #1
 8000218:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800021a:	f100 0320 	add.w	r3, r0, #32
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000222:	bf00      	nop
 8000224:	371c      	adds	r7, #28
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	e000ed00 	.word	0xe000ed00
 8000230:	e000e100 	.word	0xe000e100

08000234 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4013      	ands	r3, r2
 800024c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4013      	ands	r3, r2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d005      	beq.n	8000266 <EXTI_GetITStatus+0x32>
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000260:	2301      	movs	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
 8000264:	e001      	b.n	800026a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000266:	2300      	movs	r3, #0
 8000268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010400 	.word	0x40010400

0800027c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000284:	4a03      	ldr	r2, [pc, #12]	; (8000294 <EXTI_ClearITPendingBit+0x18>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6153      	str	r3, [r2, #20]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40010400 	.word	0x40010400

08000298 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	; 0x24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	78db      	ldrb	r3, [r3, #3]
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d005      	beq.n	80002dc <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	461a      	mov	r2, r3
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	4313      	orrs	r3, r2
 80002da:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d044      	beq.n	8000370 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
 80002f0:	e038      	b.n	8000364 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80002f2:	2201      	movs	r2, #1
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4013      	ands	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000308:	693a      	ldr	r2, [r7, #16]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	429a      	cmp	r2, r3
 800030e:	d126      	bne.n	800035e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000316:	220f      	movs	r2, #15
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	43db      	mvns	r3, r3
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	4013      	ands	r3, r2
 8000328:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800032a:	69fa      	ldr	r2, [r7, #28]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	fa02 f303 	lsl.w	r3, r2, r3
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	4313      	orrs	r3, r2
 8000336:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	2b28      	cmp	r3, #40	; 0x28
 800033e:	d105      	bne.n	800034c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000340:	2201      	movs	r2, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	409a      	lsls	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	615a      	str	r2, [r3, #20]
 800034a:	e008      	b.n	800035e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	2b48      	cmp	r3, #72	; 0x48
 8000352:	d104      	bne.n	800035e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000354:	2201      	movs	r2, #1
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	409a      	lsls	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800035e:	69bb      	ldr	r3, [r7, #24]
 8000360:	3301      	adds	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
 8000364:	69bb      	ldr	r3, [r7, #24]
 8000366:	2b07      	cmp	r3, #7
 8000368:	d9c3      	bls.n	80002f2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2bff      	cmp	r3, #255	; 0xff
 8000376:	d946      	bls.n	8000406 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
 8000382:	e03a      	b.n	80003fa <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	3308      	adds	r3, #8
 8000388:	2201      	movs	r2, #1
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4013      	ands	r3, r2
 800039a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800039c:	693a      	ldr	r2, [r7, #16]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d127      	bne.n	80003f4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003aa:	220f      	movs	r2, #15
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	43db      	mvns	r3, r3
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	4013      	ands	r3, r2
 80003bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003be:	69fa      	ldr	r2, [r7, #28]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	2b28      	cmp	r3, #40	; 0x28
 80003d2:	d105      	bne.n	80003e0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	3308      	adds	r3, #8
 80003d8:	2201      	movs	r2, #1
 80003da:	409a      	lsls	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	78db      	ldrb	r3, [r3, #3]
 80003e4:	2b48      	cmp	r3, #72	; 0x48
 80003e6:	d105      	bne.n	80003f4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	3308      	adds	r3, #8
 80003ec:	2201      	movs	r2, #1
 80003ee:	409a      	lsls	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	3301      	adds	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	d9c1      	bls.n	8000384 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	605a      	str	r2, [r3, #4]
  }
}
 8000406:	bf00      	nop
 8000408:	3724      	adds	r7, #36	; 0x24
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800041e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2202      	movs	r2, #2
 8000424:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2204      	movs	r2, #4
 800042a:	70da      	strb	r2, [r3, #3]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000436:	b480      	push	{r7}
 8000438:	b085      	sub	sp, #20
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	689a      	ldr	r2, [r3, #8]
 800044a:	887b      	ldrh	r3, [r7, #2]
 800044c:	4013      	ands	r3, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	d002      	beq.n	8000458 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000452:	2301      	movs	r3, #1
 8000454:	73fb      	strb	r3, [r7, #15]
 8000456:	e001      	b.n	800045c <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000458:	2300      	movs	r3, #0
 800045a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800045c:	7bfb      	ldrb	r3, [r7, #15]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000474:	2300      	movs	r3, #0
 8000476:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	887b      	ldrh	r3, [r7, #2]
 800047e:	4013      	ands	r3, r2
 8000480:	2b00      	cmp	r3, #0
 8000482:	d002      	beq.n	800048a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e001      	b.n	800048e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800048a:	2300      	movs	r3, #0
 800048c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800048e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000490:	4618      	mov	r0, r3
 8000492:	3714      	adds	r7, #20
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
	...

0800049c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004a0:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <RCC_DeInit+0x54>)
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <RCC_DeInit+0x54>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80004ac:	4910      	ldr	r1, [pc, #64]	; (80004f0 <RCC_DeInit+0x54>)
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <RCC_DeInit+0x54>)
 80004b0:	685a      	ldr	r2, [r3, #4]
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <RCC_DeInit+0x58>)
 80004b4:	4013      	ands	r3, r2
 80004b6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004b8:	4a0d      	ldr	r2, [pc, #52]	; (80004f0 <RCC_DeInit+0x54>)
 80004ba:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <RCC_DeInit+0x54>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004c8:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <RCC_DeInit+0x54>)
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <RCC_DeInit+0x54>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80004d4:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <RCC_DeInit+0x54>)
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <RCC_DeInit+0x54>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <RCC_DeInit+0x54>)
 80004e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004e6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000
 80004f4:	f8ff0000 	.word	0xf8ff0000

080004f8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000510:	4b4c      	ldr	r3, [pc, #304]	; (8000644 <RCC_GetClocksFreq+0x14c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f003 030c 	and.w	r3, r3, #12
 8000518:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d007      	beq.n	8000530 <RCC_GetClocksFreq+0x38>
 8000520:	2b08      	cmp	r3, #8
 8000522:	d009      	beq.n	8000538 <RCC_GetClocksFreq+0x40>
 8000524:	2b00      	cmp	r3, #0
 8000526:	d133      	bne.n	8000590 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a47      	ldr	r2, [pc, #284]	; (8000648 <RCC_GetClocksFreq+0x150>)
 800052c:	601a      	str	r2, [r3, #0]
      break;
 800052e:	e033      	b.n	8000598 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a45      	ldr	r2, [pc, #276]	; (8000648 <RCC_GetClocksFreq+0x150>)
 8000534:	601a      	str	r2, [r3, #0]
      break;
 8000536:	e02f      	b.n	8000598 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000538:	4b42      	ldr	r3, [pc, #264]	; (8000644 <RCC_GetClocksFreq+0x14c>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000540:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000542:	4b40      	ldr	r3, [pc, #256]	; (8000644 <RCC_GetClocksFreq+0x14c>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800054a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800054c:	693b      	ldr	r3, [r7, #16]
 800054e:	0c9b      	lsrs	r3, r3, #18
 8000550:	3302      	adds	r3, #2
 8000552:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d106      	bne.n	8000568 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	4a3b      	ldr	r2, [pc, #236]	; (800064c <RCC_GetClocksFreq+0x154>)
 800055e:	fb02 f203 	mul.w	r2, r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000566:	e017      	b.n	8000598 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <RCC_GetClocksFreq+0x14c>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000570:	2b00      	cmp	r3, #0
 8000572:	d006      	beq.n	8000582 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	4a35      	ldr	r2, [pc, #212]	; (800064c <RCC_GetClocksFreq+0x154>)
 8000578:	fb02 f203 	mul.w	r2, r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]
      break;
 8000580:	e00a      	b.n	8000598 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	4a30      	ldr	r2, [pc, #192]	; (8000648 <RCC_GetClocksFreq+0x150>)
 8000586:	fb02 f203 	mul.w	r2, r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	601a      	str	r2, [r3, #0]
      break;
 800058e:	e003      	b.n	8000598 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a2d      	ldr	r2, [pc, #180]	; (8000648 <RCC_GetClocksFreq+0x150>)
 8000594:	601a      	str	r2, [r3, #0]
      break;
 8000596:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000598:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <RCC_GetClocksFreq+0x14c>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005a0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	091b      	lsrs	r3, r3, #4
 80005a6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005a8:	4a29      	ldr	r2, [pc, #164]	; (8000650 <RCC_GetClocksFreq+0x158>)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	40da      	lsrs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <RCC_GetClocksFreq+0x14c>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80005c8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	0a1b      	lsrs	r3, r3, #8
 80005ce:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <RCC_GetClocksFreq+0x158>)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	40da      	lsrs	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <RCC_GetClocksFreq+0x14c>)
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005f0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	0adb      	lsrs	r3, r3, #11
 80005f6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005f8:	4a15      	ldr	r2, [pc, #84]	; (8000650 <RCC_GetClocksFreq+0x158>)
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	40da      	lsrs	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <RCC_GetClocksFreq+0x14c>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	0b9b      	lsrs	r3, r3, #14
 800061e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <RCC_GetClocksFreq+0x15c>)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68da      	ldr	r2, [r3, #12]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	fbb2 f2f3 	udiv	r2, r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	611a      	str	r2, [r3, #16]
}
 800063a:	bf00      	nop
 800063c:	371c      	adds	r7, #28
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	40021000 	.word	0x40021000
 8000648:	007a1200 	.word	0x007a1200
 800064c:	003d0900 	.word	0x003d0900
 8000650:	20000000 	.word	0x20000000
 8000654:	20000010 	.word	0x20000010

08000658 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800066a:	4909      	ldr	r1, [pc, #36]	; (8000690 <RCC_APB2PeriphClockCmd+0x38>)
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <RCC_APB2PeriphClockCmd+0x38>)
 800066e:	699a      	ldr	r2, [r3, #24]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4313      	orrs	r3, r2
 8000674:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000676:	e006      	b.n	8000686 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000678:	4905      	ldr	r1, [pc, #20]	; (8000690 <RCC_APB2PeriphClockCmd+0x38>)
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <RCC_APB2PeriphClockCmd+0x38>)
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	43db      	mvns	r3, r3
 8000682:	4013      	ands	r3, r2
 8000684:	618b      	str	r3, [r1, #24]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000

08000694 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80006a6:	4909      	ldr	r1, [pc, #36]	; (80006cc <RCC_APB1PeriphClockCmd+0x38>)
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <RCC_APB1PeriphClockCmd+0x38>)
 80006aa:	69da      	ldr	r2, [r3, #28]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80006b2:	e006      	b.n	80006c2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80006b4:	4905      	ldr	r1, [pc, #20]	; (80006cc <RCC_APB1PeriphClockCmd+0x38>)
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <RCC_APB1PeriphClockCmd+0x38>)
 80006b8:	69da      	ldr	r2, [r3, #28]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	43db      	mvns	r3, r3
 80006be:	4013      	ands	r3, r2
 80006c0:	61cb      	str	r3, [r1, #28]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <TIM_TimeBaseInit+0xd0>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d013      	beq.n	8000714 <TIM_TimeBaseInit+0x44>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <TIM_TimeBaseInit+0xd4>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d00f      	beq.n	8000714 <TIM_TimeBaseInit+0x44>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006fa:	d00b      	beq.n	8000714 <TIM_TimeBaseInit+0x44>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <TIM_TimeBaseInit+0xd8>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d007      	beq.n	8000714 <TIM_TimeBaseInit+0x44>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a29      	ldr	r2, [pc, #164]	; (80007ac <TIM_TimeBaseInit+0xdc>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d003      	beq.n	8000714 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <TIM_TimeBaseInit+0xe0>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d108      	bne.n	8000726 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800071a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	885a      	ldrh	r2, [r3, #2]
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	4313      	orrs	r3, r2
 8000724:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <TIM_TimeBaseInit+0xe4>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d00c      	beq.n	8000748 <TIM_TimeBaseInit+0x78>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <TIM_TimeBaseInit+0xe8>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d008      	beq.n	8000748 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800073c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	88da      	ldrh	r2, [r3, #6]
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	4313      	orrs	r3, r2
 8000746:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	89fa      	ldrh	r2, [r7, #14]
 800074c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	889a      	ldrh	r2, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	881a      	ldrh	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <TIM_TimeBaseInit+0xd0>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d00f      	beq.n	8000786 <TIM_TimeBaseInit+0xb6>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <TIM_TimeBaseInit+0xd4>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d00b      	beq.n	8000786 <TIM_TimeBaseInit+0xb6>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <TIM_TimeBaseInit+0xec>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d007      	beq.n	8000786 <TIM_TimeBaseInit+0xb6>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <TIM_TimeBaseInit+0xf0>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d003      	beq.n	8000786 <TIM_TimeBaseInit+0xb6>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <TIM_TimeBaseInit+0xf4>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d104      	bne.n	8000790 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	7a1b      	ldrb	r3, [r3, #8]
 800078a:	b29a      	uxth	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	829a      	strh	r2, [r3, #20]
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40012c00 	.word	0x40012c00
 80007a4:	40013400 	.word	0x40013400
 80007a8:	40000400 	.word	0x40000400
 80007ac:	40000800 	.word	0x40000800
 80007b0:	40000c00 	.word	0x40000c00
 80007b4:	40001000 	.word	0x40001000
 80007b8:	40001400 	.word	0x40001400
 80007bc:	40014000 	.word	0x40014000
 80007c0:	40014400 	.word	0x40014400
 80007c4:	40014800 	.word	0x40014800

080007c8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	817b      	strh	r3, [r7, #10]
 80007d6:	2300      	movs	r3, #0
 80007d8:	81fb      	strh	r3, [r7, #14]
 80007da:	2300      	movs	r3, #0
 80007dc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	8c1b      	ldrh	r3, [r3, #32]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f023 0301 	bic.w	r3, r3, #1
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	8c1b      	ldrh	r3, [r3, #32]
 80007f2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	889b      	ldrh	r3, [r3, #4]
 80007f8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8b1b      	ldrh	r3, [r3, #24]
 80007fe:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8000800:	897b      	ldrh	r3, [r7, #10]
 8000802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000806:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000808:	897b      	ldrh	r3, [r7, #10]
 800080a:	f023 0303 	bic.w	r3, r3, #3
 800080e:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	881a      	ldrh	r2, [r3, #0]
 8000814:	897b      	ldrh	r3, [r7, #10]
 8000816:	4313      	orrs	r3, r2
 8000818:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	f023 0302 	bic.w	r3, r3, #2
 8000820:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	891a      	ldrh	r2, [r3, #8]
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	4313      	orrs	r3, r2
 800082a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	885a      	ldrh	r2, [r3, #2]
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	4313      	orrs	r3, r2
 8000834:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a24      	ldr	r2, [pc, #144]	; (80008cc <TIM_OC1Init+0x104>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d00f      	beq.n	800085e <TIM_OC1Init+0x96>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <TIM_OC1Init+0x108>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d00b      	beq.n	800085e <TIM_OC1Init+0x96>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a22      	ldr	r2, [pc, #136]	; (80008d4 <TIM_OC1Init+0x10c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d007      	beq.n	800085e <TIM_OC1Init+0x96>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <TIM_OC1Init+0x110>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d003      	beq.n	800085e <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a20      	ldr	r2, [pc, #128]	; (80008dc <TIM_OC1Init+0x114>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d123      	bne.n	80008a6 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	f023 0308 	bic.w	r3, r3, #8
 8000864:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	895a      	ldrh	r2, [r3, #10]
 800086a:	89fb      	ldrh	r3, [r7, #14]
 800086c:	4313      	orrs	r3, r2
 800086e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	f023 0304 	bic.w	r3, r3, #4
 8000876:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	889a      	ldrh	r2, [r3, #4]
 800087c:	89fb      	ldrh	r3, [r7, #14]
 800087e:	4313      	orrs	r3, r2
 8000880:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8000882:	89bb      	ldrh	r3, [r7, #12]
 8000884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000888:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 800088a:	89bb      	ldrh	r3, [r7, #12]
 800088c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000890:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	899a      	ldrh	r2, [r3, #12]
 8000896:	89bb      	ldrh	r3, [r7, #12]
 8000898:	4313      	orrs	r3, r2
 800089a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	89da      	ldrh	r2, [r3, #14]
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	89ba      	ldrh	r2, [r7, #12]
 80008aa:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	897a      	ldrh	r2, [r7, #10]
 80008b0:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	88da      	ldrh	r2, [r3, #6]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	89fa      	ldrh	r2, [r7, #14]
 80008be:	841a      	strh	r2, [r3, #32]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40012c00 	.word	0x40012c00
 80008d0:	40013400 	.word	0x40013400
 80008d4:	40014000 	.word	0x40014000
 80008d8:	40014400 	.word	0x40014400
 80008dc:	40014800 	.word	0x40014800

080008e0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d008      	beq.n	8000904 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000902:	e007      	b.n	8000914 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	b29b      	uxth	r3, r3
 800090a:	f023 0301 	bic.w	r3, r3, #1
 800090e:	b29a      	uxth	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	801a      	strh	r2, [r3, #0]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	460b      	mov	r3, r1
 8000928:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d008      	beq.n	8000942 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093a:	b29a      	uxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8000940:	e007      	b.n	8000952 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	b29b      	uxth	r3, r3
 8000948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800094c:	b29a      	uxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	801a      	strh	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	8b1b      	ldrh	r3, [r3, #24]
 8000970:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	f023 0308 	bic.w	r3, r3, #8
 8000978:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800097a:	89fa      	ldrh	r2, [r7, #14]
 800097c:	887b      	ldrh	r3, [r7, #2]
 800097e:	4313      	orrs	r3, r2
 8000980:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	89fa      	ldrh	r2, [r7, #14]
 8000986:	831a      	strh	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	887a      	ldrh	r2, [r7, #2]
 80009a2:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
	...

080009b0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	8a1b      	ldrh	r3, [r3, #16]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80009da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009dc:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80009e0:	4013      	ands	r3, r2
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	88db      	ldrh	r3, [r3, #6]
 80009e8:	461a      	mov	r2, r3
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	4313      	orrs	r3, r2
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	899b      	ldrh	r3, [r3, #12]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a02:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000a06:	4013      	ands	r3, r2
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	889a      	ldrh	r2, [r3, #4]
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	891b      	ldrh	r3, [r3, #8]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	4313      	orrs	r3, r2
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	8a9b      	ldrh	r3, [r3, #20]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a38:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	899b      	ldrh	r3, [r3, #12]
 8000a44:	461a      	mov	r2, r3
 8000a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fd4d 	bl	80004f8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <USART_Init+0x16c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d102      	bne.n	8000a6c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6a:	e001      	b.n	8000a70 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	899b      	ldrh	r3, [r3, #12]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	da0c      	bge.n	8000a96 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	009a      	lsls	r2, r3, #2
 8000a86:	441a      	add	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
 8000a94:	e00b      	b.n	8000aae <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	009a      	lsls	r2, r3, #2
 8000aa0:	441a      	add	r2, r3
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <USART_Init+0x170>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abe:	091b      	lsrs	r3, r3, #4
 8000ac0:	2264      	movs	r2, #100	; 0x64
 8000ac2:	fb02 f303 	mul.w	r3, r2, r3
 8000ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	899b      	ldrh	r3, [r3, #12]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	da0c      	bge.n	8000af2 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	3332      	adds	r3, #50	; 0x32
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <USART_Init+0x170>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	095b      	lsrs	r3, r3, #5
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aec:	4313      	orrs	r3, r2
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af0:	e00b      	b.n	8000b0a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	3332      	adds	r3, #50	; 0x32
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <USART_Init+0x170>)
 8000afa:	fba2 2303 	umull	r2, r3, r2, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b06:	4313      	orrs	r3, r2
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	811a      	strh	r2, [r3, #8]
}
 8000b12:	bf00      	nop
 8000b14:	3730      	adds	r7, #48	; 0x30
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40013800 	.word	0x40013800
 8000b20:	51eb851f 	.word	0x51eb851f

08000b24 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b32:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	220c      	movs	r2, #12
 8000b4a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	819a      	strh	r2, [r3, #12]
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d008      	beq.n	8000b80 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	899b      	ldrh	r3, [r3, #12]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000b7e:	e007      	b.n	8000b90 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	899b      	ldrh	r3, [r3, #12]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	819a      	strh	r2, [r3, #12]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b087      	sub	sp, #28
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	807b      	strh	r3, [r7, #2]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	f003 031f 	and.w	r3, r3, #31
 8000bce:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d103      	bne.n	8000be8 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	330c      	adds	r3, #12
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	e009      	b.n	8000bfc <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d103      	bne.n	8000bf6 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3310      	adds	r3, #16
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	e002      	b.n	8000bfc <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3314      	adds	r3, #20
 8000bfa:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	6811      	ldr	r1, [r2, #0]
 8000c08:	68ba      	ldr	r2, [r7, #8]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000c0e:	e006      	b.n	8000c1e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	6811      	ldr	r1, [r2, #0]
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	601a      	str	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	371c      	adds	r7, #28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	809a      	strh	r2, [r3, #4]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr

08000c4a <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	889b      	ldrh	r3, [r3, #4]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c5c:	b29b      	uxth	r3, r3
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	4013      	ands	r3, r2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d002      	beq.n	8000c8e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e001      	b.n	8000c92 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000caa:	887b      	ldrh	r3, [r7, #2]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	801a      	strh	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b087      	sub	sp, #28
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000cda:	887b      	ldrh	r3, [r7, #2]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	f003 031f 	and.w	r3, r3, #31
 8000cea:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000cec:	2201      	movs	r2, #1
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d107      	bne.n	8000d0c <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	899b      	ldrh	r3, [r3, #12]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4013      	ands	r3, r2
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e011      	b.n	8000d30 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d107      	bne.n	8000d22 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	8a1b      	ldrh	r3, [r3, #16]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	461a      	mov	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e006      	b.n	8000d30 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	8a9b      	ldrh	r3, [r3, #20]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	461a      	mov	r2, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d005      	beq.n	8000d62 <USART_GetITStatus+0xa4>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	74fb      	strb	r3, [r7, #19]
 8000d60:	e001      	b.n	8000d66 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000d62:	2300      	movs	r3, #0
 8000d64:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000d66:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr

08000d72 <GPIO_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void GPIO_Initialization(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Fills each GPIO_InitStruct member with its default value */
	GPIO_StructInit(&GPIO_InitStructure);
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fb48 	bl	8000410 <GPIO_StructInit>

	/* Configure the GPIO pin */
	/* STM32 Nucleo-64 board */
	Pin_Mod(LD2, OUT, GPPP, S2M);	// PA5: LED-user
 8000d80:	2302      	movs	r3, #2
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2005      	movs	r0, #5
 8000d88:	f000 f846 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);

	Pin_Mod(B1, IN, FL, S2M);	// PC13: Button-user
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2101      	movs	r1, #1
 8000d92:	202d      	movs	r0, #45	; 0x2d
 8000d94:	f000 f840 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_Init(GPIOC, &GPIO_InitStructure);


	/* USART */
	Pin_Mod(PinUSART2_TX, OUT, AFPP, S50M);	// PA2: USART2_TX
 8000d98:	2332      	movs	r3, #50	; 0x32
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f000 f83a 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);

	Pin_Mod(PinUSART2_RX, IN, FL, S50M);	// PA3: USART2_RX
 8000da4:	2332      	movs	r3, #50	; 0x32
 8000da6:	2200      	movs	r2, #0
 8000da8:	2101      	movs	r1, #1
 8000daa:	2003      	movs	r0, #3
 8000dac:	f000 f834 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);


	/* Motor0 */
	Pin_Mod(PinMotor0_Enbale, OUT, GPPP, S2M);	// PB5: Motor0_Enbale
 8000db0:	2302      	movs	r3, #2
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2015      	movs	r0, #21
 8000db8:	f000 f82e 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_Init(GPIOB, &GPIO_InitStructure);

	Pin_Mod(PinMotor0_Direction, OUT, GPPP, S2M);	// PB10: Motor0-Direction
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	201a      	movs	r0, #26
 8000dc4:	f000 f828 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_Init(GPIOB, &GPIO_InitStructure);

	Pin_Mod(PinMotor0_Speed, OUT, AFOD, S50M);	// PB4: Motor0-Speed(PWM, TIM3_CH1)
 8000dc8:	2332      	movs	r3, #50	; 0x32
 8000dca:	2203      	movs	r2, #3
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2006      	movs	r0, #6
 8000dd0:	f000 f822 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;	// TIM3_CH1 = PA6
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);

	Pin_Mod(PinMotor0_Ready, IN, PD, S2M);	// PB3: Motor0-Ready
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	2101      	movs	r1, #1
 8000dda:	2014      	movs	r0, #20
 8000ddc:	f000 f81c 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_Init(GPIOB, &GPIO_InitStructure);

	/* Motor1 */
	Pin_Mod(PinMotor1_Enbale, OUT, GPPP, S2M);	// PA8: Motor1_Enbale
 8000de0:	2302      	movs	r3, #2
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2008      	movs	r0, #8
 8000de8:	f000 f816 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);

	Pin_Mod(PinMotor1_Direction, OUT, GPPP, S2M);	// PA9: Motor1-Direction
 8000dec:	2302      	movs	r3, #2
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2009      	movs	r0, #9
 8000df4:	f000 f810 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);

	Pin_Mod(PinMotor1_Speed, OUT, AFOD, S50M);	// PC7: Motor1-Speed(PWM, TIM3_CH2)
 8000df8:	2332      	movs	r3, #50	; 0x32
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2027      	movs	r0, #39	; 0x27
 8000e00:	f000 f80a 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Init(GPIOC, &GPIO_InitStructure);

	Pin_Mod(PinMotor1_Ready, IN, PD, S2M);	// PB6: Motor1-Ready
 8000e04:	2302      	movs	r3, #2
 8000e06:	2202      	movs	r2, #2
 8000e08:	2101      	movs	r1, #1
 8000e0a:	2007      	movs	r0, #7
 8000e0c:	f000 f804 	bl	8000e18 <Pin_Mod>
//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <Pin_Mod>:
  * 		10: 10MHz.
  * 		50: 50MHz.
  * @retval None
  */
void Pin_Mod(u8 PortPin, u8 INout, u8 Mode, u8 Speed)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4623      	mov	r3, r4
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71bb      	strb	r3, [r7, #6]
 8000e2e:	460b      	mov	r3, r1
 8000e30:	717b      	strb	r3, [r7, #5]
 8000e32:	4613      	mov	r3, r2
 8000e34:	713b      	strb	r3, [r7, #4]
	/* Structure Declarations */
	GPIO_InitTypeDef GPIO_InitStructure;

	// GPIO_Speed
	switch(Speed)
 8000e36:	793b      	ldrb	r3, [r7, #4]
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d007      	beq.n	8000e4c <Pin_Mod+0x34>
 8000e3c:	2b32      	cmp	r3, #50	; 0x32
 8000e3e:	d008      	beq.n	8000e52 <Pin_Mod+0x3a>
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d000      	beq.n	8000e46 <Pin_Mod+0x2e>
			break;
		case S50M:	// S50M:50
			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
			break;
		default:
			break;
 8000e44:	e008      	b.n	8000e58 <Pin_Mod+0x40>
			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000e46:	2302      	movs	r3, #2
 8000e48:	73bb      	strb	r3, [r7, #14]
			break;
 8000e4a:	e005      	b.n	8000e58 <Pin_Mod+0x40>
			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73bb      	strb	r3, [r7, #14]
			break;
 8000e50:	e002      	b.n	8000e58 <Pin_Mod+0x40>
			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e52:	2303      	movs	r3, #3
 8000e54:	73bb      	strb	r3, [r7, #14]
			break;
 8000e56:	bf00      	nop
	}

	// GPIO_Mode
	if(INout == OUT)	// OUT:0
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d11a      	bne.n	8000e94 <Pin_Mod+0x7c>
	{
		switch(Mode)
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d835      	bhi.n	8000ed0 <Pin_Mod+0xb8>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <Pin_Mod+0x54>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000e83 	.word	0x08000e83
 8000e74:	08000e89 	.word	0x08000e89
 8000e78:	08000e8f 	.word	0x08000e8f
		{
			case GPPP:	// GPPP:0
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	73fb      	strb	r3, [r7, #15]
				break;
 8000e80:	e029      	b.n	8000ed6 <Pin_Mod+0xbe>
			case GPOD:	// GPOD:1
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8000e82:	2314      	movs	r3, #20
 8000e84:	73fb      	strb	r3, [r7, #15]
				break;
 8000e86:	e026      	b.n	8000ed6 <Pin_Mod+0xbe>
			case AFPP:	// AFPP:2
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000e88:	2318      	movs	r3, #24
 8000e8a:	73fb      	strb	r3, [r7, #15]
				break;
 8000e8c:	e023      	b.n	8000ed6 <Pin_Mod+0xbe>
			case AFOD:	// AFOD:3
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8000e8e:	231c      	movs	r3, #28
 8000e90:	73fb      	strb	r3, [r7, #15]
				break;
 8000e92:	e020      	b.n	8000ed6 <Pin_Mod+0xbe>
			default:
				break;
		}
	}
	else if(INout == IN) 	// IN:1
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d11d      	bne.n	8000ed6 <Pin_Mod+0xbe>
	{
		switch(Mode)
 8000e9a:	797b      	ldrb	r3, [r7, #5]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d819      	bhi.n	8000ed4 <Pin_Mod+0xbc>
 8000ea0:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <Pin_Mod+0x90>)
 8000ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea6:	bf00      	nop
 8000ea8:	08000eb9 	.word	0x08000eb9
 8000eac:	08000ebf 	.word	0x08000ebf
 8000eb0:	08000ec5 	.word	0x08000ec5
 8000eb4:	08000ecb 	.word	0x08000ecb
		{
			case FL:	// FL:0
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	73fb      	strb	r3, [r7, #15]
				break;
 8000ebc:	e00b      	b.n	8000ed6 <Pin_Mod+0xbe>
			case AN:	// AN:1
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
				break;
 8000ec2:	e008      	b.n	8000ed6 <Pin_Mod+0xbe>
			case PD:	// PD:2
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 8000ec4:	2328      	movs	r3, #40	; 0x28
 8000ec6:	73fb      	strb	r3, [r7, #15]
				break;
 8000ec8:	e005      	b.n	8000ed6 <Pin_Mod+0xbe>
			case PU:	// PU:3
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8000eca:	2348      	movs	r3, #72	; 0x48
 8000ecc:	73fb      	strb	r3, [r7, #15]
				break;
 8000ece:	e002      	b.n	8000ed6 <Pin_Mod+0xbe>
				break;
 8000ed0:	bf00      	nop
 8000ed2:	e000      	b.n	8000ed6 <Pin_Mod+0xbe>
			default:
				break;
 8000ed4:	bf00      	nop
		}
	}

	// GPIO_Pin & GPIO_Init() function.
	if(PortPin <= 15)		// Port-A:  0~15
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80c      	bhi.n	8000ef6 <Pin_Mod+0xde>
	{
		GPIO_InitStructure.GPIO_Pin = ((uint16_t)(0x0001 << PortPin));
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	81bb      	strh	r3, [r7, #12]
		GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	4825      	ldr	r0, [pc, #148]	; (8000f84 <Pin_Mod+0x16c>)
 8000ef0:	f7ff f9d2 	bl	8000298 <GPIO_Init>
	{
		GPIO_InitStructure.GPIO_Pin = ((uint16_t)(0x0001 << (PortPin - 64)));
		GPIO_Init(GPIOE, &GPIO_InitStructure);
	}
	else /* Null */;		// Out of range(0~79)
}
 8000ef4:	e042      	b.n	8000f7c <Pin_Mod+0x164>
	else if(PortPin <= 31)	// Port-B: 16~31
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b1f      	cmp	r3, #31
 8000efa:	d80d      	bhi.n	8000f18 <Pin_Mod+0x100>
		GPIO_InitStructure.GPIO_Pin = ((uint16_t)(0x0001 << (PortPin - 16)));
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	3b10      	subs	r3, #16
 8000f00:	2201      	movs	r2, #1
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	81bb      	strh	r3, [r7, #12]
		GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481d      	ldr	r0, [pc, #116]	; (8000f88 <Pin_Mod+0x170>)
 8000f12:	f7ff f9c1 	bl	8000298 <GPIO_Init>
}
 8000f16:	e031      	b.n	8000f7c <Pin_Mod+0x164>
	else if(PortPin <= 47)	// Port-C: 32~47
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f1c:	d80d      	bhi.n	8000f3a <Pin_Mod+0x122>
		GPIO_InitStructure.GPIO_Pin = ((uint16_t)(0x0001 << (PortPin - 32)));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	3b20      	subs	r3, #32
 8000f22:	2201      	movs	r2, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	81bb      	strh	r3, [r7, #12]
		GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <Pin_Mod+0x174>)
 8000f34:	f7ff f9b0 	bl	8000298 <GPIO_Init>
}
 8000f38:	e020      	b.n	8000f7c <Pin_Mod+0x164>
	else if(PortPin <= 63)	// Port-D: 48~63
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f3e:	d80d      	bhi.n	8000f5c <Pin_Mod+0x144>
		GPIO_InitStructure.GPIO_Pin = ((uint16_t)(0x0001 << (PortPin - 48)));
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	3b30      	subs	r3, #48	; 0x30
 8000f44:	2201      	movs	r2, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	81bb      	strh	r3, [r7, #12]
		GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	480e      	ldr	r0, [pc, #56]	; (8000f90 <Pin_Mod+0x178>)
 8000f56:	f7ff f99f 	bl	8000298 <GPIO_Init>
}
 8000f5a:	e00f      	b.n	8000f7c <Pin_Mod+0x164>
	else if(PortPin <= 79)	// Port-E: 64~79
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b4f      	cmp	r3, #79	; 0x4f
 8000f60:	d80c      	bhi.n	8000f7c <Pin_Mod+0x164>
		GPIO_InitStructure.GPIO_Pin = ((uint16_t)(0x0001 << (PortPin - 64)));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3b40      	subs	r3, #64	; 0x40
 8000f66:	2201      	movs	r2, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	81bb      	strh	r3, [r7, #12]
		GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <Pin_Mod+0x17c>)
 8000f78:	f7ff f98e 	bl	8000298 <GPIO_Init>
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	40010800 	.word	0x40010800
 8000f88:	40010c00 	.word	0x40010c00
 8000f8c:	40011000 	.word	0x40011000
 8000f90:	40011400 	.word	0x40011400
 8000f94:	40011800 	.word	0x40011800

08000f98 <Pin_Set>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval None
  */
void Pin_Set(u8 PortPin)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	if(PortPin <= 15)								// Port-A:  0~15
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d809      	bhi.n	8000fbc <Pin_Set+0x24>
		GPIOA->BSRR |= (0x0001 << PortPin);
 8000fa8:	4922      	ldr	r1, [pc, #136]	; (8001034 <Pin_Set+0x9c>)
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <Pin_Set+0x9c>)
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	610b      	str	r3, [r1, #16]
		GPIOD->BSRR |= (0x0001 << (PortPin - 48));
	else if(PortPin <= 79)							// Port-E: 64~79
		GPIOE->BSRR |= (0x0001 << (PortPin - 64));
	else											// Out of range(0~79)
		/* Null */;
}
 8000fba:	e036      	b.n	800102a <Pin_Set+0x92>
	else if(PortPin <= 31)							// Port-B: 16~31
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b1f      	cmp	r3, #31
 8000fc0:	d80a      	bhi.n	8000fd8 <Pin_Set+0x40>
		GPIOB->BSRR |= (0x0001 << (PortPin - 16));
 8000fc2:	491d      	ldr	r1, [pc, #116]	; (8001038 <Pin_Set+0xa0>)
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <Pin_Set+0xa0>)
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	3a10      	subs	r2, #16
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	610b      	str	r3, [r1, #16]
}
 8000fd6:	e028      	b.n	800102a <Pin_Set+0x92>
	else if(PortPin <= 47)							// Port-C: 32~47
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b2f      	cmp	r3, #47	; 0x2f
 8000fdc:	d80a      	bhi.n	8000ff4 <Pin_Set+0x5c>
		GPIOC->BSRR |= (0x0001 << (PortPin - 32));
 8000fde:	4917      	ldr	r1, [pc, #92]	; (800103c <Pin_Set+0xa4>)
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <Pin_Set+0xa4>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	3a20      	subs	r2, #32
 8000fe8:	2001      	movs	r0, #1
 8000fea:	fa00 f202 	lsl.w	r2, r0, r2
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	610b      	str	r3, [r1, #16]
}
 8000ff2:	e01a      	b.n	800102a <Pin_Set+0x92>
	else if(PortPin <= 63)							// Port-D: 48~63
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff8:	d80a      	bhi.n	8001010 <Pin_Set+0x78>
		GPIOD->BSRR |= (0x0001 << (PortPin - 48));
 8000ffa:	4911      	ldr	r1, [pc, #68]	; (8001040 <Pin_Set+0xa8>)
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <Pin_Set+0xa8>)
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	3a30      	subs	r2, #48	; 0x30
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	4313      	orrs	r3, r2
 800100c:	610b      	str	r3, [r1, #16]
}
 800100e:	e00c      	b.n	800102a <Pin_Set+0x92>
	else if(PortPin <= 79)							// Port-E: 64~79
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b4f      	cmp	r3, #79	; 0x4f
 8001014:	d809      	bhi.n	800102a <Pin_Set+0x92>
		GPIOE->BSRR |= (0x0001 << (PortPin - 64));
 8001016:	490b      	ldr	r1, [pc, #44]	; (8001044 <Pin_Set+0xac>)
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <Pin_Set+0xac>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	79fa      	ldrb	r2, [r7, #7]
 800101e:	3a40      	subs	r2, #64	; 0x40
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	4313      	orrs	r3, r2
 8001028:	610b      	str	r3, [r1, #16]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40010800 	.word	0x40010800
 8001038:	40010c00 	.word	0x40010c00
 800103c:	40011000 	.word	0x40011000
 8001040:	40011400 	.word	0x40011400
 8001044:	40011800 	.word	0x40011800

08001048 <Pin_Clr>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval None
  */
void Pin_Clr(u8 PortPin)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	if(PortPin <= 15)								// Port-A:  0~15
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d809      	bhi.n	800106c <Pin_Clr+0x24>
		GPIOA->BRR |= (0x0001 << PortPin);
 8001058:	4922      	ldr	r1, [pc, #136]	; (80010e4 <Pin_Clr+0x9c>)
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <Pin_Clr+0x9c>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	4313      	orrs	r3, r2
 8001068:	614b      	str	r3, [r1, #20]
		GPIOD->BRR |= (0x0001 << (PortPin - 48));
	else if(PortPin <= 79)							// Port-E: 64~79
		GPIOE->BRR |= (0x0001 << (PortPin - 64));
	else											// Out of range(0~79)
		/* Null */;
}
 800106a:	e036      	b.n	80010da <Pin_Clr+0x92>
	else if(PortPin <= 31)							// Port-B: 16~31
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b1f      	cmp	r3, #31
 8001070:	d80a      	bhi.n	8001088 <Pin_Clr+0x40>
		GPIOB->BRR |= (0x0001 << (PortPin - 16));
 8001072:	491d      	ldr	r1, [pc, #116]	; (80010e8 <Pin_Clr+0xa0>)
 8001074:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <Pin_Clr+0xa0>)
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	79fa      	ldrb	r2, [r7, #7]
 800107a:	3a10      	subs	r2, #16
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	4313      	orrs	r3, r2
 8001084:	614b      	str	r3, [r1, #20]
}
 8001086:	e028      	b.n	80010da <Pin_Clr+0x92>
	else if(PortPin <= 47)							// Port-C: 32~47
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b2f      	cmp	r3, #47	; 0x2f
 800108c:	d80a      	bhi.n	80010a4 <Pin_Clr+0x5c>
		GPIOC->BRR |= (0x0001 << (PortPin - 32));
 800108e:	4917      	ldr	r1, [pc, #92]	; (80010ec <Pin_Clr+0xa4>)
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <Pin_Clr+0xa4>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	3a20      	subs	r2, #32
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	4313      	orrs	r3, r2
 80010a0:	614b      	str	r3, [r1, #20]
}
 80010a2:	e01a      	b.n	80010da <Pin_Clr+0x92>
	else if(PortPin <= 63)							// Port-D: 48~63
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b3f      	cmp	r3, #63	; 0x3f
 80010a8:	d80a      	bhi.n	80010c0 <Pin_Clr+0x78>
		GPIOD->BRR |= (0x0001 << (PortPin - 48));
 80010aa:	4911      	ldr	r1, [pc, #68]	; (80010f0 <Pin_Clr+0xa8>)
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <Pin_Clr+0xa8>)
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	79fa      	ldrb	r2, [r7, #7]
 80010b2:	3a30      	subs	r2, #48	; 0x30
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	4313      	orrs	r3, r2
 80010bc:	614b      	str	r3, [r1, #20]
}
 80010be:	e00c      	b.n	80010da <Pin_Clr+0x92>
	else if(PortPin <= 79)							// Port-E: 64~79
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b4f      	cmp	r3, #79	; 0x4f
 80010c4:	d809      	bhi.n	80010da <Pin_Clr+0x92>
		GPIOE->BRR |= (0x0001 << (PortPin - 64));
 80010c6:	490b      	ldr	r1, [pc, #44]	; (80010f4 <Pin_Clr+0xac>)
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <Pin_Clr+0xac>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	3a40      	subs	r2, #64	; 0x40
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	4313      	orrs	r3, r2
 80010d8:	614b      	str	r3, [r1, #20]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40011000 	.word	0x40011000
 80010f0:	40011400 	.word	0x40011400
 80010f4:	40011800 	.word	0x40011800

080010f8 <Pin_Toggle>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval None
  */
void Pin_Toggle(u8 PortPin)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	if(PortPin <= 15)								// Port-A:  0~15
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d809      	bhi.n	800111c <Pin_Toggle+0x24>
		GPIOA->ODR ^= (0x0001 << PortPin);
 8001108:	4922      	ldr	r1, [pc, #136]	; (8001194 <Pin_Toggle+0x9c>)
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <Pin_Toggle+0x9c>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	4053      	eors	r3, r2
 8001118:	60cb      	str	r3, [r1, #12]
		GPIOD->ODR ^= (0x0001 << (PortPin - 48));
	else if(PortPin <= 79)							// Port-E: 64~79
		GPIOE->ODR ^= (0x0001 << (PortPin - 64));
	else											// Out of range(0~79)
		/* Null */;
}
 800111a:	e036      	b.n	800118a <Pin_Toggle+0x92>
	else if(PortPin <= 31)							// Port-B: 16~31
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b1f      	cmp	r3, #31
 8001120:	d80a      	bhi.n	8001138 <Pin_Toggle+0x40>
		GPIOB->ODR ^= (0x0001 << (PortPin - 16));
 8001122:	491d      	ldr	r1, [pc, #116]	; (8001198 <Pin_Toggle+0xa0>)
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <Pin_Toggle+0xa0>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	3a10      	subs	r2, #16
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	4053      	eors	r3, r2
 8001134:	60cb      	str	r3, [r1, #12]
}
 8001136:	e028      	b.n	800118a <Pin_Toggle+0x92>
	else if(PortPin <= 47)							// Port-C: 32~47
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b2f      	cmp	r3, #47	; 0x2f
 800113c:	d80a      	bhi.n	8001154 <Pin_Toggle+0x5c>
		GPIOC->ODR ^= (0x0001 << (PortPin - 32));
 800113e:	4917      	ldr	r1, [pc, #92]	; (800119c <Pin_Toggle+0xa4>)
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <Pin_Toggle+0xa4>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	79fa      	ldrb	r2, [r7, #7]
 8001146:	3a20      	subs	r2, #32
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	4053      	eors	r3, r2
 8001150:	60cb      	str	r3, [r1, #12]
}
 8001152:	e01a      	b.n	800118a <Pin_Toggle+0x92>
	else if(PortPin <= 63)							// Port-D: 48~63
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b3f      	cmp	r3, #63	; 0x3f
 8001158:	d80a      	bhi.n	8001170 <Pin_Toggle+0x78>
		GPIOD->ODR ^= (0x0001 << (PortPin - 48));
 800115a:	4911      	ldr	r1, [pc, #68]	; (80011a0 <Pin_Toggle+0xa8>)
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <Pin_Toggle+0xa8>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	79fa      	ldrb	r2, [r7, #7]
 8001162:	3a30      	subs	r2, #48	; 0x30
 8001164:	2001      	movs	r0, #1
 8001166:	fa00 f202 	lsl.w	r2, r0, r2
 800116a:	4053      	eors	r3, r2
 800116c:	60cb      	str	r3, [r1, #12]
}
 800116e:	e00c      	b.n	800118a <Pin_Toggle+0x92>
	else if(PortPin <= 79)							// Port-E: 64~79
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b4f      	cmp	r3, #79	; 0x4f
 8001174:	d809      	bhi.n	800118a <Pin_Toggle+0x92>
		GPIOE->ODR ^= (0x0001 << (PortPin - 64));
 8001176:	490b      	ldr	r1, [pc, #44]	; (80011a4 <Pin_Toggle+0xac>)
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <Pin_Toggle+0xac>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	79fa      	ldrb	r2, [r7, #7]
 800117e:	3a40      	subs	r2, #64	; 0x40
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	4053      	eors	r3, r2
 8001188:	60cb      	str	r3, [r1, #12]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40010800 	.word	0x40010800
 8001198:	40010c00 	.word	0x40010c00
 800119c:	40011000 	.word	0x40011000
 80011a0:	40011400 	.word	0x40011400
 80011a4:	40011800 	.word	0x40011800

080011a8 <Pin_Write>:
  * @param	Value: select High or Low to write.
  * 		This parameter should be: 1 or 0
  * @retval None
  */
void Pin_Write(u8 PortPin, u8 Value)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	460a      	mov	r2, r1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	71bb      	strb	r3, [r7, #6]
	if(Value == 1)
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d104      	bne.n	80011c8 <Pin_Write+0x20>
		Pin_Set(PortPin);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fee9 	bl	8000f98 <Pin_Set>
	else if(Value == 0)
		Pin_Clr(PortPin);
	else
		/* Null */;
}
 80011c6:	e006      	b.n	80011d6 <Pin_Write+0x2e>
	else if(Value == 0)
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d103      	bne.n	80011d6 <Pin_Write+0x2e>
		Pin_Clr(PortPin);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff39 	bl	8001048 <Pin_Clr>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <Pin_ReadInput>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval The input-pin value
  */
u8 Pin_ReadInput(u8 PortPin)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	u8 PinInputValue = 0x00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
//	else if(PortPin <= 79)								// Port-E: 64~79
//		PinInputValue = (GPIOE->IDR & (0x0001 << (PortPin - 64)));
//	else												// Out of range(0~79)
//		/* Null */;

	if(PortPin <= 15)									// Port-A:  0~15
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d80b      	bhi.n	800120c <Pin_ReadInput+0x2c>
		PinInputValue = GPIO_ReadInputDataBit(GPIOA, (0x0001 << PortPin));
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2201      	movs	r2, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	4824      	ldr	r0, [pc, #144]	; (8001294 <Pin_ReadInput+0xb4>)
 8001202:	f7ff f918 	bl	8000436 <GPIO_ReadInputDataBit>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e03e      	b.n	800128a <Pin_ReadInput+0xaa>
	else if(PortPin <= 31)								// Port-B: 16~31
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b1f      	cmp	r3, #31
 8001210:	d80c      	bhi.n	800122c <Pin_ReadInput+0x4c>
		PinInputValue = GPIO_ReadInputDataBit(GPIOB, (0x0001 << (PortPin - 16)));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	3b10      	subs	r3, #16
 8001216:	2201      	movs	r2, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	b29b      	uxth	r3, r3
 800121e:	4619      	mov	r1, r3
 8001220:	481d      	ldr	r0, [pc, #116]	; (8001298 <Pin_ReadInput+0xb8>)
 8001222:	f7ff f908 	bl	8000436 <GPIO_ReadInputDataBit>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e02e      	b.n	800128a <Pin_ReadInput+0xaa>
	else if(PortPin <= 47)								// Port-C: 32~47
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b2f      	cmp	r3, #47	; 0x2f
 8001230:	d80c      	bhi.n	800124c <Pin_ReadInput+0x6c>
		PinInputValue = GPIO_ReadInputDataBit(GPIOB, (0x0001 << (PortPin - 32)));
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3b20      	subs	r3, #32
 8001236:	2201      	movs	r2, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	4619      	mov	r1, r3
 8001240:	4815      	ldr	r0, [pc, #84]	; (8001298 <Pin_ReadInput+0xb8>)
 8001242:	f7ff f8f8 	bl	8000436 <GPIO_ReadInputDataBit>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e01e      	b.n	800128a <Pin_ReadInput+0xaa>
	else if(PortPin <= 63)								// Port-D: 48~63
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b3f      	cmp	r3, #63	; 0x3f
 8001250:	d80c      	bhi.n	800126c <Pin_ReadInput+0x8c>
		PinInputValue = GPIO_ReadInputDataBit(GPIOB, (0x0001 << (PortPin - 48)));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	3b30      	subs	r3, #48	; 0x30
 8001256:	2201      	movs	r2, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <Pin_ReadInput+0xb8>)
 8001262:	f7ff f8e8 	bl	8000436 <GPIO_ReadInputDataBit>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e00e      	b.n	800128a <Pin_ReadInput+0xaa>
	else if(PortPin <= 79)								// Port-E: 64~79
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2b4f      	cmp	r3, #79	; 0x4f
 8001270:	d80b      	bhi.n	800128a <Pin_ReadInput+0xaa>
		PinInputValue = GPIO_ReadInputDataBit(GPIOB, (0x0001 << (PortPin - 64)));
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	3b40      	subs	r3, #64	; 0x40
 8001276:	2201      	movs	r2, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	b29b      	uxth	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <Pin_ReadInput+0xb8>)
 8001282:	f7ff f8d8 	bl	8000436 <GPIO_ReadInputDataBit>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
	else												// Out of range(0~79)
		/* Null */;

	return PinInputValue;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010800 	.word	0x40010800
 8001298:	40010c00 	.word	0x40010c00

0800129c <Pin_ReadOutput>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval The output-pin value
  */
u8 Pin_ReadOutput(u8 PortPin)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	u8 PinInputValue = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]

	if(PortPin <= 15)									// Port-A:  0~15
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80b      	bhi.n	80012c8 <Pin_ReadOutput+0x2c>
		PinInputValue = GPIO_ReadOutputDataBit(GPIOA, (0x0001 << PortPin));
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2201      	movs	r2, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <Pin_ReadOutput+0xb4>)
 80012be:	f7ff f8d3 	bl	8000468 <GPIO_ReadOutputDataBit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e03e      	b.n	8001346 <Pin_ReadOutput+0xaa>
	else if(PortPin <= 31)								// Port-B: 16~31
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b1f      	cmp	r3, #31
 80012cc:	d80c      	bhi.n	80012e8 <Pin_ReadOutput+0x4c>
		PinInputValue = GPIO_ReadOutputDataBit(GPIOB, (0x0001 << (PortPin - 16)));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	3b10      	subs	r3, #16
 80012d2:	2201      	movs	r2, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <Pin_ReadOutput+0xb8>)
 80012de:	f7ff f8c3 	bl	8000468 <GPIO_ReadOutputDataBit>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e02e      	b.n	8001346 <Pin_ReadOutput+0xaa>
	else if(PortPin <= 47)								// Port-C: 32~47
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b2f      	cmp	r3, #47	; 0x2f
 80012ec:	d80c      	bhi.n	8001308 <Pin_ReadOutput+0x6c>
		PinInputValue = GPIO_ReadOutputDataBit(GPIOB, (0x0001 << (PortPin - 32)));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	3b20      	subs	r3, #32
 80012f2:	2201      	movs	r2, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	4815      	ldr	r0, [pc, #84]	; (8001354 <Pin_ReadOutput+0xb8>)
 80012fe:	f7ff f8b3 	bl	8000468 <GPIO_ReadOutputDataBit>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e01e      	b.n	8001346 <Pin_ReadOutput+0xaa>
	else if(PortPin <= 63)								// Port-D: 48~63
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2b3f      	cmp	r3, #63	; 0x3f
 800130c:	d80c      	bhi.n	8001328 <Pin_ReadOutput+0x8c>
		PinInputValue = GPIO_ReadOutputDataBit(GPIOB, (0x0001 << (PortPin - 48)));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	3b30      	subs	r3, #48	; 0x30
 8001312:	2201      	movs	r2, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <Pin_ReadOutput+0xb8>)
 800131e:	f7ff f8a3 	bl	8000468 <GPIO_ReadOutputDataBit>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e00e      	b.n	8001346 <Pin_ReadOutput+0xaa>
	else if(PortPin <= 79)								// Port-E: 64~79
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b4f      	cmp	r3, #79	; 0x4f
 800132c:	d80b      	bhi.n	8001346 <Pin_ReadOutput+0xaa>
		PinInputValue = GPIO_ReadOutputDataBit(GPIOB, (0x0001 << (PortPin - 64)));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	3b40      	subs	r3, #64	; 0x40
 8001332:	2201      	movs	r2, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <Pin_ReadOutput+0xb8>)
 800133e:	f7ff f893 	bl	8000468 <GPIO_ReadOutputDataBit>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]
	else												// Out of range(0~79)
		/* Null */;

	return PinInputValue;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00

08001358 <NVIC_Initialization>:
  * @brief  Initialize NVIC.
  * @param  None
  * @retval None
  */
void NVIC_Initialization(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;	// Structure Declarations

	/* Configures the priority grouping */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 800135e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001362:	f7fe fef3 	bl	800014c <NVIC_PriorityGroupConfig>

	/* Configure the NVIC */
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001366:	2326      	movs	r3, #38	; 0x26
 8001368:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001372:	2301      	movs	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe fef9 	bl	8000170 <NVIC_Init>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <PWM_Initialization>:
  * @brief  Initialize PWM.
  * @param  None
  * @retval None
  */
void PWM_Initialization(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
	TIM_OCInitTypeDef 		TIM_OCInitStructure;

//	TIM_OCStructInit(& TIM_OCInitStructure);

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 999; // Set the Auto-Reload value
 800138e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001392:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = 0; // Set the Prescaler value
 8001394:	2300      	movs	r3, #0
 8001396:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	837b      	strh	r3, [r7, #26]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;	// Select the Counter Mode
 800139c:	2300      	movs	r3, #0
 800139e:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4810      	ldr	r0, [pc, #64]	; (80013e8 <PWM_Initialization+0x60>)
 80013a8:	f7ff f992 	bl	80006d0 <TIM_TimeBaseInit>

	/* PWM1 Mode configuration */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80013ac:	2360      	movs	r3, #96	; 0x60
 80013ae:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80013b0:	2301      	movs	r3, #1
 80013b2:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 333;	// TIM_Pulse=CCR1
 80013b4:	f240 134d 	movw	r3, #333	; 0x14d
 80013b8:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80013ba:	2300      	movs	r3, #0
 80013bc:	81bb      	strh	r3, [r7, #12]
//	TIM_OC2Init(TIM3, &TIM_OCInitStructure);	// TIM3_CH2
	TIM_OC1Init(TIM3, &TIM_OCInitStructure);	// TIM3_CH1
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <PWM_Initialization+0x60>)
 80013c4:	f7ff fa00 	bl	80007c8 <TIM_OC1Init>
//	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);	// TIMx peripheral Preload register on CCR1
//	TIM_ARRPreloadConfig(TIM3, ENABLE);					// TIMx peripheral Preload register on ARR
//	TIM_Cmd(TIM3, ENABLE);								// The specified TIM peripheral

	// TIM3_CH1 (Motor0)
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);	// TIMx peripheral Preload register on CCR1
 80013c8:	2108      	movs	r1, #8
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <PWM_Initialization+0x60>)
 80013cc:	f7ff fac6 	bl	800095c <TIM_OC1PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);					// TIMx peripheral Preload register on ARR
 80013d0:	2101      	movs	r1, #1
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <PWM_Initialization+0x60>)
 80013d4:	f7ff faa3 	bl	800091e <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM3, ENABLE);								// The specified TIM peripheral
 80013d8:	2101      	movs	r1, #1
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <PWM_Initialization+0x60>)
 80013dc:	f7ff fa80 	bl	80008e0 <TIM_Cmd>
}
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40000400 	.word	0x40000400

080013ec <RCC_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run this function before any other initialization.
  */
void RCC_Initialization(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

	/* Resets the RCC clock configuration to the default reset state */
	RCC_DeInit();
 80013f0:	f7ff f854 	bl	800049c <RCC_DeInit>

	/* RCC APB1 */
	RCC_APB1PeriphClockCmd(	RCC_APB1Periph_USART2	|
 80013f4:	2101      	movs	r1, #1
 80013f6:	f04f 1002 	mov.w	r0, #131074	; 0x20002
 80013fa:	f7ff f94b 	bl	8000694 <RCC_APB1PeriphClockCmd>
//							RCC_APB1Periph_TIM2		|	// PWM:Motor0-Speed
							RCC_APB1Periph_TIM3		,	// PWM:Motor1-Speed
							ENABLE);

	/* RCC APB2 */
	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA |
 80013fe:	2101      	movs	r1, #1
 8001400:	207c      	movs	r0, #124	; 0x7c
 8001402:	f7ff f929 	bl	8000658 <RCC_APB2PeriphClockCmd>
							RCC_APB2Periph_GPIOC |
							RCC_APB2Periph_GPIOD |
							RCC_APB2Periph_GPIOE,
//							RCC_APB2Periph_AFIO,
							ENABLE);
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <USART_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void USART_Initialization(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	USART_InitTypeDef USART_InitStructure;

//	USART_DeInit(USART2);
	USART_StructInit(&USART_InitStructure);	// Fills each USART_InitStruct member with its default value
 8001412:	463b      	mov	r3, r7
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fb85 	bl	8000b24 <USART_StructInit>
	 * - One Stop Bit
	 * - No parity
	 * - Hardware flow control disabled (RTS and CTS signals)
	 * - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = 9600;
 800141a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800141e:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001420:	2300      	movs	r3, #0
 8001422:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001424:	2300      	movs	r3, #0
 8001426:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001428:	2300      	movs	r3, #0
 800142a:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800142c:	2300      	movs	r3, #0
 800142e:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001430:	230c      	movs	r3, #12
 8001432:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_InitStructure);
 8001434:	463b      	mov	r3, r7
 8001436:	4619      	mov	r1, r3
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <USART_Initialization+0x58>)
 800143a:	f7ff fab9 	bl	80009b0 <USART_Init>

	/* Enable "Receive data register not empty" interrupt */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800143e:	2201      	movs	r2, #1
 8001440:	f240 5125 	movw	r1, #1317	; 0x525
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <USART_Initialization+0x58>)
 8001446:	f7ff fba8 	bl	8000b9a <USART_ITConfig>

	/* Enable USART */
	USART_Cmd(USART2, ENABLE);
 800144a:	2101      	movs	r1, #1
 800144c:	4805      	ldr	r0, [pc, #20]	; (8001464 <USART_Initialization+0x58>)
 800144e:	f7ff fb85 	bl	8000b5c <USART_Cmd>

	/* Clear "Transmission Complete" flag, 否則第1位數據會丟失 */
	USART_ClearFlag(USART2, USART_FLAG_TC);
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	4803      	ldr	r0, [pc, #12]	; (8001464 <USART_Initialization+0x58>)
 8001456:	f7ff fc22 	bl	8000c9e <USART_ClearFlag>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004400 	.word	0x40004400

08001468 <USART_Send>:
  *   				USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_Send(USART_TypeDef* USARTx, uint8_t* Data)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
	for (int i = 0; Data[i] != '\0'; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e013      	b.n	80014a0 <USART_Send+0x38>
	{
		/* Transmits single data through the USARTx peripheral */
		USART_SendData(USARTx, (uint16_t)Data[i]);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fbcf 	bl	8000c28 <USART_SendData>

		/* Wait until transmission complete, use TC or TXE flag */
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET)
 800148a:	bf00      	nop
 800148c:	2140      	movs	r1, #64	; 0x40
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fbea 	bl	8000c68 <USART_GetFlagStatus>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f8      	beq.n	800148c <USART_Send+0x24>
	for (int i = 0; Data[i] != '\0'; i++)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e5      	bne.n	8001478 <USART_Send+0x10>
		{/* Null */}
	}
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	da0b      	bge.n	80014e0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80014c8:	490d      	ldr	r1, [pc, #52]	; (8001500 <NVIC_SetPriority+0x4c>)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	3b04      	subs	r3, #4
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80014de:	e009      	b.n	80014f4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80014e0:	4908      	ldr	r1, [pc, #32]	; (8001504 <NVIC_SetPriority+0x50>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	e000e100 	.word	0xe000e100

08001508 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001516:	d301      	bcc.n	800151c <SysTick_Config+0x14>
 8001518:	2301      	movs	r3, #1
 800151a:	e011      	b.n	8001540 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001524:	3b01      	subs	r3, #1
 8001526:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8001528:	210f      	movs	r1, #15
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	f7ff ffc1 	bl	80014b4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <SysTick_Config+0x40>)
 800153a:	2207      	movs	r2, #7
 800153c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	e000e010 	.word	0xe000e010

0800154c <main>:
 * @brief   Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	 To reconfigure the default setting of SystemInit() function, refer to
	 system_stm32f10x.c file
	 */

	/* SysTick end of count event each 1ms */
	RCC_GetClocksFreq(&RCC_Clocks);
 8001550:	4819      	ldr	r0, [pc, #100]	; (80015b8 <main+0x6c>)
 8001552:	f7fe ffd1 	bl	80004f8 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <main+0x6c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <main+0x70>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	099b      	lsrs	r3, r3, #6
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ffd0 	bl	8001508 <SysTick_Config>

	/* Initialization */
	// Functions & Setups
	RCC_Initialization();
 8001568:	f7ff ff40 	bl	80013ec <RCC_Initialization>
	GPIO_Initialization();
 800156c:	f7ff fc01 	bl	8000d72 <GPIO_Initialization>
	USART_Initialization();
 8001570:	f7ff ff4c 	bl	800140c <USART_Initialization>
	PWM_Initialization();
 8001574:	f7ff ff08 	bl	8001388 <PWM_Initialization>
	NVIC_Initialization();
 8001578:	f7ff feee 	bl	8001358 <NVIC_Initialization>

	// Reset all motor
	TIM_SetCompare1(TIM3, 0);		// Immediately set motor0 speed=0%
 800157c:	2100      	movs	r1, #0
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <main+0x74>)
 8001580:	f7ff fa07 	bl	8000992 <TIM_SetCompare1>
	MotorCtrl(0, Disable, CCW, 0);	// Motor0: Disable, CCW, Speed:0%
 8001584:	2300      	movs	r3, #0
 8001586:	2201      	movs	r2, #1
 8001588:	2100      	movs	r1, #0
 800158a:	2000      	movs	r0, #0
 800158c:	f000 f8be 	bl	800170c <MotorCtrl>
	MotorCtrl(1, Disable, CW, 0);	// Motor1: Disable,  CW, Speed:0%
 8001590:	2300      	movs	r3, #0
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2001      	movs	r0, #1
 8001598:	f000 f8b8 	bl	800170c <MotorCtrl>

	// Turn off LD2(User-LED)
	Pin_Clr(LD2);
 800159c:	2005      	movs	r0, #5
 800159e:	f7ff fd53 	bl	8001048 <Pin_Clr>

	USART_Send(USART2, "[System]Start.\n");
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <main+0x78>)
 80015a4:	4808      	ldr	r0, [pc, #32]	; (80015c8 <main+0x7c>)
 80015a6:	f7ff ff5f 	bl	8001468 <USART_Send>

	/* Infinite loop */
	while(1)
	{
		SendStatus();
 80015aa:	f000 f80f 	bl	80015cc <SendStatus>
		Delay(250);
 80015ae:	20fa      	movs	r0, #250	; 0xfa
 80015b0:	f000 f9c0 	bl	8001934 <Delay>
		SendStatus();
 80015b4:	e7f9      	b.n	80015aa <main+0x5e>
 80015b6:	bf00      	nop
 80015b8:	20000054 	.word	0x20000054
 80015bc:	10624dd3 	.word	0x10624dd3
 80015c0:	40000400 	.word	0x40000400
 80015c4:	08002078 	.word	0x08002078
 80015c8:	40004400 	.word	0x40004400

080015cc <SendStatus>:
* @brief  	Send status.
* @param	None
* @retval 	None
*/
void SendStatus(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	// Binary:010nnrXX
//	TxData = ((0x40 | (Motor << 3)) | (Pin_Read(MotorPin[Motor][2]) << 2));
//	USART_Send(USART2, TxData);

	// Motor0
	USART_Send(USART2, "[Status]Motor0 ");
 80015d0:	493f      	ldr	r1, [pc, #252]	; (80016d0 <SendStatus+0x104>)
 80015d2:	4840      	ldr	r0, [pc, #256]	; (80016d4 <SendStatus+0x108>)
 80015d4:	f7ff ff48 	bl	8001468 <USART_Send>
	if(Pin_ReadInput(PinMotor0_Ready) == 1)	// Motor_Ready pin=High
 80015d8:	2014      	movs	r0, #20
 80015da:	f7ff fe01 	bl	80011e0 <Pin_ReadInput>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d104      	bne.n	80015ee <SendStatus+0x22>
		USART_Send(USART2, "Ready ; ");
 80015e4:	493c      	ldr	r1, [pc, #240]	; (80016d8 <SendStatus+0x10c>)
 80015e6:	483b      	ldr	r0, [pc, #236]	; (80016d4 <SendStatus+0x108>)
 80015e8:	f7ff ff3e 	bl	8001468 <USART_Send>
 80015ec:	e003      	b.n	80015f6 <SendStatus+0x2a>
	else									// Motor_Ready pin=Low
		USART_Send(USART2, "FAULT ; ");
 80015ee:	493b      	ldr	r1, [pc, #236]	; (80016dc <SendStatus+0x110>)
 80015f0:	4838      	ldr	r0, [pc, #224]	; (80016d4 <SendStatus+0x108>)
 80015f2:	f7ff ff39 	bl	8001468 <USART_Send>

	if(Pin_ReadOutput(PinMotor0_Enbale) == 1)
 80015f6:	2015      	movs	r0, #21
 80015f8:	f7ff fe50 	bl	800129c <Pin_ReadOutput>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d104      	bne.n	800160c <SendStatus+0x40>
		USART_Send(USART2, " Enable ; ");
 8001602:	4937      	ldr	r1, [pc, #220]	; (80016e0 <SendStatus+0x114>)
 8001604:	4833      	ldr	r0, [pc, #204]	; (80016d4 <SendStatus+0x108>)
 8001606:	f7ff ff2f 	bl	8001468 <USART_Send>
 800160a:	e003      	b.n	8001614 <SendStatus+0x48>
	else
		USART_Send(USART2, "Disable ; ");
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <SendStatus+0x118>)
 800160e:	4831      	ldr	r0, [pc, #196]	; (80016d4 <SendStatus+0x108>)
 8001610:	f7ff ff2a 	bl	8001468 <USART_Send>

	if(Pin_ReadOutput(PinMotor0_Direction) == 1)
 8001614:	201a      	movs	r0, #26
 8001616:	f7ff fe41 	bl	800129c <Pin_ReadOutput>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d104      	bne.n	800162a <SendStatus+0x5e>
		USART_Send(USART2, "CCW ; ");
 8001620:	4931      	ldr	r1, [pc, #196]	; (80016e8 <SendStatus+0x11c>)
 8001622:	482c      	ldr	r0, [pc, #176]	; (80016d4 <SendStatus+0x108>)
 8001624:	f7ff ff20 	bl	8001468 <USART_Send>
 8001628:	e003      	b.n	8001632 <SendStatus+0x66>
	else
		USART_Send(USART2, " CW ; ");
 800162a:	4930      	ldr	r1, [pc, #192]	; (80016ec <SendStatus+0x120>)
 800162c:	4829      	ldr	r0, [pc, #164]	; (80016d4 <SendStatus+0x108>)
 800162e:	f7ff ff1b 	bl	8001468 <USART_Send>
	USART_Send(USART2, "S: ");
 8001632:	492f      	ldr	r1, [pc, #188]	; (80016f0 <SendStatus+0x124>)
 8001634:	4827      	ldr	r0, [pc, #156]	; (80016d4 <SendStatus+0x108>)
 8001636:	f7ff ff17 	bl	8001468 <USART_Send>
	USART_Send(USART2, Number_TO_String(PerMill_TO_Percentage(TIM3->CCR1)));
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <SendStatus+0x128>)
 800163c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800163e:	b29b      	uxth	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f93b 	bl	80018bc <PerMill_TO_Percentage>
 8001646:	4603      	mov	r3, r0
 8001648:	b29b      	uxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f922 	bl	8001894 <Number_TO_String>
 8001650:	4603      	mov	r3, r0
 8001652:	4619      	mov	r1, r3
 8001654:	481f      	ldr	r0, [pc, #124]	; (80016d4 <SendStatus+0x108>)
 8001656:	f7ff ff07 	bl	8001468 <USART_Send>
	USART_Send(USART2, "%\n");
 800165a:	4927      	ldr	r1, [pc, #156]	; (80016f8 <SendStatus+0x12c>)
 800165c:	481d      	ldr	r0, [pc, #116]	; (80016d4 <SendStatus+0x108>)
 800165e:	f7ff ff03 	bl	8001468 <USART_Send>

	// Motor1
	USART_Send(USART2, "[Status]Motor1 ");
 8001662:	4926      	ldr	r1, [pc, #152]	; (80016fc <SendStatus+0x130>)
 8001664:	481b      	ldr	r0, [pc, #108]	; (80016d4 <SendStatus+0x108>)
 8001666:	f7ff feff 	bl	8001468 <USART_Send>
	if(Pin_ReadInput(PinMotor1_Ready) == 1)	// Motor_Ready pin=High
 800166a:	2007      	movs	r0, #7
 800166c:	f7ff fdb8 	bl	80011e0 <Pin_ReadInput>
 8001670:	4603      	mov	r3, r0
 8001672:	2b01      	cmp	r3, #1
 8001674:	d104      	bne.n	8001680 <SendStatus+0xb4>
		USART_Send(USART2, "Ready ; ");
 8001676:	4918      	ldr	r1, [pc, #96]	; (80016d8 <SendStatus+0x10c>)
 8001678:	4816      	ldr	r0, [pc, #88]	; (80016d4 <SendStatus+0x108>)
 800167a:	f7ff fef5 	bl	8001468 <USART_Send>
 800167e:	e003      	b.n	8001688 <SendStatus+0xbc>
	else									// Motor_Ready pin=Low
		USART_Send(USART2, "FAULT ; ");
 8001680:	4916      	ldr	r1, [pc, #88]	; (80016dc <SendStatus+0x110>)
 8001682:	4814      	ldr	r0, [pc, #80]	; (80016d4 <SendStatus+0x108>)
 8001684:	f7ff fef0 	bl	8001468 <USART_Send>

	if(Pin_ReadOutput(PinMotor1_Enbale) == 1)
 8001688:	2008      	movs	r0, #8
 800168a:	f7ff fe07 	bl	800129c <Pin_ReadOutput>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	d104      	bne.n	800169e <SendStatus+0xd2>
		USART_Send(USART2, " Enable ; ");
 8001694:	4912      	ldr	r1, [pc, #72]	; (80016e0 <SendStatus+0x114>)
 8001696:	480f      	ldr	r0, [pc, #60]	; (80016d4 <SendStatus+0x108>)
 8001698:	f7ff fee6 	bl	8001468 <USART_Send>
 800169c:	e003      	b.n	80016a6 <SendStatus+0xda>
	else
		USART_Send(USART2, "Disable ; ");
 800169e:	4911      	ldr	r1, [pc, #68]	; (80016e4 <SendStatus+0x118>)
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <SendStatus+0x108>)
 80016a2:	f7ff fee1 	bl	8001468 <USART_Send>

	if(Pin_ReadOutput(PinMotor1_Direction) == 1)
 80016a6:	2009      	movs	r0, #9
 80016a8:	f7ff fdf8 	bl	800129c <Pin_ReadOutput>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d104      	bne.n	80016bc <SendStatus+0xf0>
		USART_Send(USART2, "CCW\n");
 80016b2:	4913      	ldr	r1, [pc, #76]	; (8001700 <SendStatus+0x134>)
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <SendStatus+0x108>)
 80016b6:	f7ff fed7 	bl	8001468 <USART_Send>
 80016ba:	e003      	b.n	80016c4 <SendStatus+0xf8>
	else
		USART_Send(USART2, " CW\n");
 80016bc:	4911      	ldr	r1, [pc, #68]	; (8001704 <SendStatus+0x138>)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <SendStatus+0x108>)
 80016c0:	f7ff fed2 	bl	8001468 <USART_Send>

	USART_Send(USART2, "----------\n");
 80016c4:	4910      	ldr	r1, [pc, #64]	; (8001708 <SendStatus+0x13c>)
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <SendStatus+0x108>)
 80016c8:	f7ff fece 	bl	8001468 <USART_Send>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08002088 	.word	0x08002088
 80016d4:	40004400 	.word	0x40004400
 80016d8:	08002098 	.word	0x08002098
 80016dc:	080020a4 	.word	0x080020a4
 80016e0:	080020b0 	.word	0x080020b0
 80016e4:	080020bc 	.word	0x080020bc
 80016e8:	080020c8 	.word	0x080020c8
 80016ec:	080020d0 	.word	0x080020d0
 80016f0:	080020d8 	.word	0x080020d8
 80016f4:	40000400 	.word	0x40000400
 80016f8:	080020dc 	.word	0x080020dc
 80016fc:	080020e0 	.word	0x080020e0
 8001700:	080020f0 	.word	0x080020f0
 8001704:	080020f8 	.word	0x080020f8
 8001708:	08002100 	.word	0x08002100

0800170c <MotorCtrl>:
* 			This parameter should be: 0~100, 127.
* 			0~100: 0%~100%; 127: Keep.
* @retval 	None
*/
void MotorCtrl(uint8_t Motor, uint8_t Status, uint8_t Direction, uint16_t Speed)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	4603      	mov	r3, r0
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	460b      	mov	r3, r1
 8001724:	717b      	strb	r3, [r7, #5]
 8001726:	4613      	mov	r3, r2
 8001728:	807b      	strh	r3, [r7, #2]
//	u16 DutyCycleValue;

	// Status
	if(Status <= 1)								// Disable(0) & Enable(1)
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d80c      	bhi.n	800174a <MotorCtrl+0x3e>
		Pin_Write((MotorPin[Motor][0]), Status);
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	4936      	ldr	r1, [pc, #216]	; (800180c <MotorCtrl+0x100>)
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	440b      	add	r3, r1
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	79ba      	ldrb	r2, [r7, #6]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fd30 	bl	80011a8 <Pin_Write>
 8001748:	e00c      	b.n	8001764 <MotorCtrl+0x58>
	else if(Status == 2)						// Toggle(2)
 800174a:	79bb      	ldrb	r3, [r7, #6]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d109      	bne.n	8001764 <MotorCtrl+0x58>
		Pin_Toggle(MotorPin[Motor][0]);
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	492e      	ldr	r1, [pc, #184]	; (800180c <MotorCtrl+0x100>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	440b      	add	r3, r1
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fcca 	bl	80010f8 <Pin_Toggle>
	else /* Null */;							// Keep(3)

	// Direction
	if(Direction <= 1)							// CW(0) & CCW(1)
 8001764:	797b      	ldrb	r3, [r7, #5]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d80d      	bhi.n	8001786 <MotorCtrl+0x7a>
		Pin_Write((MotorPin[Motor][1]), Direction);
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	4927      	ldr	r1, [pc, #156]	; (800180c <MotorCtrl+0x100>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	440b      	add	r3, r1
 8001776:	3301      	adds	r3, #1
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	797a      	ldrb	r2, [r7, #5]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fd12 	bl	80011a8 <Pin_Write>
 8001784:	e00d      	b.n	80017a2 <MotorCtrl+0x96>
	else if(Direction == 2)						// Toggle(2)
 8001786:	797b      	ldrb	r3, [r7, #5]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d10a      	bne.n	80017a2 <MotorCtrl+0x96>
		Pin_Toggle(MotorPin[Motor][1]);
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	491f      	ldr	r1, [pc, #124]	; (800180c <MotorCtrl+0x100>)
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	440b      	add	r3, r1
 8001798:	3301      	adds	r3, #1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fcab 	bl	80010f8 <Pin_Toggle>
	else /* Null */;							// Keep(3)

	// Speed
	if(Speed == 0)	// Turn OFF the motor
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d110      	bne.n	80017ca <MotorCtrl+0xbe>
	{
		Pin_Write((MotorPin[Motor][0]), Disable);
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	4918      	ldr	r1, [pc, #96]	; (800180c <MotorCtrl+0x100>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fcf5 	bl	80011a8 <Pin_Write>
//		TIM_SetCompare1((MotorTimer[Motor]), 0);
		MotorAccelerationCtrl(Motor, 0);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f824 	bl	8001810 <MotorAccelerationCtrl>
	else if(Speed == 127)	// Keep the speed of motor
	{
		/* Null */;
	}
	else /* Null */;
}
 80017c8:	e01c      	b.n	8001804 <MotorCtrl+0xf8>
	else if(Speed == 100)
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	2b64      	cmp	r3, #100	; 0x64
 80017ce:	d106      	bne.n	80017de <MotorCtrl+0xd2>
		MotorAccelerationCtrl(Motor, 999);		// Set PWM duty cycle=100%
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f240 31e7 	movw	r1, #999	; 0x3e7
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f81a 	bl	8001810 <MotorAccelerationCtrl>
}
 80017dc:	e012      	b.n	8001804 <MotorCtrl+0xf8>
	else if((Speed > 0) && (Speed < 100))
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00f      	beq.n	8001804 <MotorCtrl+0xf8>
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	2b63      	cmp	r3, #99	; 0x63
 80017e8:	d80c      	bhi.n	8001804 <MotorCtrl+0xf8>
		MotorAccelerationCtrl(Motor, ((Speed*10)-1));	// Set duty cycle
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	461a      	mov	r2, r3
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f806 	bl	8001810 <MotorAccelerationCtrl>
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	20000014 	.word	0x20000014

08001810 <MotorAccelerationCtrl>:
 * @brief	Motor acceleration control
 * @param 	Motor: The motor want to control.
 * @param 	TargetSpeed: The Target speed.
 */
void MotorAccelerationCtrl(uint8_t Motor, uint16_t TargetSpeed)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	4613      	mov	r3, r2
 800181e:	80bb      	strh	r3, [r7, #4]
	while(TargetSpeed != (TIM3->CCR1))
 8001820:	e029      	b.n	8001876 <MotorAccelerationCtrl+0x66>
	{
		uint16_t NowSpeed = (TIM3->CCR1);	// Read PMW Duty-Cycle% Value
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MotorAccelerationCtrl+0x7c>)
 8001824:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001826:	81fb      	strh	r3, [r7, #14]
//		int32_t SpeedDif = TargetSpeed - NowSpeed;

		if((TargetSpeed - NowSpeed) > 0)
 8001828:	88ba      	ldrh	r2, [r7, #4]
 800182a:	89fb      	ldrh	r3, [r7, #14]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	dd0c      	ble.n	800184c <MotorAccelerationCtrl+0x3c>
		{
			TIM_SetCompare1((MotorTimer[Motor]), (NowSpeed+1)); // Set duty cycle
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4a16      	ldr	r2, [pc, #88]	; (8001890 <MotorAccelerationCtrl+0x80>)
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	461a      	mov	r2, r3
 800183c:	89fb      	ldrh	r3, [r7, #14]
 800183e:	3301      	adds	r3, #1
 8001840:	b29b      	uxth	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	4610      	mov	r0, r2
 8001846:	f7ff f8a4 	bl	8000992 <TIM_SetCompare1>
 800184a:	e010      	b.n	800186e <MotorAccelerationCtrl+0x5e>
		}
		else if((TargetSpeed - NowSpeed) < 0)
 800184c:	88ba      	ldrh	r2, [r7, #4]
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	da0b      	bge.n	800186e <MotorAccelerationCtrl+0x5e>
		{
			TIM_SetCompare1((MotorTimer[Motor]), (NowSpeed-1)); // Set duty cycle
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <MotorAccelerationCtrl+0x80>)
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	461a      	mov	r2, r3
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	3b01      	subs	r3, #1
 8001864:	b29b      	uxth	r3, r3
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f7ff f892 	bl	8000992 <TIM_SetCompare1>
		}

		Delay_normal(0xFCF);
 800186e:	f640 70cf 	movw	r0, #4047	; 0xfcf
 8001872:	f000 f84f 	bl	8001914 <Delay_normal>
	while(TargetSpeed != (TIM3->CCR1))
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <MotorAccelerationCtrl+0x7c>)
 8001878:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800187a:	b29b      	uxth	r3, r3
 800187c:	88ba      	ldrh	r2, [r7, #4]
 800187e:	429a      	cmp	r2, r3
 8001880:	d1cf      	bne.n	8001822 <MotorAccelerationCtrl+0x12>
	}
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40000400 	.word	0x40000400
 8001890:	2000001c 	.word	0x2000001c

08001894 <Number_TO_String>:
 * @brief	Convert number into string
 * @param 	Number: The number want to convert.
 * @return	The converted string.
 */
char* Number_TO_String(uint16_t Number)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
	static char string[3];
	sprintf(string, "%d", Number);
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4904      	ldr	r1, [pc, #16]	; (80018b4 <Number_TO_String+0x20>)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <Number_TO_String+0x24>)
 80018a6:	f000 fba0 	bl	8001fea <siprintf>
	return string;
 80018aa:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <Number_TO_String+0x24>)
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	0800210c 	.word	0x0800210c
 80018b8:	2000004c 	.word	0x2000004c

080018bc <PerMill_TO_Percentage>:
 * @brief	Convert 0~999 into 0~100
 * @param 	PerMill: The PerMill number want to convert. 0~999.
 * @return	The converted percentage.
 */
u8 PerMill_TO_Percentage(u16 PerMill)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
	u8 Percentage;

	if(PerMill == 0)
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <PerMill_TO_Percentage+0x16>
		Percentage = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e018      	b.n	8001904 <PerMill_TO_Percentage+0x48>
	else if(PerMill == 999)
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d8:	4293      	cmp	r3, r2
 80018da:	d102      	bne.n	80018e2 <PerMill_TO_Percentage+0x26>
		Percentage = 100;
 80018dc:	2364      	movs	r3, #100	; 0x64
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e010      	b.n	8001904 <PerMill_TO_Percentage+0x48>
	else if(PerMill > 1 && PerMill < 999)
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d90d      	bls.n	8001904 <PerMill_TO_Percentage+0x48>
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	f240 32e6 	movw	r2, #998	; 0x3e6
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d808      	bhi.n	8001904 <PerMill_TO_Percentage+0x48>
		Percentage = ((PerMill+1)/10);
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	3301      	adds	r3, #1
 80018f6:	4a06      	ldr	r2, [pc, #24]	; (8001910 <PerMill_TO_Percentage+0x54>)
 80018f8:	fb82 1203 	smull	r1, r2, r2, r3
 80018fc:	1092      	asrs	r2, r2, #2
 80018fe:	17db      	asrs	r3, r3, #31
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	73fb      	strb	r3, [r7, #15]
	else /* Null */;

	return Percentage;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	66666667 	.word	0x66666667

08001914 <Delay_normal>:
 * @brief  Inserts a delay time(no-interrupt).
 * @param  nTime: specifies the delay time length.
 * @retval None
 */
void Delay_normal(__IO u32 nTime)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	for(; nTime != 0; nTime--);
 800191c:	e002      	b.n	8001924 <Delay_normal+0x10>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3b01      	subs	r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f9      	bne.n	800191e <Delay_normal+0xa>
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <Delay>:
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in 1 ms.
 * @retval None
 */
void Delay(__IO uint32_t nTime)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	TimingDelay = nTime;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a06      	ldr	r2, [pc, #24]	; (8001958 <Delay+0x24>)
 8001940:	6013      	str	r3, [r2, #0]

	while (TimingDelay != 0)
 8001942:	bf00      	nop
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <Delay+0x24>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1fb      	bne.n	8001944 <Delay+0x10>
		/* Null */;
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000044 	.word	0x20000044

0800195c <TimingDelay_Decrement>:
 * @brief  Decrements the TimingDelay variable.
 * @param  None
 * @retval None
 */
void TimingDelay_Decrement(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00)
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <TimingDelay_Decrement+0x20>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <TimingDelay_Decrement+0x16>
	{
		TimingDelay--;
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <TimingDelay_Decrement+0x20>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	4a03      	ldr	r2, [pc, #12]	; (800197c <TimingDelay_Decrement+0x20>)
 8001970:	6013      	str	r3, [r2, #0]
	}
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000044 	.word	0x20000044

08001980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001984:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001996:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
	ldr	r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800199e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80019a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f000 f9af 	bl	8001d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f000 fb33 	bl	8002018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b2:	f7ff fdcb 	bl	800154c <main>
	bx	lr
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80019bc:	08002218 	.word	0x08002218
	ldr	r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019c4:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 80019c8:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 80019cc:	20000068 	.word	0x20000068

080019d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_2_IRQHandler>

080019d2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <MemManage_Handler+0x4>

080019ea <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <BusFault_Handler+0x4>

080019f0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <UsageFault_Handler+0x4>

080019f6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8001a1e:	f7ff ff9d 	bl	800195c <TimingDelay_Decrement>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET)
 8001a2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a30:	f7fe fc00 	bl	8000234 <EXTI_GetITStatus>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d013      	beq.n	8001a62 <EXTI15_10_IRQHandler+0x3a>
  {		
    if(BlinkSpeed == 1)
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <EXTI15_10_IRQHandler+0x40>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d103      	bne.n	8001a4c <EXTI15_10_IRQHandler+0x24>
    {
      BlinkSpeed = 0;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <EXTI15_10_IRQHandler+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	e006      	b.n	8001a5a <EXTI15_10_IRQHandler+0x32>
    }
    else
    {
      BlinkSpeed ++;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <EXTI15_10_IRQHandler+0x40>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <EXTI15_10_IRQHandler+0x40>)
 8001a58:	701a      	strb	r2, [r3, #0]
    }
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8001a5a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a5e:	f7fe fc0d 	bl	800027c <EXTI_ClearITPendingBit>
  }	
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000048 	.word	0x20000048

08001a6c <USART2_IRQHandler>:
  * @brief  This function handles USART2_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) // NOT USART_FLAG_RXNE
 8001a72:	f240 5125 	movw	r1, #1317	; 0x525
 8001a76:	4893      	ldr	r0, [pc, #588]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001a78:	f7ff f921 	bl	8000cbe <USART_GetITStatus>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 811b 	beq.w	8001cba <USART2_IRQHandler+0x24e>
	{
		uint16_t USART_ReceivData = 0xF0;
 8001a84:	23f0      	movs	r3, #240	; 0xf0
 8001a86:	80fb      	strh	r3, [r7, #6]
		USART_ReceivData = USART_ReceiveData(USART2);
 8001a88:	488e      	ldr	r0, [pc, #568]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001a8a:	f7ff f8de 	bl	8000c4a <USART_ReceiveData>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]

		if(nInst == 0)
 8001a92:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <USART2_IRQHandler+0x25c>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d16e      	bne.n	8001b78 <USART2_IRQHandler+0x10c>
		{
//			USART_Send(USART2, "STM32:\n");

			if(USART_ReceivData == 0xE0)		// System stop
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2be0      	cmp	r3, #224	; 0xe0
 8001a9e:	d104      	bne.n	8001aaa <USART2_IRQHandler+0x3e>
			{
				USART_Send(USART2, "[System]Stop.\n");
 8001aa0:	498a      	ldr	r1, [pc, #552]	; (8001ccc <USART2_IRQHandler+0x260>)
 8001aa2:	4888      	ldr	r0, [pc, #544]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001aa4:	f7ff fce0 	bl	8001468 <USART_Send>
			}
		}
		/* NO need to clears the USARTx's interrupt pending bits */
		/* USART_ClearITPendingBit(USART2,USART_IT_RXNE); */
	}
}
 8001aa8:	e107      	b.n	8001cba <USART2_IRQHandler+0x24e>
			else if(USART_ReceivData == 0xE1)	// System reset
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	2be1      	cmp	r3, #225	; 0xe1
 8001aae:	d11d      	bne.n	8001aec <USART2_IRQHandler+0x80>
				RCC_Initialization();
 8001ab0:	f7ff fc9c 	bl	80013ec <RCC_Initialization>
				GPIO_Initialization();
 8001ab4:	f7ff f95d 	bl	8000d72 <GPIO_Initialization>
				USART_Initialization();
 8001ab8:	f7ff fca8 	bl	800140c <USART_Initialization>
				PWM_Initialization();
 8001abc:	f7ff fc64 	bl	8001388 <PWM_Initialization>
				NVIC_Initialization();
 8001ac0:	f7ff fc4a 	bl	8001358 <NVIC_Initialization>
				MotorCtrl(0, 0, 1, 0);	// Motor0: Disable, CCW, Speed:0
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff fe1e 	bl	800170c <MotorCtrl>
				MotorCtrl(1, 0, 0, 0);	// Motor1: Disable,  CW, Speed:0
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fe18 	bl	800170c <MotorCtrl>
				Pin_Clr(5); // #define LD2 (5)
 8001adc:	2005      	movs	r0, #5
 8001ade:	f7ff fab3 	bl	8001048 <Pin_Clr>
				USART_Send(USART2, "[System]Reset.\n");
 8001ae2:	497b      	ldr	r1, [pc, #492]	; (8001cd0 <USART2_IRQHandler+0x264>)
 8001ae4:	4877      	ldr	r0, [pc, #476]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001ae6:	f7ff fcbf 	bl	8001468 <USART_Send>
}
 8001aea:	e0e6      	b.n	8001cba <USART2_IRQHandler+0x24e>
			else if((USART_ReceivData & 0xE0) == 0x20)	// Instruction start
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001af2:	2b20      	cmp	r3, #32
 8001af4:	d137      	bne.n	8001b66 <USART2_IRQHandler+0xfa>
				while(selMotor != ((USART_ReceivData & 0x18) >> 3))
 8001af6:	e007      	b.n	8001b08 <USART2_IRQHandler+0x9c>
					selMotor = ((USART_ReceivData & 0x18) >> 3);
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	10db      	asrs	r3, r3, #3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001b06:	701a      	strb	r2, [r3, #0]
				while(selMotor != ((USART_ReceivData & 0x18) >> 3))
 8001b08:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	10db      	asrs	r3, r3, #3
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d1ee      	bne.n	8001af8 <USART2_IRQHandler+0x8c>
				while(nInst != (USART_ReceivData & 0x07))
 8001b1a:	e005      	b.n	8001b28 <USART2_IRQHandler+0xbc>
					nInst = (USART_ReceivData & 0x07);
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <USART2_IRQHandler+0x25c>)
 8001b26:	801a      	strh	r2, [r3, #0]
				while(nInst != (USART_ReceivData & 0x07))
 8001b28:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <USART2_IRQHandler+0x25c>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1f1      	bne.n	8001b1c <USART2_IRQHandler+0xb0>
				if(selMotor == 0x00)
 8001b38:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <USART2_IRQHandler+0xde>
					USART_Send(USART2, "[Control]Motor-0\n");
 8001b40:	4965      	ldr	r1, [pc, #404]	; (8001cd8 <USART2_IRQHandler+0x26c>)
 8001b42:	4860      	ldr	r0, [pc, #384]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001b44:	f7ff fc90 	bl	8001468 <USART_Send>
}
 8001b48:	e0b7      	b.n	8001cba <USART2_IRQHandler+0x24e>
				else if(selMotor == 0x01)
 8001b4a:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d104      	bne.n	8001b5c <USART2_IRQHandler+0xf0>
					USART_Send(USART2, "[Control]Motor-1\n");
 8001b52:	4962      	ldr	r1, [pc, #392]	; (8001cdc <USART2_IRQHandler+0x270>)
 8001b54:	485b      	ldr	r0, [pc, #364]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001b56:	f7ff fc87 	bl	8001468 <USART_Send>
}
 8001b5a:	e0ae      	b.n	8001cba <USART2_IRQHandler+0x24e>
					USART_Send(USART2, "[Error]No motors selected.\n");
 8001b5c:	4960      	ldr	r1, [pc, #384]	; (8001ce0 <USART2_IRQHandler+0x274>)
 8001b5e:	4859      	ldr	r0, [pc, #356]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001b60:	f7ff fc82 	bl	8001468 <USART_Send>
}
 8001b64:	e0a9      	b.n	8001cba <USART2_IRQHandler+0x24e>
			else if(USART_ReceivData == 0xF0)
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	2bf0      	cmp	r3, #240	; 0xf0
 8001b6a:	f000 80a6 	beq.w	8001cba <USART2_IRQHandler+0x24e>
				USART_Send(USART2, "[Error]Unknown instruction.\n");
 8001b6e:	495d      	ldr	r1, [pc, #372]	; (8001ce4 <USART2_IRQHandler+0x278>)
 8001b70:	4854      	ldr	r0, [pc, #336]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001b72:	f7ff fc79 	bl	8001468 <USART_Send>
}
 8001b76:	e0a0      	b.n	8001cba <USART2_IRQHandler+0x24e>
			nInst--;
 8001b78:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <USART2_IRQHandler+0x25c>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <USART2_IRQHandler+0x25c>)
 8001b82:	801a      	strh	r2, [r3, #0]
			if(((USART_ReceivData & 0x80) >> 7) == 0x01) 		// 1xxx xxxx(b)
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01e      	beq.n	8001bcc <USART2_IRQHandler+0x160>
				MotorCtrl(selMotor, 3, 3, (USART_ReceivData & 0x7F));
 8001b8e:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001b90:	7818      	ldrb	r0, [r3, #0]
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	f7ff fdb5 	bl	800170c <MotorCtrl>
				USART_Send(USART2, " Set speed:");
 8001ba2:	4951      	ldr	r1, [pc, #324]	; (8001ce8 <USART2_IRQHandler+0x27c>)
 8001ba4:	4847      	ldr	r0, [pc, #284]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001ba6:	f7ff fc5f 	bl	8001468 <USART_Send>
				USART_Send(USART2, Number_TO_String(USART_ReceivData & 0x7F));
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fe6e 	bl	8001894 <Number_TO_String>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4841      	ldr	r0, [pc, #260]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001bbe:	f7ff fc53 	bl	8001468 <USART_Send>
				USART_Send(USART2, "%\n");
 8001bc2:	494a      	ldr	r1, [pc, #296]	; (8001cec <USART2_IRQHandler+0x280>)
 8001bc4:	483f      	ldr	r0, [pc, #252]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001bc6:	f7ff fc4f 	bl	8001468 <USART_Send>
 8001bca:	e066      	b.n	8001c9a <USART2_IRQHandler+0x22e>
				if(((USART_ReceivData & 0x0C) >> 2) == 0x00)	 // xxxx 00xx(b)
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	109b      	asrs	r3, r3, #2
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10b      	bne.n	8001bf0 <USART2_IRQHandler+0x184>
					MotorCtrl(selMotor, 0, 3, 127);
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001bda:	7818      	ldrb	r0, [r3, #0]
 8001bdc:	237f      	movs	r3, #127	; 0x7f
 8001bde:	2203      	movs	r2, #3
 8001be0:	2100      	movs	r1, #0
 8001be2:	f7ff fd93 	bl	800170c <MotorCtrl>
					USART_Send(USART2, " Disable.\n");
 8001be6:	4942      	ldr	r1, [pc, #264]	; (8001cf0 <USART2_IRQHandler+0x284>)
 8001be8:	4836      	ldr	r0, [pc, #216]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001bea:	f7ff fc3d 	bl	8001468 <USART_Send>
 8001bee:	e022      	b.n	8001c36 <USART2_IRQHandler+0x1ca>
				else if(((USART_ReceivData & 0x0C) >> 2) == 0x01)// xxxx 01xx(b)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	109b      	asrs	r3, r3, #2
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d10b      	bne.n	8001c14 <USART2_IRQHandler+0x1a8>
					MotorCtrl(selMotor, 1, 3, 127);
 8001bfc:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001bfe:	7818      	ldrb	r0, [r3, #0]
 8001c00:	237f      	movs	r3, #127	; 0x7f
 8001c02:	2203      	movs	r2, #3
 8001c04:	2101      	movs	r1, #1
 8001c06:	f7ff fd81 	bl	800170c <MotorCtrl>
					USART_Send(USART2, " Enable.\n");
 8001c0a:	493a      	ldr	r1, [pc, #232]	; (8001cf4 <USART2_IRQHandler+0x288>)
 8001c0c:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001c0e:	f7ff fc2b 	bl	8001468 <USART_Send>
 8001c12:	e010      	b.n	8001c36 <USART2_IRQHandler+0x1ca>
				else if(((USART_ReceivData & 0x0C) >> 2) == 0x02)// xxxx 10xx(b)
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	109b      	asrs	r3, r3, #2
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d10a      	bne.n	8001c36 <USART2_IRQHandler+0x1ca>
					MotorCtrl(selMotor, 2, 3, 127);
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001c22:	7818      	ldrb	r0, [r3, #0]
 8001c24:	237f      	movs	r3, #127	; 0x7f
 8001c26:	2203      	movs	r2, #3
 8001c28:	2102      	movs	r1, #2
 8001c2a:	f7ff fd6f 	bl	800170c <MotorCtrl>
					USART_Send(USART2, " Toggle.\n");
 8001c2e:	4932      	ldr	r1, [pc, #200]	; (8001cf8 <USART2_IRQHandler+0x28c>)
 8001c30:	4824      	ldr	r0, [pc, #144]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001c32:	f7ff fc19 	bl	8001468 <USART_Send>
				if(((USART_ReceivData & 0x03)) == 0x00)		// xxxx xx00(b)
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10b      	bne.n	8001c58 <USART2_IRQHandler+0x1ec>
					MotorCtrl(selMotor, 3, 0, 127);
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001c42:	7818      	ldrb	r0, [r3, #0]
 8001c44:	237f      	movs	r3, #127	; 0x7f
 8001c46:	2200      	movs	r2, #0
 8001c48:	2103      	movs	r1, #3
 8001c4a:	f7ff fd5f 	bl	800170c <MotorCtrl>
					USART_Send(USART2, " Direction:CW.\n");
 8001c4e:	492b      	ldr	r1, [pc, #172]	; (8001cfc <USART2_IRQHandler+0x290>)
 8001c50:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001c52:	f7ff fc09 	bl	8001468 <USART_Send>
 8001c56:	e020      	b.n	8001c9a <USART2_IRQHandler+0x22e>
				else if(((USART_ReceivData & 0x03)) == 0x01)// xxxx xx01(b)
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10b      	bne.n	8001c7a <USART2_IRQHandler+0x20e>
					MotorCtrl(selMotor, 3, 1, 127);
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001c64:	7818      	ldrb	r0, [r3, #0]
 8001c66:	237f      	movs	r3, #127	; 0x7f
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	f7ff fd4e 	bl	800170c <MotorCtrl>
					USART_Send(USART2, " Direction:CCW.\n");
 8001c70:	4923      	ldr	r1, [pc, #140]	; (8001d00 <USART2_IRQHandler+0x294>)
 8001c72:	4814      	ldr	r0, [pc, #80]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001c74:	f7ff fbf8 	bl	8001468 <USART_Send>
 8001c78:	e00f      	b.n	8001c9a <USART2_IRQHandler+0x22e>
				else if(((USART_ReceivData & 0x03)) == 0x02)// xxxx xx10(b)
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d10a      	bne.n	8001c9a <USART2_IRQHandler+0x22e>
					MotorCtrl(selMotor, 3, 2, 127);
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001c86:	7818      	ldrb	r0, [r3, #0]
 8001c88:	237f      	movs	r3, #127	; 0x7f
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	f7ff fd3d 	bl	800170c <MotorCtrl>
					USART_Send(USART2, " Direction:Toggle.\n");
 8001c92:	491c      	ldr	r1, [pc, #112]	; (8001d04 <USART2_IRQHandler+0x298>)
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001c96:	f7ff fbe7 	bl	8001468 <USART_Send>
			if(nInst == 0)
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <USART2_IRQHandler+0x25c>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10b      	bne.n	8001cba <USART2_IRQHandler+0x24e>
				while(selMotor != 0xFF) selMotor = 0xFF;
 8001ca2:	e002      	b.n	8001caa <USART2_IRQHandler+0x23e>
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001ca6:	22ff      	movs	r2, #255	; 0xff
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <USART2_IRQHandler+0x268>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2bff      	cmp	r3, #255	; 0xff
 8001cb0:	d1f8      	bne.n	8001ca4 <USART2_IRQHandler+0x238>
				USART_Send(USART2, "[Control]Done.\n");
 8001cb2:	4915      	ldr	r1, [pc, #84]	; (8001d08 <USART2_IRQHandler+0x29c>)
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <USART2_IRQHandler+0x258>)
 8001cb6:	f7ff fbd7 	bl	8001468 <USART_Send>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	20000050 	.word	0x20000050
 8001ccc:	08002110 	.word	0x08002110
 8001cd0:	08002120 	.word	0x08002120
 8001cd4:	20000024 	.word	0x20000024
 8001cd8:	08002130 	.word	0x08002130
 8001cdc:	08002144 	.word	0x08002144
 8001ce0:	08002158 	.word	0x08002158
 8001ce4:	08002174 	.word	0x08002174
 8001ce8:	08002194 	.word	0x08002194
 8001cec:	080021a0 	.word	0x080021a0
 8001cf0:	080021a4 	.word	0x080021a4
 8001cf4:	080021b0 	.word	0x080021b0
 8001cf8:	080021bc 	.word	0x080021bc
 8001cfc:	080021c8 	.word	0x080021c8
 8001d00:	080021d8 	.word	0x080021d8
 8001d04:	080021ec 	.word	0x080021ec
 8001d08:	08002200 	.word	0x08002200

08001d0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d10:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <SystemInit+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <SystemInit+0x5c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Reset SW,SWS, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001d1c:	4912      	ldr	r1, [pc, #72]	; (8001d68 <SystemInit+0x5c>)
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <SystemInit+0x5c>)
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <SystemInit+0x60>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <SystemInit+0x5c>)
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <SystemInit+0x5c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <SystemInit+0x5c>)
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <SystemInit+0x5c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001d44:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <SystemInit+0x5c>)
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <SystemInit+0x5c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001d4e:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <SystemInit+0x5c>)
 8001d52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d56:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001d58:	f000 f80c 	bl	8001d74 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SystemInit+0x64>)
 8001d5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d62:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	f8ff0000 	.word	0xf8ff0000
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <SetSysClock>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
  
 #ifdef PLL_SOURCE_HSI  
  /* At this stage the HSI is already enabled */
  
  /*  PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL));
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <SetSysClock+0xb0>)
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <SetSysClock+0xb0>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001d8c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLMULL16);
 8001d8e:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <SetSysClock+0xb0>)
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <SetSysClock+0xb0>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001d98:	6053      	str	r3, [r2, #4]
  }
  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001d9a:	4a23      	ldr	r2, [pc, #140]	; (8001e28 <SetSysClock+0xb4>)
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <SetSysClock+0xb4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f043 0310 	orr.w	r3, r3, #16
 8001da4:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001da6:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <SetSysClock+0xb4>)
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <SetSysClock+0xb4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 0303 	bic.w	r3, r3, #3
 8001db0:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <SetSysClock+0xb4>)
 8001db4:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <SetSysClock+0xb4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001dbe:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <SetSysClock+0xb0>)
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <SetSysClock+0xb0>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001dc6:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <SetSysClock+0xb0>)
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <SetSysClock+0xb0>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001dce:	4a15      	ldr	r2, [pc, #84]	; (8001e24 <SetSysClock+0xb0>)
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <SetSysClock+0xb0>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd8:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <SetSysClock+0xb0>)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <SetSysClock+0xb0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de4:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001de6:	bf00      	nop
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <SetSysClock+0xb0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f9      	beq.n	8001de8 <SetSysClock+0x74>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <SetSysClock+0xb0>)
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <SetSysClock+0xb0>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001e00:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <SetSysClock+0xb0>)
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <SetSysClock+0xb0>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001e0c:	bf00      	nop
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SetSysClock+0xb0>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d1f9      	bne.n	8001e0e <SetSysClock+0x9a>
    {
    }
  }
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40022000 	.word	0x40022000

08001e2c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001e3c:	e004      	b.n	8001e48 <ts_itoa+0x1c>
		div *= base;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d2f3      	bcs.n	8001e3e <ts_itoa+0x12>

	while (div != 0)
 8001e56:	e029      	b.n	8001eac <ts_itoa+0x80>
	{
		int num = d/div;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e60:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e6a:	fb02 f201 	mul.w	r2, r2, r1
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b09      	cmp	r3, #9
 8001e80:	dd0a      	ble.n	8001e98 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	1c59      	adds	r1, r3, #1
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	3237      	adds	r2, #55	; 0x37
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e009      	b.n	8001eac <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	1c59      	adds	r1, r3, #1
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	6011      	str	r1, [r2, #0]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	3230      	adds	r2, #48	; 0x30
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1d2      	bne.n	8001e58 <ts_itoa+0x2c>
	}
}
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001ecc:	e07d      	b.n	8001fca <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b25      	cmp	r3, #37	; 0x25
 8001ed4:	d171      	bne.n	8001fba <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b64      	cmp	r3, #100	; 0x64
 8001ee2:	d01e      	beq.n	8001f22 <ts_formatstring+0x66>
 8001ee4:	2b64      	cmp	r3, #100	; 0x64
 8001ee6:	dc06      	bgt.n	8001ef6 <ts_formatstring+0x3a>
 8001ee8:	2b58      	cmp	r3, #88	; 0x58
 8001eea:	d050      	beq.n	8001f8e <ts_formatstring+0xd2>
 8001eec:	2b63      	cmp	r3, #99	; 0x63
 8001eee:	d00e      	beq.n	8001f0e <ts_formatstring+0x52>
 8001ef0:	2b25      	cmp	r3, #37	; 0x25
 8001ef2:	d058      	beq.n	8001fa6 <ts_formatstring+0xea>
 8001ef4:	e05d      	b.n	8001fb2 <ts_formatstring+0xf6>
 8001ef6:	2b73      	cmp	r3, #115	; 0x73
 8001ef8:	d02b      	beq.n	8001f52 <ts_formatstring+0x96>
 8001efa:	2b73      	cmp	r3, #115	; 0x73
 8001efc:	dc02      	bgt.n	8001f04 <ts_formatstring+0x48>
 8001efe:	2b69      	cmp	r3, #105	; 0x69
 8001f00:	d00f      	beq.n	8001f22 <ts_formatstring+0x66>
 8001f02:	e056      	b.n	8001fb2 <ts_formatstring+0xf6>
 8001f04:	2b75      	cmp	r3, #117	; 0x75
 8001f06:	d037      	beq.n	8001f78 <ts_formatstring+0xbc>
 8001f08:	2b78      	cmp	r3, #120	; 0x78
 8001f0a:	d040      	beq.n	8001f8e <ts_formatstring+0xd2>
 8001f0c:	e051      	b.n	8001fb2 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	60fa      	str	r2, [r7, #12]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	1d11      	adds	r1, r2, #4
 8001f18:	6079      	str	r1, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]
				break;
 8001f20:	e047      	b.n	8001fb2 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	1d1a      	adds	r2, r3, #4
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da07      	bge.n	8001f42 <ts_formatstring+0x86>
					{
						val *= -1;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	425b      	negs	r3, r3
 8001f36:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	60fa      	str	r2, [r7, #12]
 8001f3e:	222d      	movs	r2, #45	; 0x2d
 8001f40:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001f42:	69f9      	ldr	r1, [r7, #28]
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	220a      	movs	r2, #10
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff6e 	bl	8001e2c <ts_itoa>
				}
				break;
 8001f50:	e02f      	b.n	8001fb2 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1d1a      	adds	r2, r3, #4
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001f5c:	e007      	b.n	8001f6e <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	60fa      	str	r2, [r7, #12]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	1c51      	adds	r1, r2, #1
 8001f68:	61b9      	str	r1, [r7, #24]
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f3      	bne.n	8001f5e <ts_formatstring+0xa2>
					}
				}
				break;
 8001f76:	e01c      	b.n	8001fb2 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	1d1a      	adds	r2, r3, #4
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	220a      	movs	r2, #10
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff50 	bl	8001e2c <ts_itoa>
				break;
 8001f8c:	e011      	b.n	8001fb2 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	1d1a      	adds	r2, r3, #4
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	2210      	movs	r2, #16
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff44 	bl	8001e2c <ts_itoa>
				break;
 8001fa4:	e005      	b.n	8001fb2 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	60fa      	str	r2, [r7, #12]
 8001fac:	2225      	movs	r2, #37	; 0x25
 8001fae:	701a      	strb	r2, [r3, #0]
				  break;
 8001fb0:	bf00      	nop
			}
			fmt++;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	e007      	b.n	8001fca <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	60fa      	str	r2, [r7, #12]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	1c51      	adds	r1, r2, #1
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f47f af7d 	bne.w	8001ece <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	1ad3      	subs	r3, r2, r3
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8001fea:	b40e      	push	{r1, r2, r3}
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8001ff4:	f107 0320 	add.w	r3, r7, #32
 8001ff8:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	69f9      	ldr	r1, [r7, #28]
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff5c 	bl	8001ebc <ts_formatstring>
 8002004:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8002006:	68fb      	ldr	r3, [r7, #12]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002012:	b003      	add	sp, #12
 8002014:	4770      	bx	lr
	...

08002018 <__libc_init_array>:
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	2500      	movs	r5, #0
 800201c:	4e0c      	ldr	r6, [pc, #48]	; (8002050 <__libc_init_array+0x38>)
 800201e:	4c0d      	ldr	r4, [pc, #52]	; (8002054 <__libc_init_array+0x3c>)
 8002020:	1ba4      	subs	r4, r4, r6
 8002022:	10a4      	asrs	r4, r4, #2
 8002024:	42a5      	cmp	r5, r4
 8002026:	d109      	bne.n	800203c <__libc_init_array+0x24>
 8002028:	f000 f81a 	bl	8002060 <_init>
 800202c:	2500      	movs	r5, #0
 800202e:	4e0a      	ldr	r6, [pc, #40]	; (8002058 <__libc_init_array+0x40>)
 8002030:	4c0a      	ldr	r4, [pc, #40]	; (800205c <__libc_init_array+0x44>)
 8002032:	1ba4      	subs	r4, r4, r6
 8002034:	10a4      	asrs	r4, r4, #2
 8002036:	42a5      	cmp	r5, r4
 8002038:	d105      	bne.n	8002046 <__libc_init_array+0x2e>
 800203a:	bd70      	pop	{r4, r5, r6, pc}
 800203c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002040:	4798      	blx	r3
 8002042:	3501      	adds	r5, #1
 8002044:	e7ee      	b.n	8002024 <__libc_init_array+0xc>
 8002046:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800204a:	4798      	blx	r3
 800204c:	3501      	adds	r5, #1
 800204e:	e7f2      	b.n	8002036 <__libc_init_array+0x1e>
 8002050:	08002210 	.word	0x08002210
 8002054:	08002210 	.word	0x08002210
 8002058:	08002210 	.word	0x08002210
 800205c:	08002214 	.word	0x08002214

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
