
PoweredExoskeleton-01_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000108c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001264  08001264  00011264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08001268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000024  0800128c  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000005c  0800128c  0002005c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00003c80  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000112d  00000000  00000000  00023ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000528  00000000  00000000  00024e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000490  00000000  00000000  00025328  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000019ce  00000000  00000000  000257b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000018ea  00000000  00000000  00027186  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00028a70  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001354  00000000  00000000  00028aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00029e40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08001180 	.word	0x08001180

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08001180 	.word	0x08001180

0800014c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <NVIC_PriorityGroupConfig+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800015c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000160:	60d3      	str	r3, [r2, #12]
}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	e000ed00 	.word	0xe000ed00

08000170 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000178:	2300      	movs	r3, #0
 800017a:	617b      	str	r3, [r7, #20]
 800017c:	2300      	movs	r3, #0
 800017e:	613b      	str	r3, [r7, #16]
 8000180:	230f      	movs	r3, #15
 8000182:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	78db      	ldrb	r3, [r3, #3]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d03a      	beq.n	8000202 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800018c:	4b27      	ldr	r3, [pc, #156]	; (800022c <NVIC_Init+0xbc>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	43db      	mvns	r3, r3
 8000192:	0a1b      	lsrs	r3, r3, #8
 8000194:	f003 0307 	and.w	r3, r3, #7
 8000198:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	f1c3 0304 	rsb	r3, r3, #4
 80001a0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80001a2:	68fa      	ldr	r2, [r7, #12]
 80001a4:	697b      	ldr	r3, [r7, #20]
 80001a6:	fa22 f303 	lsr.w	r3, r2, r3
 80001aa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	461a      	mov	r2, r3
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	fa02 f303 	lsl.w	r3, r2, r3
 80001b8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	789b      	ldrb	r3, [r3, #2]
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4013      	ands	r3, r2
 80001c4:	697a      	ldr	r2, [r7, #20]
 80001c6:	4313      	orrs	r3, r2
 80001c8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <NVIC_Init+0xc0>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	6979      	ldr	r1, [r7, #20]
 80001d8:	b2c9      	uxtb	r1, r1
 80001da:	4413      	add	r3, r2
 80001dc:	460a      	mov	r2, r1
 80001de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e2:	4a13      	ldr	r2, [pc, #76]	; (8000230 <NVIC_Init+0xc0>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	095b      	lsrs	r3, r3, #5
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	f003 031f 	and.w	r3, r3, #31
 80001f6:	2101      	movs	r1, #1
 80001f8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000200:	e00f      	b.n	8000222 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000202:	490b      	ldr	r1, [pc, #44]	; (8000230 <NVIC_Init+0xc0>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	095b      	lsrs	r3, r3, #5
 800020a:	b2db      	uxtb	r3, r3
 800020c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	f003 031f 	and.w	r3, r3, #31
 8000216:	2201      	movs	r2, #1
 8000218:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800021a:	f100 0320 	add.w	r3, r0, #32
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000222:	bf00      	nop
 8000224:	371c      	adds	r7, #28
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	e000ed00 	.word	0xe000ed00
 8000230:	e000e100 	.word	0xe000e100

08000234 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4013      	ands	r3, r2
 800024c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4013      	ands	r3, r2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d005      	beq.n	8000266 <EXTI_GetITStatus+0x32>
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000260:	2301      	movs	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
 8000264:	e001      	b.n	800026a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000266:	2300      	movs	r3, #0
 8000268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010400 	.word	0x40010400

0800027c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000284:	4a03      	ldr	r2, [pc, #12]	; (8000294 <EXTI_ClearITPendingBit+0x18>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6153      	str	r3, [r2, #20]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40010400 	.word	0x40010400

08000298 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	; 0x24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	78db      	ldrb	r3, [r3, #3]
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d005      	beq.n	80002dc <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	461a      	mov	r2, r3
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	4313      	orrs	r3, r2
 80002da:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d044      	beq.n	8000370 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
 80002f0:	e038      	b.n	8000364 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80002f2:	2201      	movs	r2, #1
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4013      	ands	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000308:	693a      	ldr	r2, [r7, #16]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	429a      	cmp	r2, r3
 800030e:	d126      	bne.n	800035e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000316:	220f      	movs	r2, #15
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	43db      	mvns	r3, r3
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	4013      	ands	r3, r2
 8000328:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800032a:	69fa      	ldr	r2, [r7, #28]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	fa02 f303 	lsl.w	r3, r2, r3
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	4313      	orrs	r3, r2
 8000336:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	2b28      	cmp	r3, #40	; 0x28
 800033e:	d105      	bne.n	800034c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000340:	2201      	movs	r2, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	409a      	lsls	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	615a      	str	r2, [r3, #20]
 800034a:	e008      	b.n	800035e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	2b48      	cmp	r3, #72	; 0x48
 8000352:	d104      	bne.n	800035e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000354:	2201      	movs	r2, #1
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	409a      	lsls	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800035e:	69bb      	ldr	r3, [r7, #24]
 8000360:	3301      	adds	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
 8000364:	69bb      	ldr	r3, [r7, #24]
 8000366:	2b07      	cmp	r3, #7
 8000368:	d9c3      	bls.n	80002f2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2bff      	cmp	r3, #255	; 0xff
 8000376:	d946      	bls.n	8000406 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
 8000382:	e03a      	b.n	80003fa <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	3308      	adds	r3, #8
 8000388:	2201      	movs	r2, #1
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4013      	ands	r3, r2
 800039a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800039c:	693a      	ldr	r2, [r7, #16]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d127      	bne.n	80003f4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003aa:	220f      	movs	r2, #15
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	43db      	mvns	r3, r3
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	4013      	ands	r3, r2
 80003bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003be:	69fa      	ldr	r2, [r7, #28]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	2b28      	cmp	r3, #40	; 0x28
 80003d2:	d105      	bne.n	80003e0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	3308      	adds	r3, #8
 80003d8:	2201      	movs	r2, #1
 80003da:	409a      	lsls	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	78db      	ldrb	r3, [r3, #3]
 80003e4:	2b48      	cmp	r3, #72	; 0x48
 80003e6:	d105      	bne.n	80003f4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	3308      	adds	r3, #8
 80003ec:	2201      	movs	r2, #1
 80003ee:	409a      	lsls	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	3301      	adds	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	d9c1      	bls.n	8000384 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	605a      	str	r2, [r3, #4]
  }
}
 8000406:	bf00      	nop
 8000408:	3724      	adds	r7, #36	; 0x24
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800041e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2202      	movs	r2, #2
 8000424:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2204      	movs	r2, #4
 800042a:	70da      	strb	r2, [r3, #3]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000442:	887a      	ldrh	r2, [r7, #2]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	615a      	str	r2, [r3, #20]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <RCC_DeInit+0x54>)
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <RCC_DeInit+0x54>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000464:	4910      	ldr	r1, [pc, #64]	; (80004a8 <RCC_DeInit+0x54>)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <RCC_DeInit+0x54>)
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <RCC_DeInit+0x58>)
 800046c:	4013      	ands	r3, r2
 800046e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <RCC_DeInit+0x54>)
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <RCC_DeInit+0x54>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800047a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800047e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000480:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <RCC_DeInit+0x54>)
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <RCC_DeInit+0x54>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800048a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800048c:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <RCC_DeInit+0x54>)
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <RCC_DeInit+0x54>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000496:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <RCC_DeInit+0x54>)
 800049a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800049e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	f8ff0000 	.word	0xf8ff0000

080004b0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80004c8:	4b4c      	ldr	r3, [pc, #304]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d007      	beq.n	80004e8 <RCC_GetClocksFreq+0x38>
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d009      	beq.n	80004f0 <RCC_GetClocksFreq+0x40>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d133      	bne.n	8000548 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a47      	ldr	r2, [pc, #284]	; (8000600 <RCC_GetClocksFreq+0x150>)
 80004e4:	601a      	str	r2, [r3, #0]
      break;
 80004e6:	e033      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a45      	ldr	r2, [pc, #276]	; (8000600 <RCC_GetClocksFreq+0x150>)
 80004ec:	601a      	str	r2, [r3, #0]
      break;
 80004ee:	e02f      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80004f0:	4b42      	ldr	r3, [pc, #264]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004f8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000502:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	0c9b      	lsrs	r3, r3, #18
 8000508:	3302      	adds	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d106      	bne.n	8000520 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	4a3b      	ldr	r2, [pc, #236]	; (8000604 <RCC_GetClocksFreq+0x154>)
 8000516:	fb02 f203 	mul.w	r2, r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800051e:	e017      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000520:	4b36      	ldr	r3, [pc, #216]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d006      	beq.n	800053a <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	4a35      	ldr	r2, [pc, #212]	; (8000604 <RCC_GetClocksFreq+0x154>)
 8000530:	fb02 f203 	mul.w	r2, r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
      break;
 8000538:	e00a      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4a30      	ldr	r2, [pc, #192]	; (8000600 <RCC_GetClocksFreq+0x150>)
 800053e:	fb02 f203 	mul.w	r2, r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
      break;
 8000546:	e003      	b.n	8000550 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <RCC_GetClocksFreq+0x150>)
 800054c:	601a      	str	r2, [r3, #0]
      break;
 800054e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000558:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <RCC_GetClocksFreq+0x158>)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	40da      	lsrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000580:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000588:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <RCC_GetClocksFreq+0x158>)
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	40da      	lsrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005a8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	0adb      	lsrs	r3, r3, #11
 80005ae:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <RCC_GetClocksFreq+0x158>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	0b9b      	lsrs	r3, r3, #14
 80005d6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <RCC_GetClocksFreq+0x15c>)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	007a1200 	.word	0x007a1200
 8000604:	003d0900 	.word	0x003d0900
 8000608:	20000000 	.word	0x20000000
 800060c:	20000010 	.word	0x20000010

08000610 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000622:	4909      	ldr	r1, [pc, #36]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800062e:	e006      	b.n	800063e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000630:	4905      	ldr	r1, [pc, #20]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	43db      	mvns	r3, r3
 800063a:	4013      	ands	r3, r2
 800063c:	618b      	str	r3, [r1, #24]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800065e:	4909      	ldr	r1, [pc, #36]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000662:	69da      	ldr	r2, [r3, #28]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4313      	orrs	r3, r2
 8000668:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800066a:	e006      	b.n	800067a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800066c:	4905      	ldr	r1, [pc, #20]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000670:	69da      	ldr	r2, [r3, #28]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	43db      	mvns	r3, r3
 8000676:	4013      	ands	r3, r2
 8000678:	61cb      	str	r3, [r1, #28]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08c      	sub	sp, #48	; 0x30
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8a1b      	ldrh	r3, [r3, #16]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80006b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006b4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80006b8:	4013      	ands	r3, r2
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	88db      	ldrh	r3, [r3, #6]
 80006c0:	461a      	mov	r2, r3
 80006c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c4:	4313      	orrs	r3, r2
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	899b      	ldrh	r3, [r3, #12]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80006d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006da:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80006de:	4013      	ands	r3, r2
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	889a      	ldrh	r2, [r3, #4]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	891b      	ldrh	r3, [r3, #8]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fa:	4313      	orrs	r3, r2
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80006fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000700:	b29a      	uxth	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	8a9b      	ldrh	r3, [r3, #20]
 800070a:	b29b      	uxth	r3, r3
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800070e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000710:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000714:	4013      	ands	r3, r2
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	899b      	ldrh	r3, [r3, #12]
 800071c:	461a      	mov	r2, r3
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	4313      	orrs	r3, r2
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000726:	b29a      	uxth	r2, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff febd 	bl	80004b0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <USART_Init+0x16c>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d102      	bne.n	8000744 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
 8000742:	e001      	b.n	8000748 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	899b      	ldrh	r3, [r3, #12]
 800074c:	b29b      	uxth	r3, r3
 800074e:	b21b      	sxth	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	da0c      	bge.n	800076e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000756:	4613      	mov	r3, r2
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	009a      	lsls	r2, r3, #2
 800075e:	441a      	add	r2, r3
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
 800076c:	e00b      	b.n	8000786 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800076e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000770:	4613      	mov	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	009a      	lsls	r2, r3, #2
 8000778:	441a      	add	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	fbb2 f3f3 	udiv	r3, r2, r3
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <USART_Init+0x170>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000796:	091b      	lsrs	r3, r3, #4
 8000798:	2264      	movs	r2, #100	; 0x64
 800079a:	fb02 f303 	mul.w	r3, r2, r3
 800079e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	899b      	ldrh	r3, [r3, #12]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	da0c      	bge.n	80007ca <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	3332      	adds	r3, #50	; 0x32
 80007b6:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <USART_Init+0x170>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	095b      	lsrs	r3, r3, #5
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007c4:	4313      	orrs	r3, r2
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c8:	e00b      	b.n	80007e2 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	3332      	adds	r3, #50	; 0x32
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <USART_Init+0x170>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	f003 030f 	and.w	r3, r3, #15
 80007dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007de:	4313      	orrs	r3, r2
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80007e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	811a      	strh	r2, [r3, #8]
}
 80007ea:	bf00      	nop
 80007ec:	3730      	adds	r7, #48	; 0x30
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40013800 	.word	0x40013800
 80007f8:	51eb851f 	.word	0x51eb851f

080007fc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800080a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	220c      	movs	r2, #12
 8000822:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	819a      	strh	r2, [r3, #12]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	460b      	mov	r3, r1
 800083e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d008      	beq.n	8000858 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	b29b      	uxth	r3, r3
 800084c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000850:	b29a      	uxth	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000856:	e007      	b.n	8000868 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	899b      	ldrh	r3, [r3, #12]
 800085c:	b29b      	uxth	r3, r3
 800085e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000862:	b29a      	uxth	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	819a      	strh	r2, [r3, #12]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000872:	b480      	push	{r7}
 8000874:	b087      	sub	sp, #28
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	807b      	strh	r3, [r7, #2]
 800087e:	4613      	mov	r3, r2
 8000880:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	b2db      	uxtb	r3, r3
 800089e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	f003 031f 	and.w	r3, r3, #31
 80008a6:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80008a8:	2201      	movs	r2, #1
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d103      	bne.n	80008c0 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	330c      	adds	r3, #12
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	e009      	b.n	80008d4 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d103      	bne.n	80008ce <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3310      	adds	r3, #16
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e002      	b.n	80008d4 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3314      	adds	r3, #20
 80008d2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80008d4:	787b      	ldrb	r3, [r7, #1]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d006      	beq.n	80008e8 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	697a      	ldr	r2, [r7, #20]
 80008de:	6811      	ldr	r1, [r2, #0]
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	430a      	orrs	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80008e6:	e006      	b.n	80008f6 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	6811      	ldr	r1, [r2, #0]
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	400a      	ands	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]
}
 80008f6:	bf00      	nop
 80008f8:	371c      	adds	r7, #28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800090c:	887b      	ldrh	r3, [r7, #2]
 800090e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	809a      	strh	r2, [r3, #4]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	889b      	ldrh	r3, [r3, #4]
 800092e:	b29b      	uxth	r3, r3
 8000930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000934:	b29b      	uxth	r3, r3
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b29a      	uxth	r2, r3
 8000956:	887b      	ldrh	r3, [r7, #2]
 8000958:	4013      	ands	r3, r2
 800095a:	b29b      	uxth	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e001      	b.n	800096a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000966:	2300      	movs	r3, #0
 8000968:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	43db      	mvns	r3, r3
 8000986:	b29a      	uxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	801a      	strh	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000996:	b480      	push	{r7}
 8000998:	b087      	sub	sp, #28
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80009ae:	2300      	movs	r3, #0
 80009b0:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	095b      	lsrs	r3, r3, #5
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80009bc:	887b      	ldrh	r3, [r7, #2]
 80009be:	f003 031f 	and.w	r3, r3, #31
 80009c2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80009c4:	2201      	movs	r2, #1
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d107      	bne.n	80009e4 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	899b      	ldrh	r3, [r3, #12]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	4013      	ands	r3, r2
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e011      	b.n	8000a08 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d107      	bne.n	80009fa <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	8a1b      	ldrh	r3, [r3, #16]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	4013      	ands	r3, r2
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e006      	b.n	8000a08 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	8a9b      	ldrh	r3, [r3, #20]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	4013      	ands	r3, r2
 8000a06:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000a10:	2201      	movs	r2, #1
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d005      	beq.n	8000a3a <USART_GetITStatus+0xa4>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d002      	beq.n	8000a3a <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000a34:	2301      	movs	r3, #1
 8000a36:	74fb      	strb	r3, [r7, #19]
 8000a38:	e001      	b.n	8000a3e <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	371c      	adds	r7, #28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
	...

08000a4c <GPIO_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void GPIO_Initialization(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_StructInit(&GPIO_InitStructure);	// Fills each GPIO_InitStruct member with its default value
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fcdb 	bl	8000410 <GPIO_StructInit>

	/* Configure the GPIO pin */
	/* user */
	// PA5: LED-user
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000a5a:	2320      	movs	r3, #32
 8000a5c:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000a62:	2302      	movs	r3, #2
 8000a64:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4842      	ldr	r0, [pc, #264]	; (8000b74 <GPIO_Initialization+0x128>)
 8000a6c:	f7ff fc14 	bl	8000298 <GPIO_Init>

	// PC13: Button-user
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000a76:	2304      	movs	r3, #4
 8000a78:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	483d      	ldr	r0, [pc, #244]	; (8000b78 <GPIO_Initialization+0x12c>)
 8000a84:	f7ff fc08 	bl	8000298 <GPIO_Init>


	/* USART */
	// PA2: USART2_TX
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000a8c:	2318      	movs	r3, #24
 8000a8e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a90:	2303      	movs	r3, #3
 8000a92:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4836      	ldr	r0, [pc, #216]	; (8000b74 <GPIO_Initialization+0x128>)
 8000a9a:	f7ff fbfd 	bl	8000298 <GPIO_Init>

	// PA3: USART2_RX
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4831      	ldr	r0, [pc, #196]	; (8000b74 <GPIO_Initialization+0x128>)
 8000ab0:	f7ff fbf2 	bl	8000298 <GPIO_Init>


	/* Motor0 */
	// PB5: Motor0_Enbale
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000abc:	2302      	movs	r3, #2
 8000abe:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	482d      	ldr	r0, [pc, #180]	; (8000b7c <GPIO_Initialization+0x130>)
 8000ac6:	f7ff fbe7 	bl	8000298 <GPIO_Init>

	// PB4: Motor0-Direction
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8000aca:	2310      	movs	r3, #16
 8000acc:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4828      	ldr	r0, [pc, #160]	; (8000b7c <GPIO_Initialization+0x130>)
 8000adc:	f7ff fbdc 	bl	8000298 <GPIO_Init>

	// PB10: Motor0-Speed(PWM, TIM2_CH3)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000ae6:	2318      	movs	r3, #24
 8000ae8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000aea:	2303      	movs	r3, #3
 8000aec:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4822      	ldr	r0, [pc, #136]	; (8000b7c <GPIO_Initialization+0x130>)
 8000af4:	f7ff fbd0 	bl	8000298 <GPIO_Init>

	// PB3: Motor0-Ready
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000af8:	2308      	movs	r3, #8
 8000afa:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000afc:	2304      	movs	r3, #4
 8000afe:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b00:	2302      	movs	r3, #2
 8000b02:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	481c      	ldr	r0, [pc, #112]	; (8000b7c <GPIO_Initialization+0x130>)
 8000b0a:	f7ff fbc5 	bl	8000298 <GPIO_Init>

	/* Motor1 */
	// PA8: Motor1_Enbale
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b12:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b14:	2310      	movs	r3, #16
 8000b16:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4814      	ldr	r0, [pc, #80]	; (8000b74 <GPIO_Initialization+0x128>)
 8000b22:	f7ff fbb9 	bl	8000298 <GPIO_Init>

	// PA9: Motor1-Direction
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b30:	2302      	movs	r3, #2
 8000b32:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	480e      	ldr	r0, [pc, #56]	; (8000b74 <GPIO_Initialization+0x128>)
 8000b3a:	f7ff fbad 	bl	8000298 <GPIO_Init>

	// PC7: Motor1-Speed(PWM, TIM3_CH2)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000b42:	2318      	movs	r3, #24
 8000b44:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b46:	2303      	movs	r3, #3
 8000b48:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <GPIO_Initialization+0x12c>)
 8000b50:	f7ff fba2 	bl	8000298 <GPIO_Init>

	// PB6: Motor1-Ready
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000b54:	2340      	movs	r3, #64	; 0x40
 8000b56:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <GPIO_Initialization+0x130>)
 8000b66:	f7ff fb97 	bl	8000298 <GPIO_Init>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <NVIC_Initialization>:
  * @brief  Initialize NVIC.
  * @param  None
  * @retval None
  */
void NVIC_Initialization(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;	// Structure Declarations

	/* Configures the priority grouping */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8000b86:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000b8a:	f7ff fadf 	bl	800014c <NVIC_PriorityGroupConfig>

	/* Configure the NVIC */
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000b8e:	2326      	movs	r3, #38	; 0x26
 8000b90:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fae5 	bl	8000170 <NVIC_Init>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <RCC_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run this function before any other initialization.
  */
void RCC_Initialization(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	/* Resets the RCC clock configuration to the default reset state */
	RCC_DeInit();
 8000bb4:	f7ff fc4e 	bl	8000454 <RCC_DeInit>

	/* RCC APB1 */
	RCC_APB1PeriphClockCmd(	RCC_APB1Periph_USART2	|
 8000bb8:	2101      	movs	r1, #1
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <RCC_Initialization+0x1c>)
 8000bbc:	f7ff fd46 	bl	800064c <RCC_APB1PeriphClockCmd>
							RCC_APB1Periph_TIM2		|	// PWM:Motor0-Speed
							RCC_APB1Periph_TIM3		,	// PWM:Motor1-Speed
							ENABLE);

	/* RCC APB2 */
	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA |
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	207c      	movs	r0, #124	; 0x7c
 8000bc4:	f7ff fd24 	bl	8000610 <RCC_APB2PeriphClockCmd>
							RCC_APB2Periph_GPIOB |
							RCC_APB2Periph_GPIOC |
							RCC_APB2Periph_GPIOD |
							RCC_APB2Periph_GPIOE ,
							ENABLE);
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	00020003 	.word	0x00020003

08000bd0 <USART_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void USART_Initialization(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	USART_InitTypeDef USART_InitStructure;

//	USART_DeInit(USART2);
	USART_StructInit(&USART_InitStructure);	// Fills each USART_InitStruct member with its default value
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fe0f 	bl	80007fc <USART_StructInit>
	 * - One Stop Bit
	 * - No parity
	 * - Hardware flow control disabled (RTS and CTS signals)
	 * - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = 9600;
 8000bde:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000be2:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000be4:	2300      	movs	r3, #0
 8000be6:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000bec:	2300      	movs	r3, #0
 8000bee:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000bf4:	230c      	movs	r3, #12
 8000bf6:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_InitStructure);
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <USART_Initialization+0x58>)
 8000bfe:	f7ff fd43 	bl	8000688 <USART_Init>

	/* Enable "Receive data register not empty" interrupt */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f240 5125 	movw	r1, #1317	; 0x525
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <USART_Initialization+0x58>)
 8000c0a:	f7ff fe32 	bl	8000872 <USART_ITConfig>

	/* Enable USART */
	USART_Cmd(USART2, ENABLE);
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <USART_Initialization+0x58>)
 8000c12:	f7ff fe0f 	bl	8000834 <USART_Cmd>

	/* Clear "Transmission Complete" flag, 否則第1位數據會丟失 */
	USART_ClearFlag(USART2, USART_FLAG_TC);
 8000c16:	2140      	movs	r1, #64	; 0x40
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <USART_Initialization+0x58>)
 8000c1a:	f7ff feac 	bl	8000976 <USART_ClearFlag>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004400 	.word	0x40004400

08000c2c <USART_Send>:
  *   				USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_Send(USART_TypeDef* USARTx, uint8_t* Data)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	for (int i = 0; Data[i] != '\0'; i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e013      	b.n	8000c64 <USART_Send+0x38>
	{
		/* Transmits single data through the USARTx peripheral */
		USART_SendData(USARTx, (uint16_t)Data[i]);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	4413      	add	r3, r2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fe59 	bl	8000900 <USART_SendData>

		/* Wait until transmission complete, use TC or TXE flag */
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET)
 8000c4e:	bf00      	nop
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fe74 	bl	8000940 <USART_GetFlagStatus>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f8      	beq.n	8000c50 <USART_Send+0x24>
	for (int i = 0; Data[i] != '\0'; i++)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1e5      	bne.n	8000c3c <USART_Send+0x10>
		{/* Null */}
	}
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	da0b      	bge.n	8000ca4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c8c:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <NVIC_SetPriority+0x4c>)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 030f 	and.w	r3, r3, #15
 8000c94:	3b04      	subs	r3, #4
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000ca2:	e009      	b.n	8000cb8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000ca4:	4908      	ldr	r1, [pc, #32]	; (8000cc8 <NVIC_SetPriority+0x50>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cda:	d301      	bcc.n	8000ce0 <SysTick_Config+0x14>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e011      	b.n	8000d04 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <SysTick_Config+0x40>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000cec:	210f      	movs	r1, #15
 8000cee:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf2:	f7ff ffc1 	bl	8000c78 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <SysTick_Config+0x40>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <SysTick_Config+0x40>)
 8000cfe:	2207      	movs	r2, #7
 8000d00:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */  
  
  /* SysTick end of count event each 1ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 8000d16:	481c      	ldr	r0, [pc, #112]	; (8000d88 <main+0x78>)
 8000d18:	f7ff fbca 	bl	80004b0 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <main+0x78>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <main+0x7c>)
 8000d22:	fba2 2303 	umull	r2, r3, r2, r3
 8000d26:	099b      	lsrs	r3, r3, #6
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ffcf 	bl	8000ccc <SysTick_Config>
  
  /* Initiate Blink Speed variable */ 
//  BlinkSpeed = 0;

  /* Initialization */
  RCC_Initialization();
 8000d2e:	f7ff ff3f 	bl	8000bb0 <RCC_Initialization>
  USART_Initialization();
 8000d32:	f7ff ff4d 	bl	8000bd0 <USART_Initialization>
  GPIO_Initialization();
 8000d36:	f7ff fe89 	bl	8000a4c <GPIO_Initialization>
  NVIC_Initialization();
 8000d3a:	f7ff ff21 	bl	8000b80 <NVIC_Initialization>
//  PWM_Initialization();

  GPIO_ResetBits(GPIOA,GPIO_Pin_5);
 8000d3e:	2120      	movs	r1, #32
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <main+0x80>)
 8000d42:	f7ff fb78 	bl	8000436 <GPIO_ResetBits>

  /* Infinite loop */
  while (1)
  {
	for (int i = 0; TxBuf1[i] != '\0'; i++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	e013      	b.n	8000d74 <main+0x64>
	{
		USART_SendData(USART2, (uint16_t)TxBuf1[i]);
 8000d4c:	4a11      	ldr	r2, [pc, #68]	; (8000d94 <main+0x84>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	480f      	ldr	r0, [pc, #60]	; (8000d98 <main+0x88>)
 8000d5a:	f7ff fdd1 	bl	8000900 <USART_SendData>

		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET)
 8000d5e:	bf00      	nop
 8000d60:	2140      	movs	r1, #64	; 0x40
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <main+0x88>)
 8000d64:	f7ff fdec 	bl	8000940 <USART_GetFlagStatus>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f8      	beq.n	8000d60 <main+0x50>
	for (int i = 0; TxBuf1[i] != '\0'; i++)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3301      	adds	r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <main+0x84>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1e5      	bne.n	8000d4c <main+0x3c>
		{}	// Wait until transmission Complete
	}
	Delay(100);
 8000d80:	2064      	movs	r0, #100	; 0x64
 8000d82:	f000 f80b 	bl	8000d9c <Delay>
	for (int i = 0; TxBuf1[i] != '\0'; i++)
 8000d86:	e7de      	b.n	8000d46 <main+0x36>
 8000d88:	20000048 	.word	0x20000048
 8000d8c:	10624dd3 	.word	0x10624dd3
 8000d90:	40010800 	.word	0x40010800
 8000d94:	20000014 	.word	0x20000014
 8000d98:	40004400 	.word	0x40004400

08000d9c <Delay>:
* @brief  Inserts a delay time.
* @param  nTime: specifies the delay time length, in 1 ms.
* @retval None
*/
void Delay(__IO uint32_t nTime)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <Delay+0x24>)
 8000da8:	6013      	str	r3, [r2, #0]

  while(TimingDelay != 0);
 8000daa:	bf00      	nop
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <Delay+0x24>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1fb      	bne.n	8000dac <Delay+0x10>
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000040 	.word	0x20000040

08000dc4 <TimingDelay_Decrement>:
* @brief  Decrements the TimingDelay variable.
* @param  None
* @retval None
*/
void TimingDelay_Decrement(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <TimingDelay_Decrement+0x20>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d004      	beq.n	8000dda <TimingDelay_Decrement+0x16>
  { 
    TimingDelay--;
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <TimingDelay_Decrement+0x20>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <TimingDelay_Decrement+0x20>)
 8000dd8:	6013      	str	r3, [r2, #0]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000040 	.word	0x20000040

08000de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000dec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dee:	e003      	b.n	8000df8 <LoopCopyDataInit>

08000df0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000df2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000df4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000df6:	3104      	adds	r1, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000dfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e00:	d3f6      	bcc.n	8000df0 <CopyDataInit>
	ldr	r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000e04:	e002      	b.n	8000e0c <LoopFillZerobss>

08000e06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e08:	f842 3b04 	str.w	r3, [r2], #4

08000e0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000e0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e10:	d3f9      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e12:	f000 f901 	bl	8001018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f000 f98f 	bl	8001138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1a:	f7ff ff79 	bl	8000d10 <main>
	bx	lr
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e20:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000e24:	08001268 	.word	0x08001268
	ldr	r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e2c:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8000e30:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8000e34:	2000005c 	.word	0x2000005c

08000e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_2_IRQHandler>

08000e3a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8000e86:	f7ff ff9d 	bl	8000dc4 <TimingDelay_Decrement>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET)
 8000e94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e98:	f7ff f9cc 	bl	8000234 <EXTI_GetITStatus>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d013      	beq.n	8000eca <EXTI15_10_IRQHandler+0x3a>
  {		
    if(BlinkSpeed == 1)
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <EXTI15_10_IRQHandler+0x40>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d103      	bne.n	8000eb4 <EXTI15_10_IRQHandler+0x24>
    {
      BlinkSpeed = 0;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <EXTI15_10_IRQHandler+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e006      	b.n	8000ec2 <EXTI15_10_IRQHandler+0x32>
    }
    else
    {
      BlinkSpeed ++;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <EXTI15_10_IRQHandler+0x40>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <EXTI15_10_IRQHandler+0x40>)
 8000ec0:	701a      	strb	r2, [r3, #0]
    }
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8000ec2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec6:	f7ff f9d9 	bl	800027c <EXTI_ClearITPendingBit>
  }	
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000044 	.word	0x20000044

08000ed4 <USART2_IRQHandler>:
  * @brief  This function handles USART2_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) // 注意不是USART_FLAG_RXNE
 8000eda:	f240 5125 	movw	r1, #1317	; 0x525
 8000ede:	4842      	ldr	r0, [pc, #264]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000ee0:	f7ff fd59 	bl	8000996 <USART_GetITStatus>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d079      	beq.n	8000fde <USART2_IRQHandler+0x10a>
	{
		uint8_t selMotor = 0xFF;	// The motor which be selected
 8000eea:	23ff      	movs	r3, #255	; 0xff
 8000eec:	71fb      	strb	r3, [r7, #7]
		uint16_t USART_ReceivData = 0xF0;
 8000eee:	23f0      	movs	r3, #240	; 0xf0
 8000ef0:	80bb      	strh	r3, [r7, #4]

		USART_ReceivData = USART_ReceiveData(USART2);
 8000ef2:	483d      	ldr	r0, [pc, #244]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000ef4:	f7ff fd15 	bl	8000922 <USART_ReceiveData>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	80bb      	strh	r3, [r7, #4]

//		USART_Send(USART2, USART_ReceivData);
		USART_Send(USART2, "STM32:");
 8000efc:	493b      	ldr	r1, [pc, #236]	; (8000fec <USART2_IRQHandler+0x118>)
 8000efe:	483a      	ldr	r0, [pc, #232]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000f00:	f7ff fe94 	bl	8000c2c <USART_Send>

		if(nInst == 0)
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <USART2_IRQHandler+0x11c>)
 8000f06:	881b      	ldrh	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d132      	bne.n	8000f72 <USART2_IRQHandler+0x9e>
			if(USART_ReceivData == 0xE0)				// System stop
 8000f0c:	88bb      	ldrh	r3, [r7, #4]
 8000f0e:	2be0      	cmp	r3, #224	; 0xe0
 8000f10:	d104      	bne.n	8000f1c <USART2_IRQHandler+0x48>
			{
				USART_Send(USART2, "[System]Stop.\n");
 8000f12:	4938      	ldr	r1, [pc, #224]	; (8000ff4 <USART2_IRQHandler+0x120>)
 8000f14:	4834      	ldr	r0, [pc, #208]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000f16:	f7ff fe89 	bl	8000c2c <USART_Send>
			}
		}
		/* NO need to clears the USARTx's interrupt pending bits */
		/* USART_ClearITPendingBit(USART2,USART_IT_RXNE); */
	}
}
 8000f1a:	e060      	b.n	8000fde <USART2_IRQHandler+0x10a>
			else if(USART_ReceivData == 0xE1)			// System reset
 8000f1c:	88bb      	ldrh	r3, [r7, #4]
 8000f1e:	2be1      	cmp	r3, #225	; 0xe1
 8000f20:	d104      	bne.n	8000f2c <USART2_IRQHandler+0x58>
				USART_Send(USART2, "[System]Reset.\n");
 8000f22:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <USART2_IRQHandler+0x124>)
 8000f24:	4830      	ldr	r0, [pc, #192]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000f26:	f7ff fe81 	bl	8000c2c <USART_Send>
}
 8000f2a:	e058      	b.n	8000fde <USART2_IRQHandler+0x10a>
			else if((USART_ReceivData & 0xE0) == 0x20)	// Instruction start
 8000f2c:	88bb      	ldrh	r3, [r7, #4]
 8000f2e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	d115      	bne.n	8000f62 <USART2_IRQHandler+0x8e>
				selMotor = ((USART_ReceivData & 0x18) >> 3);	// Select motor
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	10db      	asrs	r3, r3, #3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	71fb      	strb	r3, [r7, #7]
				while(nInst != (USART_ReceivData & 0x07))
 8000f42:	e005      	b.n	8000f50 <USART2_IRQHandler+0x7c>
					nInst = (USART_ReceivData & 0x07);	// Set instruction number
 8000f44:	88bb      	ldrh	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <USART2_IRQHandler+0x11c>)
 8000f4e:	801a      	strh	r2, [r3, #0]
				while(nInst != (USART_ReceivData & 0x07))
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <USART2_IRQHandler+0x11c>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d1f1      	bne.n	8000f44 <USART2_IRQHandler+0x70>
}
 8000f60:	e03d      	b.n	8000fde <USART2_IRQHandler+0x10a>
			else if(USART_ReceivData == 0xF0)
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	2bf0      	cmp	r3, #240	; 0xf0
 8000f66:	d03a      	beq.n	8000fde <USART2_IRQHandler+0x10a>
				USART_Send(USART2, "[Error]Unknown instruction.\n");
 8000f68:	4924      	ldr	r1, [pc, #144]	; (8000ffc <USART2_IRQHandler+0x128>)
 8000f6a:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000f6c:	f7ff fe5e 	bl	8000c2c <USART_Send>
}
 8000f70:	e035      	b.n	8000fde <USART2_IRQHandler+0x10a>
			--nInst;
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <USART2_IRQHandler+0x11c>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <USART2_IRQHandler+0x11c>)
 8000f7c:	801a      	strh	r2, [r3, #0]
			if(((USART_ReceivData & 0x80) >> 7) == 0x01)	// Set motor speed
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <USART2_IRQHandler+0xbe>
				USART_Send(USART2, "[Motor]Set speed.\n");
 8000f88:	491d      	ldr	r1, [pc, #116]	; (8001000 <USART2_IRQHandler+0x12c>)
 8000f8a:	4817      	ldr	r0, [pc, #92]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000f8c:	f7ff fe4e 	bl	8000c2c <USART_Send>
 8000f90:	e01b      	b.n	8000fca <USART2_IRQHandler+0xf6>
				if(((USART_ReceivData & 0x40) >> 6) == 0x01) 	// Motor enable
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <USART2_IRQHandler+0xd2>
					USART_Send(USART2, "[Motor]Enable.\n");
 8000f9c:	4919      	ldr	r1, [pc, #100]	; (8001004 <USART2_IRQHandler+0x130>)
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000fa0:	f7ff fe44 	bl	8000c2c <USART_Send>
 8000fa4:	e003      	b.n	8000fae <USART2_IRQHandler+0xda>
					USART_Send(USART2, "[Motor]Disable.\n");
 8000fa6:	4918      	ldr	r1, [pc, #96]	; (8001008 <USART2_IRQHandler+0x134>)
 8000fa8:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000faa:	f7ff fe3f 	bl	8000c2c <USART_Send>
				if(((USART_ReceivData & 0x20) >> 5) == 0x01) 	// Motor direction:CCW
 8000fae:	88bb      	ldrh	r3, [r7, #4]
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <USART2_IRQHandler+0xee>
					USART_Send(USART2, "[Motor]Direction:CCW.\n");
 8000fb8:	4914      	ldr	r1, [pc, #80]	; (800100c <USART2_IRQHandler+0x138>)
 8000fba:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000fbc:	f7ff fe36 	bl	8000c2c <USART_Send>
 8000fc0:	e003      	b.n	8000fca <USART2_IRQHandler+0xf6>
					USART_Send(USART2, "[Motor]Direction:CW.\n");
 8000fc2:	4913      	ldr	r1, [pc, #76]	; (8001010 <USART2_IRQHandler+0x13c>)
 8000fc4:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000fc6:	f7ff fe31 	bl	8000c2c <USART_Send>
			if(nInst == 0)
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <USART2_IRQHandler+0x11c>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d105      	bne.n	8000fde <USART2_IRQHandler+0x10a>
				selMotor = 0xFF;	// Deselect motor
 8000fd2:	23ff      	movs	r3, #255	; 0xff
 8000fd4:	71fb      	strb	r3, [r7, #7]
				USART_Send(USART2, "[Motor]Control done.\n");
 8000fd6:	490f      	ldr	r1, [pc, #60]	; (8001014 <USART2_IRQHandler+0x140>)
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <USART2_IRQHandler+0x114>)
 8000fda:	f7ff fe27 	bl	8000c2c <USART_Send>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	08001198 	.word	0x08001198
 8000ff0:	20000046 	.word	0x20000046
 8000ff4:	080011a0 	.word	0x080011a0
 8000ff8:	080011b0 	.word	0x080011b0
 8000ffc:	080011c0 	.word	0x080011c0
 8001000:	080011e0 	.word	0x080011e0
 8001004:	080011f4 	.word	0x080011f4
 8001008:	08001204 	.word	0x08001204
 800100c:	08001218 	.word	0x08001218
 8001010:	08001230 	.word	0x08001230
 8001014:	08001248 	.word	0x08001248

08001018 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800101c:	4a15      	ldr	r2, [pc, #84]	; (8001074 <SystemInit+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <SystemInit+0x5c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]

  /* Reset SW,SWS, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001028:	4912      	ldr	r1, [pc, #72]	; (8001074 <SystemInit+0x5c>)
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <SystemInit+0x5c>)
 800102c:	685a      	ldr	r2, [r3, #4]
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <SystemInit+0x60>)
 8001030:	4013      	ands	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <SystemInit+0x5c>)
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <SystemInit+0x5c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800103e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001042:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <SystemInit+0x5c>)
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <SystemInit+0x5c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <SystemInit+0x5c>)
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <SystemInit+0x5c>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800105a:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SystemInit+0x5c>)
 800105e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001062:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001064:	f000 f80c 	bl	8001080 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <SystemInit+0x64>)
 800106a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800106e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000
 8001078:	f8ff0000 	.word	0xf8ff0000
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <SetSysClock>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
  
 #ifdef PLL_SOURCE_HSI  
  /* At this stage the HSI is already enabled */
  
  /*  PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL));
 800108e:	4a28      	ldr	r2, [pc, #160]	; (8001130 <SetSysClock+0xb0>)
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <SetSysClock+0xb0>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001098:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLMULL16);
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <SetSysClock+0xb0>)
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <SetSysClock+0xb0>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80010a4:	6053      	str	r3, [r2, #4]
  }
  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <SetSysClock+0xb4>)
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <SetSysClock+0xb4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f043 0310 	orr.w	r3, r3, #16
 80010b0:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80010b2:	4a20      	ldr	r2, [pc, #128]	; (8001134 <SetSysClock+0xb4>)
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <SetSysClock+0xb4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 0303 	bic.w	r3, r3, #3
 80010bc:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <SetSysClock+0xb4>)
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <SetSysClock+0xb4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80010ca:	4a19      	ldr	r2, [pc, #100]	; (8001130 <SetSysClock+0xb0>)
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <SetSysClock+0xb0>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <SetSysClock+0xb0>)
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <SetSysClock+0xb0>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <SetSysClock+0xb0>)
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <SetSysClock+0xb0>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e4:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <SetSysClock+0xb0>)
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <SetSysClock+0xb0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010f0:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80010f2:	bf00      	nop
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SetSysClock+0xb0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f9      	beq.n	80010f4 <SetSysClock+0x74>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <SetSysClock+0xb0>)
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <SetSysClock+0xb0>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f023 0303 	bic.w	r3, r3, #3
 800110a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <SetSysClock+0xb0>)
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SetSysClock+0xb0>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001118:	bf00      	nop
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SetSysClock+0xb0>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b08      	cmp	r3, #8
 8001124:	d1f9      	bne.n	800111a <SetSysClock+0x9a>
    {
    }
  }
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000
 8001134:	40022000 	.word	0x40022000

08001138 <__libc_init_array>:
 8001138:	b570      	push	{r4, r5, r6, lr}
 800113a:	2500      	movs	r5, #0
 800113c:	4e0c      	ldr	r6, [pc, #48]	; (8001170 <__libc_init_array+0x38>)
 800113e:	4c0d      	ldr	r4, [pc, #52]	; (8001174 <__libc_init_array+0x3c>)
 8001140:	1ba4      	subs	r4, r4, r6
 8001142:	10a4      	asrs	r4, r4, #2
 8001144:	42a5      	cmp	r5, r4
 8001146:	d109      	bne.n	800115c <__libc_init_array+0x24>
 8001148:	f000 f81a 	bl	8001180 <_init>
 800114c:	2500      	movs	r5, #0
 800114e:	4e0a      	ldr	r6, [pc, #40]	; (8001178 <__libc_init_array+0x40>)
 8001150:	4c0a      	ldr	r4, [pc, #40]	; (800117c <__libc_init_array+0x44>)
 8001152:	1ba4      	subs	r4, r4, r6
 8001154:	10a4      	asrs	r4, r4, #2
 8001156:	42a5      	cmp	r5, r4
 8001158:	d105      	bne.n	8001166 <__libc_init_array+0x2e>
 800115a:	bd70      	pop	{r4, r5, r6, pc}
 800115c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001160:	4798      	blx	r3
 8001162:	3501      	adds	r5, #1
 8001164:	e7ee      	b.n	8001144 <__libc_init_array+0xc>
 8001166:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800116a:	4798      	blx	r3
 800116c:	3501      	adds	r5, #1
 800116e:	e7f2      	b.n	8001156 <__libc_init_array+0x1e>
 8001170:	08001260 	.word	0x08001260
 8001174:	08001260 	.word	0x08001260
 8001178:	08001260 	.word	0x08001260
 800117c:	08001264 	.word	0x08001264

08001180 <_init>:
 8001180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001182:	bf00      	nop
 8001184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001186:	bc08      	pop	{r3}
 8001188:	469e      	mov	lr, r3
 800118a:	4770      	bx	lr

0800118c <_fini>:
 800118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118e:	bf00      	nop
 8001190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001192:	bc08      	pop	{r3}
 8001194:	469e      	mov	lr, r3
 8001196:	4770      	bx	lr
