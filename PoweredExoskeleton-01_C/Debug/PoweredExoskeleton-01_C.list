
PoweredExoskeleton-01_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001528  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001634  08001634  00011634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001700  08001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001704  08001704  00011704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08001708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000024  0800172c  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000005c  0800172c  0002005c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005caa  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000140c  00000000  00000000  00025cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000838  00000000  00000000  00027108  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000780  00000000  00000000  00027940  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000025a3  00000000  00000000  000280c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002401  00000000  00000000  0002a663  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ca64  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000021b4  00000000  00000000  0002cae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002ec94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	0800161c 	.word	0x0800161c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	0800161c 	.word	0x0800161c

0800014c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <NVIC_PriorityGroupConfig+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800015c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000160:	60d3      	str	r3, [r2, #12]
}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	e000ed00 	.word	0xe000ed00

08000170 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000178:	2300      	movs	r3, #0
 800017a:	617b      	str	r3, [r7, #20]
 800017c:	2300      	movs	r3, #0
 800017e:	613b      	str	r3, [r7, #16]
 8000180:	230f      	movs	r3, #15
 8000182:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	78db      	ldrb	r3, [r3, #3]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d03a      	beq.n	8000202 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800018c:	4b27      	ldr	r3, [pc, #156]	; (800022c <NVIC_Init+0xbc>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	43db      	mvns	r3, r3
 8000192:	0a1b      	lsrs	r3, r3, #8
 8000194:	f003 0307 	and.w	r3, r3, #7
 8000198:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	f1c3 0304 	rsb	r3, r3, #4
 80001a0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80001a2:	68fa      	ldr	r2, [r7, #12]
 80001a4:	697b      	ldr	r3, [r7, #20]
 80001a6:	fa22 f303 	lsr.w	r3, r2, r3
 80001aa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	461a      	mov	r2, r3
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	fa02 f303 	lsl.w	r3, r2, r3
 80001b8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	789b      	ldrb	r3, [r3, #2]
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4013      	ands	r3, r2
 80001c4:	697a      	ldr	r2, [r7, #20]
 80001c6:	4313      	orrs	r3, r2
 80001c8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <NVIC_Init+0xc0>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	6979      	ldr	r1, [r7, #20]
 80001d8:	b2c9      	uxtb	r1, r1
 80001da:	4413      	add	r3, r2
 80001dc:	460a      	mov	r2, r1
 80001de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e2:	4a13      	ldr	r2, [pc, #76]	; (8000230 <NVIC_Init+0xc0>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	095b      	lsrs	r3, r3, #5
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	f003 031f 	and.w	r3, r3, #31
 80001f6:	2101      	movs	r1, #1
 80001f8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000200:	e00f      	b.n	8000222 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000202:	490b      	ldr	r1, [pc, #44]	; (8000230 <NVIC_Init+0xc0>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	095b      	lsrs	r3, r3, #5
 800020a:	b2db      	uxtb	r3, r3
 800020c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	f003 031f 	and.w	r3, r3, #31
 8000216:	2201      	movs	r2, #1
 8000218:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800021a:	f100 0320 	add.w	r3, r0, #32
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000222:	bf00      	nop
 8000224:	371c      	adds	r7, #28
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	e000ed00 	.word	0xe000ed00
 8000230:	e000e100 	.word	0xe000e100

08000234 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4013      	ands	r3, r2
 800024c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4013      	ands	r3, r2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d005      	beq.n	8000266 <EXTI_GetITStatus+0x32>
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000260:	2301      	movs	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
 8000264:	e001      	b.n	800026a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000266:	2300      	movs	r3, #0
 8000268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010400 	.word	0x40010400

0800027c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000284:	4a03      	ldr	r2, [pc, #12]	; (8000294 <EXTI_ClearITPendingBit+0x18>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6153      	str	r3, [r2, #20]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40010400 	.word	0x40010400

08000298 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	; 0x24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	78db      	ldrb	r3, [r3, #3]
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d005      	beq.n	80002dc <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	461a      	mov	r2, r3
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	4313      	orrs	r3, r2
 80002da:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d044      	beq.n	8000370 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
 80002f0:	e038      	b.n	8000364 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80002f2:	2201      	movs	r2, #1
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4013      	ands	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000308:	693a      	ldr	r2, [r7, #16]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	429a      	cmp	r2, r3
 800030e:	d126      	bne.n	800035e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000316:	220f      	movs	r2, #15
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	43db      	mvns	r3, r3
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	4013      	ands	r3, r2
 8000328:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800032a:	69fa      	ldr	r2, [r7, #28]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	fa02 f303 	lsl.w	r3, r2, r3
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	4313      	orrs	r3, r2
 8000336:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	2b28      	cmp	r3, #40	; 0x28
 800033e:	d105      	bne.n	800034c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000340:	2201      	movs	r2, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	409a      	lsls	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	615a      	str	r2, [r3, #20]
 800034a:	e008      	b.n	800035e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	2b48      	cmp	r3, #72	; 0x48
 8000352:	d104      	bne.n	800035e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000354:	2201      	movs	r2, #1
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	409a      	lsls	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800035e:	69bb      	ldr	r3, [r7, #24]
 8000360:	3301      	adds	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
 8000364:	69bb      	ldr	r3, [r7, #24]
 8000366:	2b07      	cmp	r3, #7
 8000368:	d9c3      	bls.n	80002f2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2bff      	cmp	r3, #255	; 0xff
 8000376:	d946      	bls.n	8000406 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
 8000382:	e03a      	b.n	80003fa <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	3308      	adds	r3, #8
 8000388:	2201      	movs	r2, #1
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4013      	ands	r3, r2
 800039a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800039c:	693a      	ldr	r2, [r7, #16]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d127      	bne.n	80003f4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003aa:	220f      	movs	r2, #15
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	43db      	mvns	r3, r3
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	4013      	ands	r3, r2
 80003bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003be:	69fa      	ldr	r2, [r7, #28]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	2b28      	cmp	r3, #40	; 0x28
 80003d2:	d105      	bne.n	80003e0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	3308      	adds	r3, #8
 80003d8:	2201      	movs	r2, #1
 80003da:	409a      	lsls	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	78db      	ldrb	r3, [r3, #3]
 80003e4:	2b48      	cmp	r3, #72	; 0x48
 80003e6:	d105      	bne.n	80003f4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	3308      	adds	r3, #8
 80003ec:	2201      	movs	r2, #1
 80003ee:	409a      	lsls	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	3301      	adds	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	d9c1      	bls.n	8000384 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	605a      	str	r2, [r3, #4]
  }
}
 8000406:	bf00      	nop
 8000408:	3724      	adds	r7, #36	; 0x24
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800041e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2202      	movs	r2, #2
 8000424:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2204      	movs	r2, #4
 800042a:	70da      	strb	r2, [r3, #3]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000442:	887a      	ldrh	r2, [r7, #2]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	615a      	str	r2, [r3, #20]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <RCC_DeInit+0x54>)
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <RCC_DeInit+0x54>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000464:	4910      	ldr	r1, [pc, #64]	; (80004a8 <RCC_DeInit+0x54>)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <RCC_DeInit+0x54>)
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <RCC_DeInit+0x58>)
 800046c:	4013      	ands	r3, r2
 800046e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <RCC_DeInit+0x54>)
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <RCC_DeInit+0x54>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800047a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800047e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000480:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <RCC_DeInit+0x54>)
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <RCC_DeInit+0x54>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800048a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800048c:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <RCC_DeInit+0x54>)
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <RCC_DeInit+0x54>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000496:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <RCC_DeInit+0x54>)
 800049a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800049e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	f8ff0000 	.word	0xf8ff0000

080004b0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80004c8:	4b4c      	ldr	r3, [pc, #304]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d007      	beq.n	80004e8 <RCC_GetClocksFreq+0x38>
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d009      	beq.n	80004f0 <RCC_GetClocksFreq+0x40>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d133      	bne.n	8000548 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a47      	ldr	r2, [pc, #284]	; (8000600 <RCC_GetClocksFreq+0x150>)
 80004e4:	601a      	str	r2, [r3, #0]
      break;
 80004e6:	e033      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a45      	ldr	r2, [pc, #276]	; (8000600 <RCC_GetClocksFreq+0x150>)
 80004ec:	601a      	str	r2, [r3, #0]
      break;
 80004ee:	e02f      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80004f0:	4b42      	ldr	r3, [pc, #264]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004f8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000502:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	0c9b      	lsrs	r3, r3, #18
 8000508:	3302      	adds	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d106      	bne.n	8000520 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	4a3b      	ldr	r2, [pc, #236]	; (8000604 <RCC_GetClocksFreq+0x154>)
 8000516:	fb02 f203 	mul.w	r2, r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800051e:	e017      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000520:	4b36      	ldr	r3, [pc, #216]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d006      	beq.n	800053a <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	4a35      	ldr	r2, [pc, #212]	; (8000604 <RCC_GetClocksFreq+0x154>)
 8000530:	fb02 f203 	mul.w	r2, r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
      break;
 8000538:	e00a      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4a30      	ldr	r2, [pc, #192]	; (8000600 <RCC_GetClocksFreq+0x150>)
 800053e:	fb02 f203 	mul.w	r2, r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
      break;
 8000546:	e003      	b.n	8000550 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <RCC_GetClocksFreq+0x150>)
 800054c:	601a      	str	r2, [r3, #0]
      break;
 800054e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000558:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <RCC_GetClocksFreq+0x158>)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	40da      	lsrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000580:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000588:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <RCC_GetClocksFreq+0x158>)
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	40da      	lsrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005a8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	0adb      	lsrs	r3, r3, #11
 80005ae:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <RCC_GetClocksFreq+0x158>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	0b9b      	lsrs	r3, r3, #14
 80005d6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <RCC_GetClocksFreq+0x15c>)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	007a1200 	.word	0x007a1200
 8000604:	003d0900 	.word	0x003d0900
 8000608:	20000000 	.word	0x20000000
 800060c:	20000010 	.word	0x20000010

08000610 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000622:	4909      	ldr	r1, [pc, #36]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800062e:	e006      	b.n	800063e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000630:	4905      	ldr	r1, [pc, #20]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	43db      	mvns	r3, r3
 800063a:	4013      	ands	r3, r2
 800063c:	618b      	str	r3, [r1, #24]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800065e:	4909      	ldr	r1, [pc, #36]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000662:	69da      	ldr	r2, [r3, #28]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4313      	orrs	r3, r2
 8000668:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800066a:	e006      	b.n	800067a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800066c:	4905      	ldr	r1, [pc, #20]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000670:	69da      	ldr	r2, [r3, #28]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	43db      	mvns	r3, r3
 8000676:	4013      	ands	r3, r2
 8000678:	61cb      	str	r3, [r1, #28]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <TIM_TimeBaseInit+0xd0>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d013      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <TIM_TimeBaseInit+0xd4>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d00f      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b2:	d00b      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <TIM_TimeBaseInit+0xd8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d007      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a29      	ldr	r2, [pc, #164]	; (8000764 <TIM_TimeBaseInit+0xdc>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d003      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <TIM_TimeBaseInit+0xe0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d108      	bne.n	80006de <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80006cc:	89fb      	ldrh	r3, [r7, #14]
 80006ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006d2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	885a      	ldrh	r2, [r3, #2]
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	4313      	orrs	r3, r2
 80006dc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <TIM_TimeBaseInit+0xe4>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d00c      	beq.n	8000700 <TIM_TimeBaseInit+0x78>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <TIM_TimeBaseInit+0xe8>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d008      	beq.n	8000700 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006f4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	88da      	ldrh	r2, [r3, #6]
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	89fa      	ldrh	r2, [r7, #14]
 8000704:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	889a      	ldrh	r2, [r3, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	881a      	ldrh	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <TIM_TimeBaseInit+0xd0>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d00f      	beq.n	800073e <TIM_TimeBaseInit+0xb6>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <TIM_TimeBaseInit+0xd4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d00b      	beq.n	800073e <TIM_TimeBaseInit+0xb6>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <TIM_TimeBaseInit+0xec>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d007      	beq.n	800073e <TIM_TimeBaseInit+0xb6>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <TIM_TimeBaseInit+0xf0>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d003      	beq.n	800073e <TIM_TimeBaseInit+0xb6>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <TIM_TimeBaseInit+0xf4>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d104      	bne.n	8000748 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	7a1b      	ldrb	r3, [r3, #8]
 8000742:	b29a      	uxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2201      	movs	r2, #1
 800074c:	829a      	strh	r2, [r3, #20]
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40012c00 	.word	0x40012c00
 800075c:	40013400 	.word	0x40013400
 8000760:	40000400 	.word	0x40000400
 8000764:	40000800 	.word	0x40000800
 8000768:	40000c00 	.word	0x40000c00
 800076c:	40001000 	.word	0x40001000
 8000770:	40001400 	.word	0x40001400
 8000774:	40014000 	.word	0x40014000
 8000778:	40014400 	.word	0x40014400
 800077c:	40014800 	.word	0x40014800

08000780 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	817b      	strh	r3, [r7, #10]
 800078e:	2300      	movs	r3, #0
 8000790:	81fb      	strh	r3, [r7, #14]
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	8c1b      	ldrh	r3, [r3, #32]
 800079a:	b29b      	uxth	r3, r3
 800079c:	f023 0310 	bic.w	r3, r3, #16
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	8c1b      	ldrh	r3, [r3, #32]
 80007aa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	8b1b      	ldrh	r3, [r3, #24]
 80007b6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80007b8:	897b      	ldrh	r3, [r7, #10]
 80007ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80007be:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80007c0:	897b      	ldrh	r3, [r7, #10]
 80007c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007c6:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	897b      	ldrh	r3, [r7, #10]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80007d6:	89fb      	ldrh	r3, [r7, #14]
 80007d8:	f023 0320 	bic.w	r3, r3, #32
 80007dc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	891b      	ldrh	r3, [r3, #8]
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	885b      	ldrh	r3, [r3, #2]
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a22      	ldr	r2, [pc, #136]	; (8000888 <TIM_OC2Init+0x108>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d003      	beq.n	800080a <TIM_OC2Init+0x8a>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <TIM_OC2Init+0x10c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d12b      	bne.n	8000862 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000810:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	895b      	ldrh	r3, [r3, #10]
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	b29a      	uxth	r2, r3
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	4313      	orrs	r3, r2
 800081e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8000820:	89fb      	ldrh	r3, [r7, #14]
 8000822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000826:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	889b      	ldrh	r3, [r3, #4]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	b29a      	uxth	r2, r3
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	4313      	orrs	r3, r2
 8000834:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800083c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000844:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	b29a      	uxth	r2, r3
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	4313      	orrs	r3, r2
 8000852:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	89db      	ldrh	r3, [r3, #14]
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	b29a      	uxth	r2, r3
 800085c:	89bb      	ldrh	r3, [r7, #12]
 800085e:	4313      	orrs	r3, r2
 8000860:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	89ba      	ldrh	r2, [r7, #12]
 8000866:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	897a      	ldrh	r2, [r7, #10]
 800086c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	88da      	ldrh	r2, [r3, #6]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	89fa      	ldrh	r2, [r7, #14]
 800087a:	841a      	strh	r2, [r3, #32]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40012c00 	.word	0x40012c00
 800088c:	40013400 	.word	0x40013400

08000890 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	817b      	strh	r3, [r7, #10]
 800089e:	2300      	movs	r3, #0
 80008a0:	81fb      	strh	r3, [r7, #14]
 80008a2:	2300      	movs	r3, #0
 80008a4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8c1b      	ldrh	r3, [r3, #32]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	8c1b      	ldrh	r3, [r3, #32]
 80008ba:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	8b9b      	ldrh	r3, [r3, #28]
 80008c6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80008c8:	897b      	ldrh	r3, [r7, #10]
 80008ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008ce:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80008d0:	897b      	ldrh	r3, [r7, #10]
 80008d2:	f023 0303 	bic.w	r3, r3, #3
 80008d6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	881a      	ldrh	r2, [r3, #0]
 80008dc:	897b      	ldrh	r3, [r7, #10]
 80008de:	4313      	orrs	r3, r2
 80008e0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008e8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	891b      	ldrh	r3, [r3, #8]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	89fb      	ldrh	r3, [r7, #14]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	885b      	ldrh	r3, [r3, #2]
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	b29a      	uxth	r2, r3
 8000900:	89fb      	ldrh	r3, [r7, #14]
 8000902:	4313      	orrs	r3, r2
 8000904:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a22      	ldr	r2, [pc, #136]	; (8000994 <TIM_OC3Init+0x104>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d003      	beq.n	8000916 <TIM_OC3Init+0x86>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <TIM_OC3Init+0x108>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12b      	bne.n	800096e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800091c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	895b      	ldrh	r3, [r3, #10]
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	b29a      	uxth	r2, r3
 8000926:	89fb      	ldrh	r3, [r7, #14]
 8000928:	4313      	orrs	r3, r2
 800092a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 800092c:	89fb      	ldrh	r3, [r7, #14]
 800092e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000932:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	889b      	ldrh	r3, [r3, #4]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b29a      	uxth	r2, r3
 800093c:	89fb      	ldrh	r3, [r7, #14]
 800093e:	4313      	orrs	r3, r2
 8000940:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8000942:	89bb      	ldrh	r3, [r7, #12]
 8000944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000948:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800094a:	89bb      	ldrh	r3, [r7, #12]
 800094c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000950:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	899b      	ldrh	r3, [r3, #12]
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	b29a      	uxth	r2, r3
 800095a:	89bb      	ldrh	r3, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	89db      	ldrh	r3, [r3, #14]
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	b29a      	uxth	r2, r3
 8000968:	89bb      	ldrh	r3, [r7, #12]
 800096a:	4313      	orrs	r3, r2
 800096c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	89ba      	ldrh	r2, [r7, #12]
 8000972:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	897a      	ldrh	r2, [r7, #10]
 8000978:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	88da      	ldrh	r2, [r3, #6]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	89fa      	ldrh	r2, [r7, #14]
 8000986:	841a      	strh	r2, [r3, #32]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40012c00 	.word	0x40012c00
 8000998:	40013400 	.word	0x40013400

0800099c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d008      	beq.n	80009c0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80009be:	e007      	b.n	80009d0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	f023 0301 	bic.w	r3, r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	801a      	strh	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	460b      	mov	r3, r1
 80009e4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009e6:	78fb      	ldrb	r3, [r7, #3]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d008      	beq.n	80009fe <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 80009fc:	e007      	b.n	8000a0e <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	801a      	strh	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	8b1b      	ldrh	r3, [r3, #24]
 8000a2c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a34:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	89fa      	ldrh	r2, [r7, #14]
 8000a46:	831a      	strh	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b085      	sub	sp, #20
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8b9b      	ldrh	r3, [r3, #28]
 8000a66:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	f023 0308 	bic.w	r3, r3, #8
 8000a6e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000a70:	89fa      	ldrh	r2, [r7, #14]
 8000a72:	887b      	ldrh	r3, [r7, #2]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	89fa      	ldrh	r2, [r7, #14]
 8000a7c:	839a      	strh	r2, [r3, #28]
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	8a1b      	ldrh	r3, [r3, #16]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ab4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	88db      	ldrh	r3, [r3, #6]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	899b      	ldrh	r3, [r3, #12]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ada:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000ade:	4013      	ands	r3, r2
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	889a      	ldrh	r2, [r3, #4]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	891b      	ldrh	r3, [r3, #8]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000afa:	4313      	orrs	r3, r2
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	8a9b      	ldrh	r3, [r3, #20]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b10:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000b14:	4013      	ands	r3, r2
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	899b      	ldrh	r3, [r3, #12]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b20:	4313      	orrs	r3, r2
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fcbd 	bl	80004b0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <USART_Init+0x16c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d102      	bne.n	8000b44 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b42:	e001      	b.n	8000b48 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	899b      	ldrh	r3, [r3, #12]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da0c      	bge.n	8000b6e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b56:	4613      	mov	r3, r2
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	4413      	add	r3, r2
 8000b5c:	009a      	lsls	r2, r3, #2
 8000b5e:	441a      	add	r2, r3
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b6c:	e00b      	b.n	8000b86 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	009a      	lsls	r2, r3, #2
 8000b78:	441a      	add	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <USART_Init+0x170>)
 8000b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	011b      	lsls	r3, r3, #4
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	091b      	lsrs	r3, r3, #4
 8000b98:	2264      	movs	r2, #100	; 0x64
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	899b      	ldrh	r3, [r3, #12]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da0c      	bge.n	8000bca <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	3332      	adds	r3, #50	; 0x32
 8000bb6:	4a10      	ldr	r2, [pc, #64]	; (8000bf8 <USART_Init+0x170>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	095b      	lsrs	r3, r3, #5
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bc8:	e00b      	b.n	8000be2 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	3332      	adds	r3, #50	; 0x32
 8000bd0:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <USART_Init+0x170>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bde:	4313      	orrs	r3, r2
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	811a      	strh	r2, [r3, #8]
}
 8000bea:	bf00      	nop
 8000bec:	3730      	adds	r7, #48	; 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	51eb851f 	.word	0x51eb851f

08000bfc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c0a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	220c      	movs	r2, #12
 8000c22:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	819a      	strh	r2, [r3, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d008      	beq.n	8000c58 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	899b      	ldrh	r3, [r3, #12]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000c56:	e007      	b.n	8000c68 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	899b      	ldrh	r3, [r3, #12]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	819a      	strh	r2, [r3, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b087      	sub	sp, #28
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000ca0:	887b      	ldrh	r3, [r7, #2]
 8000ca2:	f003 031f 	and.w	r3, r3, #31
 8000ca6:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d103      	bne.n	8000cc0 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	330c      	adds	r3, #12
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e009      	b.n	8000cd4 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d103      	bne.n	8000cce <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3310      	adds	r3, #16
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e002      	b.n	8000cd4 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3314      	adds	r3, #20
 8000cd2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000cd4:	787b      	ldrb	r3, [r7, #1]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d006      	beq.n	8000ce8 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	6811      	ldr	r1, [r2, #0]
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000ce6:	e006      	b.n	8000cf6 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	6811      	ldr	r1, [r2, #0]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	43d2      	mvns	r2, r2
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	809a      	strh	r2, [r3, #4]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	889b      	ldrh	r3, [r3, #4]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d34:	b29b      	uxth	r3, r3
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e001      	b.n	8000d6a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	801a      	strh	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b087      	sub	sp, #28
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000db2:	887b      	ldrh	r3, [r7, #2]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000dbc:	887b      	ldrh	r3, [r7, #2]
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d107      	bne.n	8000de4 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	899b      	ldrh	r3, [r3, #12]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	4013      	ands	r3, r2
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e011      	b.n	8000e08 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d107      	bne.n	8000dfa <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	8a1b      	ldrh	r3, [r3, #16]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	e006      	b.n	8000e08 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	8a9b      	ldrh	r3, [r3, #20]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000e10:	2201      	movs	r2, #1
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <USART_GetITStatus+0xa4>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000e34:	2301      	movs	r3, #1
 8000e36:	74fb      	strb	r3, [r7, #19]
 8000e38:	e001      	b.n	8000e3e <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000e3e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
	...

08000e4c <GPIO_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void GPIO_Initialization(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_StructInit(&GPIO_InitStructure);	// Fills each GPIO_InitStruct member with its default value
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fadb 	bl	8000410 <GPIO_StructInit>

	/* Configure the GPIO pin */
	/* user */
	// PA5: LED-user
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000e5e:	2310      	movs	r3, #16
 8000e60:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000e62:	2302      	movs	r3, #2
 8000e64:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4842      	ldr	r0, [pc, #264]	; (8000f74 <GPIO_Initialization+0x128>)
 8000e6c:	f7ff fa14 	bl	8000298 <GPIO_Init>

	// PC13: Button-user
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000e76:	2304      	movs	r3, #4
 8000e78:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	483d      	ldr	r0, [pc, #244]	; (8000f78 <GPIO_Initialization+0x12c>)
 8000e84:	f7ff fa08 	bl	8000298 <GPIO_Init>


	/* USART */
	// PA2: USART2_TX
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000e8c:	2318      	movs	r3, #24
 8000e8e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e90:	2303      	movs	r3, #3
 8000e92:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4836      	ldr	r0, [pc, #216]	; (8000f74 <GPIO_Initialization+0x128>)
 8000e9a:	f7ff f9fd 	bl	8000298 <GPIO_Init>

	// PA3: USART2_RX
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4831      	ldr	r0, [pc, #196]	; (8000f74 <GPIO_Initialization+0x128>)
 8000eb0:	f7ff f9f2 	bl	8000298 <GPIO_Init>


	/* Motor0 */
	// PB5: Motor0_Enbale
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482d      	ldr	r0, [pc, #180]	; (8000f7c <GPIO_Initialization+0x130>)
 8000ec6:	f7ff f9e7 	bl	8000298 <GPIO_Init>

	// PB4: Motor0-Direction
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4828      	ldr	r0, [pc, #160]	; (8000f7c <GPIO_Initialization+0x130>)
 8000edc:	f7ff f9dc 	bl	8000298 <GPIO_Init>

	// PB10: Motor0-Speed(PWM, TIM2_CH3)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee4:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000ee6:	2318      	movs	r3, #24
 8000ee8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000eea:	2303      	movs	r3, #3
 8000eec:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4822      	ldr	r0, [pc, #136]	; (8000f7c <GPIO_Initialization+0x130>)
 8000ef4:	f7ff f9d0 	bl	8000298 <GPIO_Init>

	// PB3: Motor0-Ready
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000efc:	2304      	movs	r3, #4
 8000efe:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f00:	2302      	movs	r3, #2
 8000f02:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	481c      	ldr	r0, [pc, #112]	; (8000f7c <GPIO_Initialization+0x130>)
 8000f0a:	f7ff f9c5 	bl	8000298 <GPIO_Init>

	/* Motor1 */
	// PA8: Motor1_Enbale
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f12:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000f14:	2310      	movs	r3, #16
 8000f16:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4814      	ldr	r0, [pc, #80]	; (8000f74 <GPIO_Initialization+0x128>)
 8000f22:	f7ff f9b9 	bl	8000298 <GPIO_Init>

	// PA9: Motor1-Direction
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f30:	2302      	movs	r3, #2
 8000f32:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	480e      	ldr	r0, [pc, #56]	; (8000f74 <GPIO_Initialization+0x128>)
 8000f3a:	f7ff f9ad 	bl	8000298 <GPIO_Init>

	// PC7: Motor1-Speed(PWM, TIM3_CH2)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000f42:	2318      	movs	r3, #24
 8000f44:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f46:	2303      	movs	r3, #3
 8000f48:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480a      	ldr	r0, [pc, #40]	; (8000f78 <GPIO_Initialization+0x12c>)
 8000f50:	f7ff f9a2 	bl	8000298 <GPIO_Init>

	// PB6: Motor1-Ready
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000f54:	2340      	movs	r3, #64	; 0x40
 8000f56:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <GPIO_Initialization+0x130>)
 8000f66:	f7ff f997 	bl	8000298 <GPIO_Init>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40010800 	.word	0x40010800
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	40010c00 	.word	0x40010c00

08000f80 <NVIC_Initialization>:
  * @brief  Initialize NVIC.
  * @param  None
  * @retval None
  */
void NVIC_Initialization(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;	// Structure Declarations

	/* Configures the priority grouping */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8000f86:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000f8a:	f7ff f8df 	bl	800014c <NVIC_PriorityGroupConfig>

	/* Configure the NVIC */
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000f8e:	2326      	movs	r3, #38	; 0x26
 8000f90:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff f8e5 	bl	8000170 <NVIC_Init>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <PWM_Initialization>:
  * @brief  Initialize PWM.
  * @param  None
  * @retval None
  */
void PWM_Initialization(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
//	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
//	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 999; // Set the Auto-Reload value
 8000fb6:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000fba:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = 0; // Set the Prescaler value
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;	// Select the Counter Mode
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481e      	ldr	r0, [pc, #120]	; (8001044 <PWM_Initialization+0x94>)
 8000fcc:	f7ff fb5c 	bl	8000688 <TIM_TimeBaseInit>
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fda:	f7ff fb55 	bl	8000688 <TIM_TimeBaseInit>

	/* PWM1 Mode configuration */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000fde:	2360      	movs	r3, #96	; 0x60
 8000fe0:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 333;	// TIM_Pulse=CCR1
 8000fe6:	f240 134d 	movw	r3, #333	; 0x14d
 8000fea:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000fec:	2300      	movs	r3, #0
 8000fee:	81bb      	strh	r3, [r7, #12]
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);	// TIM3_CH2
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <PWM_Initialization+0x94>)
 8000ff6:	f7ff fbc3 	bl	8000780 <TIM_OC2Init>
	TIM_OC3Init(TIM2, &TIM_OCInitStructure);	// TIM2_CH3
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001002:	f7ff fc45 	bl	8000890 <TIM_OC3Init>

	/* Enable */
	// TIM3_CH2 (Motor1)
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);	// TIMx peripheral Preload register on CCR1
 8001006:	2108      	movs	r1, #8
 8001008:	480e      	ldr	r0, [pc, #56]	; (8001044 <PWM_Initialization+0x94>)
 800100a:	f7ff fd05 	bl	8000a18 <TIM_OC2PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);					// TIMx peripheral Preload register on ARR
 800100e:	2101      	movs	r1, #1
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <PWM_Initialization+0x94>)
 8001012:	f7ff fce2 	bl	80009da <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM3, ENABLE);								// The specified TIM peripheral
 8001016:	2101      	movs	r1, #1
 8001018:	480a      	ldr	r0, [pc, #40]	; (8001044 <PWM_Initialization+0x94>)
 800101a:	f7ff fcbf 	bl	800099c <TIM_Cmd>

	// TIM2_CH3 (Motor0)
	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);	// TIMx peripheral Preload register on CCR1
 800101e:	2108      	movs	r1, #8
 8001020:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001024:	f7ff fd15 	bl	8000a52 <TIM_OC3PreloadConfig>
	TIM_ARRPreloadConfig(TIM2, ENABLE);					// TIMx peripheral Preload register on ARR
 8001028:	2101      	movs	r1, #1
 800102a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800102e:	f7ff fcd4 	bl	80009da <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM2, ENABLE);								// The specified TIM peripheral
 8001032:	2101      	movs	r1, #1
 8001034:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001038:	f7ff fcb0 	bl	800099c <TIM_Cmd>
}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40000400 	.word	0x40000400

08001048 <RCC_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run this function before any other initialization.
  */
void RCC_Initialization(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	/* Resets the RCC clock configuration to the default reset state */
	RCC_DeInit();
 800104c:	f7ff fa02 	bl	8000454 <RCC_DeInit>

	/* RCC APB1 */
	RCC_APB1PeriphClockCmd(	RCC_APB1Periph_USART2	|
 8001050:	2101      	movs	r1, #1
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <RCC_Initialization+0x1c>)
 8001054:	f7ff fafa 	bl	800064c <RCC_APB1PeriphClockCmd>
							RCC_APB1Periph_TIM2		|	// PWM:Motor0-Speed
							RCC_APB1Periph_TIM3		,	// PWM:Motor1-Speed
							ENABLE);

	/* RCC APB2 */
	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA |
 8001058:	2101      	movs	r1, #1
 800105a:	207c      	movs	r0, #124	; 0x7c
 800105c:	f7ff fad8 	bl	8000610 <RCC_APB2PeriphClockCmd>
							RCC_APB2Periph_GPIOB |
							RCC_APB2Periph_GPIOC |
							RCC_APB2Periph_GPIOD |
							RCC_APB2Periph_GPIOE ,
							ENABLE);
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	00020003 	.word	0x00020003

08001068 <USART_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void USART_Initialization(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	USART_InitTypeDef USART_InitStructure;

//	USART_DeInit(USART2);
	USART_StructInit(&USART_InitStructure);	// Fills each USART_InitStruct member with its default value
 800106e:	463b      	mov	r3, r7
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fdc3 	bl	8000bfc <USART_StructInit>
	 * - One Stop Bit
	 * - No parity
	 * - Hardware flow control disabled (RTS and CTS signals)
	 * - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = 9600;
 8001076:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800107a:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800107c:	2300      	movs	r3, #0
 800107e:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001080:	2300      	movs	r3, #0
 8001082:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001084:	2300      	movs	r3, #0
 8001086:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001088:	2300      	movs	r3, #0
 800108a:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800108c:	230c      	movs	r3, #12
 800108e:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_InitStructure);
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <USART_Initialization+0x58>)
 8001096:	f7ff fcf7 	bl	8000a88 <USART_Init>

	/* Enable "Receive data register not empty" interrupt */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800109a:	2201      	movs	r2, #1
 800109c:	f240 5125 	movw	r1, #1317	; 0x525
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <USART_Initialization+0x58>)
 80010a2:	f7ff fde6 	bl	8000c72 <USART_ITConfig>

	/* Enable USART */
	USART_Cmd(USART2, ENABLE);
 80010a6:	2101      	movs	r1, #1
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <USART_Initialization+0x58>)
 80010aa:	f7ff fdc3 	bl	8000c34 <USART_Cmd>

	/* Clear "Transmission Complete" flag, 否則第1位數據會丟失 */
	USART_ClearFlag(USART2, USART_FLAG_TC);
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <USART_Initialization+0x58>)
 80010b2:	f7ff fe60 	bl	8000d76 <USART_ClearFlag>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40004400 	.word	0x40004400

080010c4 <USART_Send>:
  *   				USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_Send(USART_TypeDef* USARTx, uint8_t* Data)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	for (int i = 0; Data[i] != '\0'; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e013      	b.n	80010fc <USART_Send+0x38>
	{
		/* Transmits single data through the USARTx peripheral */
		USART_SendData(USARTx, (uint16_t)Data[i]);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fe0d 	bl	8000d00 <USART_SendData>

		/* Wait until transmission complete, use TC or TXE flag */
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET)
 80010e6:	bf00      	nop
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fe28 	bl	8000d40 <USART_GetFlagStatus>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f8      	beq.n	80010e8 <USART_Send+0x24>
	for (int i = 0; Data[i] != '\0'; i++)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1e5      	bne.n	80010d4 <USART_Send+0x10>
		{/* Null */}
	}
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	da0b      	bge.n	800113c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001124:	490d      	ldr	r1, [pc, #52]	; (800115c <NVIC_SetPriority+0x4c>)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	3b04      	subs	r3, #4
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800113a:	e009      	b.n	8001150 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800113c:	4908      	ldr	r1, [pc, #32]	; (8001160 <NVIC_SetPriority+0x50>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	e000e100 	.word	0xe000e100

08001164 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001172:	d301      	bcc.n	8001178 <SysTick_Config+0x14>
 8001174:	2301      	movs	r3, #1
 8001176:	e011      	b.n	800119c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001180:	3b01      	subs	r3, #1
 8001182:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8001184:	210f      	movs	r1, #15
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	f7ff ffc1 	bl	8001110 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <SysTick_Config+0x40>)
 8001196:	2207      	movs	r2, #7
 8001198:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <main>:
  * @brief   Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */  
  
  /* SysTick end of count event each 1ms */
  RCC_GetClocksFreq(&RCC_Clocks);
 80011ae:	481d      	ldr	r0, [pc, #116]	; (8001224 <main+0x7c>)
 80011b0:	f7ff f97e 	bl	80004b0 <RCC_GetClocksFreq>
  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <main+0x7c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <main+0x80>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	099b      	lsrs	r3, r3, #6
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffcf 	bl	8001164 <SysTick_Config>
  
  /* Initiate Blink Speed variable */ 
//  BlinkSpeed = 0;

  /* Initialization */
  RCC_Initialization();
 80011c6:	f7ff ff3f 	bl	8001048 <RCC_Initialization>
  USART_Initialization();
 80011ca:	f7ff ff4d 	bl	8001068 <USART_Initialization>
  GPIO_Initialization();
 80011ce:	f7ff fe3d 	bl	8000e4c <GPIO_Initialization>
  NVIC_Initialization();
 80011d2:	f7ff fed5 	bl	8000f80 <NVIC_Initialization>
  PWM_Initialization();
 80011d6:	f7ff feeb 	bl	8000fb0 <PWM_Initialization>

  GPIO_ResetBits(GPIOA,GPIO_Pin_5);
 80011da:	2120      	movs	r1, #32
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <main+0x84>)
 80011de:	f7ff f92a 	bl	8000436 <GPIO_ResetBits>

  /* Infinite loop */
  while (1)
  {
	for (int i = 0; TxBuf1[i] != '\0'; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	e013      	b.n	8001210 <main+0x68>
	{
		USART_SendData(USART2, (uint16_t)TxBuf1[i]);
 80011e8:	4a11      	ldr	r2, [pc, #68]	; (8001230 <main+0x88>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	480f      	ldr	r0, [pc, #60]	; (8001234 <main+0x8c>)
 80011f6:	f7ff fd83 	bl	8000d00 <USART_SendData>

		while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET)
 80011fa:	bf00      	nop
 80011fc:	2140      	movs	r1, #64	; 0x40
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <main+0x8c>)
 8001200:	f7ff fd9e 	bl	8000d40 <USART_GetFlagStatus>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f8      	beq.n	80011fc <main+0x54>
	for (int i = 0; TxBuf1[i] != '\0'; i++)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3301      	adds	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <main+0x88>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e5      	bne.n	80011e8 <main+0x40>
		{}	// Wait until transmission Complete
	}
	Delay(100);
 800121c:	2064      	movs	r0, #100	; 0x64
 800121e:	f000 f80b 	bl	8001238 <Delay>
	for (int i = 0; TxBuf1[i] != '\0'; i++)
 8001222:	e7de      	b.n	80011e2 <main+0x3a>
 8001224:	20000048 	.word	0x20000048
 8001228:	10624dd3 	.word	0x10624dd3
 800122c:	40010800 	.word	0x40010800
 8001230:	20000014 	.word	0x20000014
 8001234:	40004400 	.word	0x40004400

08001238 <Delay>:
* @brief  Inserts a delay time.
* @param  nTime: specifies the delay time length, in 1 ms.
* @retval None
*/
void Delay(__IO uint32_t nTime)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  TimingDelay = nTime;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a06      	ldr	r2, [pc, #24]	; (800125c <Delay+0x24>)
 8001244:	6013      	str	r3, [r2, #0]

  while(TimingDelay != 0);
 8001246:	bf00      	nop
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <Delay+0x24>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1fb      	bne.n	8001248 <Delay+0x10>
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000040 	.word	0x20000040

08001260 <TimingDelay_Decrement>:
* @brief  Decrements the TimingDelay variable.
* @param  None
* @retval None
*/
void TimingDelay_Decrement(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  if (TimingDelay != 0x00)
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <TimingDelay_Decrement+0x20>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <TimingDelay_Decrement+0x16>
  { 
    TimingDelay--;
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <TimingDelay_Decrement+0x20>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3b01      	subs	r3, #1
 8001272:	4a03      	ldr	r2, [pc, #12]	; (8001280 <TimingDelay_Decrement+0x20>)
 8001274:	6013      	str	r3, [r2, #0]
  }
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000040 	.word	0x20000040

08001284 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001288:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800128a:	e003      	b.n	8001294 <LoopCopyDataInit>

0800128c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800128e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001290:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001292:	3104      	adds	r1, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001298:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800129a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800129c:	d3f6      	bcc.n	800128c <CopyDataInit>
	ldr	r2, =_sbss
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80012a0:	e002      	b.n	80012a8 <LoopFillZerobss>

080012a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012a4:	f842 3b04 	str.w	r3, [r2], #4

080012a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80012aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012ac:	d3f9      	bcc.n	80012a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ae:	f000 f901 	bl	80014b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b2:	f000 f98f 	bl	80015d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b6:	f7ff ff77 	bl	80011a8 <main>
	bx	lr
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012bc:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80012c0:	08001708 	.word	0x08001708
	ldr	r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012c8:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 80012cc:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 80012d0:	2000005c 	.word	0x2000005c

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>

080012d6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8001322:	f7ff ff9d 	bl	8001260 <TimingDelay_Decrement>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET)
 8001330:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001334:	f7fe ff7e 	bl	8000234 <EXTI_GetITStatus>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d013      	beq.n	8001366 <EXTI15_10_IRQHandler+0x3a>
  {		
    if(BlinkSpeed == 1)
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <EXTI15_10_IRQHandler+0x40>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d103      	bne.n	8001350 <EXTI15_10_IRQHandler+0x24>
    {
      BlinkSpeed = 0;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <EXTI15_10_IRQHandler+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e006      	b.n	800135e <EXTI15_10_IRQHandler+0x32>
    }
    else
    {
      BlinkSpeed ++;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <EXTI15_10_IRQHandler+0x40>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	3301      	adds	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <EXTI15_10_IRQHandler+0x40>)
 800135c:	701a      	strb	r2, [r3, #0]
    }
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 800135e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001362:	f7fe ff8b 	bl	800027c <EXTI_ClearITPendingBit>
  }	
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000044 	.word	0x20000044

08001370 <USART2_IRQHandler>:
  * @brief  This function handles USART2_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) // 注意不是USART_FLAG_RXNE
 8001376:	f240 5125 	movw	r1, #1317	; 0x525
 800137a:	4842      	ldr	r0, [pc, #264]	; (8001484 <USART2_IRQHandler+0x114>)
 800137c:	f7ff fd0b 	bl	8000d96 <USART_GetITStatus>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d079      	beq.n	800147a <USART2_IRQHandler+0x10a>
	{
		uint8_t selMotor = 0xFF;	// The motor which be selected
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	71fb      	strb	r3, [r7, #7]
		uint16_t USART_ReceivData = 0xF0;
 800138a:	23f0      	movs	r3, #240	; 0xf0
 800138c:	80bb      	strh	r3, [r7, #4]

		USART_ReceivData = USART_ReceiveData(USART2);
 800138e:	483d      	ldr	r0, [pc, #244]	; (8001484 <USART2_IRQHandler+0x114>)
 8001390:	f7ff fcc7 	bl	8000d22 <USART_ReceiveData>
 8001394:	4603      	mov	r3, r0
 8001396:	80bb      	strh	r3, [r7, #4]

//		USART_Send(USART2, USART_ReceivData);
		USART_Send(USART2, "STM32:OK. ");
 8001398:	493b      	ldr	r1, [pc, #236]	; (8001488 <USART2_IRQHandler+0x118>)
 800139a:	483a      	ldr	r0, [pc, #232]	; (8001484 <USART2_IRQHandler+0x114>)
 800139c:	f7ff fe92 	bl	80010c4 <USART_Send>

		if(nInst == 0)
 80013a0:	4b3a      	ldr	r3, [pc, #232]	; (800148c <USART2_IRQHandler+0x11c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d132      	bne.n	800140e <USART2_IRQHandler+0x9e>
			if(USART_ReceivData == 0xE0)				// System stop
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	2be0      	cmp	r3, #224	; 0xe0
 80013ac:	d104      	bne.n	80013b8 <USART2_IRQHandler+0x48>
			{
				USART_Send(USART2, "[System]Stop.\n");
 80013ae:	4938      	ldr	r1, [pc, #224]	; (8001490 <USART2_IRQHandler+0x120>)
 80013b0:	4834      	ldr	r0, [pc, #208]	; (8001484 <USART2_IRQHandler+0x114>)
 80013b2:	f7ff fe87 	bl	80010c4 <USART_Send>
			}
		}
		/* NO need to clears the USARTx's interrupt pending bits */
		/* USART_ClearITPendingBit(USART2,USART_IT_RXNE); */
	}
}
 80013b6:	e060      	b.n	800147a <USART2_IRQHandler+0x10a>
			else if(USART_ReceivData == 0xE1)			// System reset
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	2be1      	cmp	r3, #225	; 0xe1
 80013bc:	d104      	bne.n	80013c8 <USART2_IRQHandler+0x58>
				USART_Send(USART2, "[System]Reset.\n");
 80013be:	4935      	ldr	r1, [pc, #212]	; (8001494 <USART2_IRQHandler+0x124>)
 80013c0:	4830      	ldr	r0, [pc, #192]	; (8001484 <USART2_IRQHandler+0x114>)
 80013c2:	f7ff fe7f 	bl	80010c4 <USART_Send>
}
 80013c6:	e058      	b.n	800147a <USART2_IRQHandler+0x10a>
			else if((USART_ReceivData & 0xE0) == 0x20)	// Instruction start
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80013ce:	2b20      	cmp	r3, #32
 80013d0:	d115      	bne.n	80013fe <USART2_IRQHandler+0x8e>
				selMotor = ((USART_ReceivData & 0x18) >> 3);	// Select motor
 80013d2:	88bb      	ldrh	r3, [r7, #4]
 80013d4:	10db      	asrs	r3, r3, #3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	71fb      	strb	r3, [r7, #7]
				while(nInst != (USART_ReceivData & 0x07))
 80013de:	e005      	b.n	80013ec <USART2_IRQHandler+0x7c>
					nInst = (USART_ReceivData & 0x07);	// Set instruction number
 80013e0:	88bb      	ldrh	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <USART2_IRQHandler+0x11c>)
 80013ea:	801a      	strh	r2, [r3, #0]
				while(nInst != (USART_ReceivData & 0x07))
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <USART2_IRQHandler+0x11c>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d1f1      	bne.n	80013e0 <USART2_IRQHandler+0x70>
}
 80013fc:	e03d      	b.n	800147a <USART2_IRQHandler+0x10a>
			else if(USART_ReceivData == 0xF0)
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	2bf0      	cmp	r3, #240	; 0xf0
 8001402:	d03a      	beq.n	800147a <USART2_IRQHandler+0x10a>
				USART_Send(USART2, "[Error]Unknown instruction.\n");
 8001404:	4924      	ldr	r1, [pc, #144]	; (8001498 <USART2_IRQHandler+0x128>)
 8001406:	481f      	ldr	r0, [pc, #124]	; (8001484 <USART2_IRQHandler+0x114>)
 8001408:	f7ff fe5c 	bl	80010c4 <USART_Send>
}
 800140c:	e035      	b.n	800147a <USART2_IRQHandler+0x10a>
			--nInst;
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <USART2_IRQHandler+0x11c>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	3b01      	subs	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <USART2_IRQHandler+0x11c>)
 8001418:	801a      	strh	r2, [r3, #0]
			if(((USART_ReceivData & 0x80) >> 7) == 0x01)	// Set motor speed
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <USART2_IRQHandler+0xbe>
				USART_Send(USART2, "[Motor]Set speed.\n");
 8001424:	491d      	ldr	r1, [pc, #116]	; (800149c <USART2_IRQHandler+0x12c>)
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <USART2_IRQHandler+0x114>)
 8001428:	f7ff fe4c 	bl	80010c4 <USART_Send>
 800142c:	e01b      	b.n	8001466 <USART2_IRQHandler+0xf6>
				if(((USART_ReceivData & 0x40) >> 6) == 0x01) 	// Motor enable
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <USART2_IRQHandler+0xd2>
					USART_Send(USART2, "[Motor]Enable.\n");
 8001438:	4919      	ldr	r1, [pc, #100]	; (80014a0 <USART2_IRQHandler+0x130>)
 800143a:	4812      	ldr	r0, [pc, #72]	; (8001484 <USART2_IRQHandler+0x114>)
 800143c:	f7ff fe42 	bl	80010c4 <USART_Send>
 8001440:	e003      	b.n	800144a <USART2_IRQHandler+0xda>
					USART_Send(USART2, "[Motor]Disable.\n");
 8001442:	4918      	ldr	r1, [pc, #96]	; (80014a4 <USART2_IRQHandler+0x134>)
 8001444:	480f      	ldr	r0, [pc, #60]	; (8001484 <USART2_IRQHandler+0x114>)
 8001446:	f7ff fe3d 	bl	80010c4 <USART_Send>
				if(((USART_ReceivData & 0x20) >> 5) == 0x01) 	// Motor direction:CCW
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <USART2_IRQHandler+0xee>
					USART_Send(USART2, "[Motor]Direction:CCW.\n");
 8001454:	4914      	ldr	r1, [pc, #80]	; (80014a8 <USART2_IRQHandler+0x138>)
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <USART2_IRQHandler+0x114>)
 8001458:	f7ff fe34 	bl	80010c4 <USART_Send>
 800145c:	e003      	b.n	8001466 <USART2_IRQHandler+0xf6>
					USART_Send(USART2, "[Motor]Direction:CW.\n");
 800145e:	4913      	ldr	r1, [pc, #76]	; (80014ac <USART2_IRQHandler+0x13c>)
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <USART2_IRQHandler+0x114>)
 8001462:	f7ff fe2f 	bl	80010c4 <USART_Send>
			if(nInst == 0)
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <USART2_IRQHandler+0x11c>)
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d105      	bne.n	800147a <USART2_IRQHandler+0x10a>
				selMotor = 0xFF;	// Deselect motor
 800146e:	23ff      	movs	r3, #255	; 0xff
 8001470:	71fb      	strb	r3, [r7, #7]
				USART_Send(USART2, "[Motor]Control done.\n");
 8001472:	490f      	ldr	r1, [pc, #60]	; (80014b0 <USART2_IRQHandler+0x140>)
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <USART2_IRQHandler+0x114>)
 8001476:	f7ff fe25 	bl	80010c4 <USART_Send>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40004400 	.word	0x40004400
 8001488:	08001634 	.word	0x08001634
 800148c:	20000046 	.word	0x20000046
 8001490:	08001640 	.word	0x08001640
 8001494:	08001650 	.word	0x08001650
 8001498:	08001660 	.word	0x08001660
 800149c:	08001680 	.word	0x08001680
 80014a0:	08001694 	.word	0x08001694
 80014a4:	080016a4 	.word	0x080016a4
 80014a8:	080016b8 	.word	0x080016b8
 80014ac:	080016d0 	.word	0x080016d0
 80014b0:	080016e8 	.word	0x080016e8

080014b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <SystemInit+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <SystemInit+0x5c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6013      	str	r3, [r2, #0]

  /* Reset SW,SWS, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80014c4:	4912      	ldr	r1, [pc, #72]	; (8001510 <SystemInit+0x5c>)
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SystemInit+0x5c>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <SystemInit+0x60>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <SystemInit+0x5c>)
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <SystemInit+0x5c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <SystemInit+0x5c>)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <SystemInit+0x5c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <SystemInit+0x5c>)
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <SystemInit+0x5c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014f6:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SystemInit+0x5c>)
 80014fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014fe:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001500:	f000 f80c 	bl	800151c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SystemInit+0x64>)
 8001506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150a:	609a      	str	r2, [r3, #8]
#endif 
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000
 8001514:	f8ff0000 	.word	0xf8ff0000
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <SetSysClock>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
  
 #ifdef PLL_SOURCE_HSI  
  /* At this stage the HSI is already enabled */
  
  /*  PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL));
 800152a:	4a28      	ldr	r2, [pc, #160]	; (80015cc <SetSysClock+0xb0>)
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <SetSysClock+0xb0>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001534:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLMULL16);
 8001536:	4a25      	ldr	r2, [pc, #148]	; (80015cc <SetSysClock+0xb0>)
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <SetSysClock+0xb0>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8001540:	6053      	str	r3, [r2, #4]
  }
  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001542:	4a23      	ldr	r2, [pc, #140]	; (80015d0 <SetSysClock+0xb4>)
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <SetSysClock+0xb4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800154e:	4a20      	ldr	r2, [pc, #128]	; (80015d0 <SetSysClock+0xb4>)
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <SetSysClock+0xb4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800155a:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <SetSysClock+0xb4>)
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <SetSysClock+0xb4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001566:	4a19      	ldr	r2, [pc, #100]	; (80015cc <SetSysClock+0xb0>)
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <SetSysClock+0xb0>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800156e:	4a17      	ldr	r2, [pc, #92]	; (80015cc <SetSysClock+0xb0>)
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <SetSysClock+0xb0>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <SetSysClock+0xb0>)
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <SetSysClock+0xb0>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001580:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <SetSysClock+0xb0>)
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <SetSysClock+0xb0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800158c:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800158e:	bf00      	nop
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <SetSysClock+0xb0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f9      	beq.n	8001590 <SetSysClock+0x74>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <SetSysClock+0xb0>)
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <SetSysClock+0xb0>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f023 0303 	bic.w	r3, r3, #3
 80015a6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <SetSysClock+0xb0>)
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <SetSysClock+0xb0>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80015b4:	bf00      	nop
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SetSysClock+0xb0>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d1f9      	bne.n	80015b6 <SetSysClock+0x9a>
    {
    }
  }
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40022000 	.word	0x40022000

080015d4 <__libc_init_array>:
 80015d4:	b570      	push	{r4, r5, r6, lr}
 80015d6:	2500      	movs	r5, #0
 80015d8:	4e0c      	ldr	r6, [pc, #48]	; (800160c <__libc_init_array+0x38>)
 80015da:	4c0d      	ldr	r4, [pc, #52]	; (8001610 <__libc_init_array+0x3c>)
 80015dc:	1ba4      	subs	r4, r4, r6
 80015de:	10a4      	asrs	r4, r4, #2
 80015e0:	42a5      	cmp	r5, r4
 80015e2:	d109      	bne.n	80015f8 <__libc_init_array+0x24>
 80015e4:	f000 f81a 	bl	800161c <_init>
 80015e8:	2500      	movs	r5, #0
 80015ea:	4e0a      	ldr	r6, [pc, #40]	; (8001614 <__libc_init_array+0x40>)
 80015ec:	4c0a      	ldr	r4, [pc, #40]	; (8001618 <__libc_init_array+0x44>)
 80015ee:	1ba4      	subs	r4, r4, r6
 80015f0:	10a4      	asrs	r4, r4, #2
 80015f2:	42a5      	cmp	r5, r4
 80015f4:	d105      	bne.n	8001602 <__libc_init_array+0x2e>
 80015f6:	bd70      	pop	{r4, r5, r6, pc}
 80015f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015fc:	4798      	blx	r3
 80015fe:	3501      	adds	r5, #1
 8001600:	e7ee      	b.n	80015e0 <__libc_init_array+0xc>
 8001602:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001606:	4798      	blx	r3
 8001608:	3501      	adds	r5, #1
 800160a:	e7f2      	b.n	80015f2 <__libc_init_array+0x1e>
 800160c:	08001700 	.word	0x08001700
 8001610:	08001700 	.word	0x08001700
 8001614:	08001700 	.word	0x08001700
 8001618:	08001704 	.word	0x08001704

0800161c <_init>:
 800161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161e:	bf00      	nop
 8001620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001622:	bc08      	pop	{r3}
 8001624:	469e      	mov	lr, r3
 8001626:	4770      	bx	lr

08001628 <_fini>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	bf00      	nop
 800162c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162e:	bc08      	pop	{r3}
 8001630:	469e      	mov	lr, r3
 8001632:	4770      	bx	lr
