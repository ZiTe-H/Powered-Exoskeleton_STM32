
PoweredExoskeleton-01_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001524  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800175c  0800175c  0001175c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000000  08001764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000038  0800179c  00020038  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000070  0800179c  00020070  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005993  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012f5  00000000  00000000  000259f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000818  00000000  00000000  00026cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000798  00000000  00000000  00027508  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000247d  00000000  00000000  00027ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000023ad  00000000  00000000  0002a11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002c4ca  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002180  00000000  00000000  0002c548  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08001618 	.word	0x08001618

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08001618 	.word	0x08001618

0800014c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <NVIC_PriorityGroupConfig+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800015c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000160:	60d3      	str	r3, [r2, #12]
}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	e000ed00 	.word	0xe000ed00

08000170 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000178:	2300      	movs	r3, #0
 800017a:	617b      	str	r3, [r7, #20]
 800017c:	2300      	movs	r3, #0
 800017e:	613b      	str	r3, [r7, #16]
 8000180:	230f      	movs	r3, #15
 8000182:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	78db      	ldrb	r3, [r3, #3]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d03a      	beq.n	8000202 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800018c:	4b27      	ldr	r3, [pc, #156]	; (800022c <NVIC_Init+0xbc>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	43db      	mvns	r3, r3
 8000192:	0a1b      	lsrs	r3, r3, #8
 8000194:	f003 0307 	and.w	r3, r3, #7
 8000198:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	f1c3 0304 	rsb	r3, r3, #4
 80001a0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80001a2:	68fa      	ldr	r2, [r7, #12]
 80001a4:	697b      	ldr	r3, [r7, #20]
 80001a6:	fa22 f303 	lsr.w	r3, r2, r3
 80001aa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	461a      	mov	r2, r3
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	fa02 f303 	lsl.w	r3, r2, r3
 80001b8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	789b      	ldrb	r3, [r3, #2]
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4013      	ands	r3, r2
 80001c4:	697a      	ldr	r2, [r7, #20]
 80001c6:	4313      	orrs	r3, r2
 80001c8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <NVIC_Init+0xc0>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	6979      	ldr	r1, [r7, #20]
 80001d8:	b2c9      	uxtb	r1, r1
 80001da:	4413      	add	r3, r2
 80001dc:	460a      	mov	r2, r1
 80001de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e2:	4a13      	ldr	r2, [pc, #76]	; (8000230 <NVIC_Init+0xc0>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	095b      	lsrs	r3, r3, #5
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	f003 031f 	and.w	r3, r3, #31
 80001f6:	2101      	movs	r1, #1
 80001f8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000200:	e00f      	b.n	8000222 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000202:	490b      	ldr	r1, [pc, #44]	; (8000230 <NVIC_Init+0xc0>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	095b      	lsrs	r3, r3, #5
 800020a:	b2db      	uxtb	r3, r3
 800020c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	f003 031f 	and.w	r3, r3, #31
 8000216:	2201      	movs	r2, #1
 8000218:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800021a:	f100 0320 	add.w	r3, r0, #32
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000222:	bf00      	nop
 8000224:	371c      	adds	r7, #28
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	e000ed00 	.word	0xe000ed00
 8000230:	e000e100 	.word	0xe000e100

08000234 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4013      	ands	r3, r2
 800024c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4013      	ands	r3, r2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d005      	beq.n	8000266 <EXTI_GetITStatus+0x32>
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000260:	2301      	movs	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
 8000264:	e001      	b.n	800026a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000266:	2300      	movs	r3, #0
 8000268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010400 	.word	0x40010400

0800027c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000284:	4a03      	ldr	r2, [pc, #12]	; (8000294 <EXTI_ClearITPendingBit+0x18>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6153      	str	r3, [r2, #20]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40010400 	.word	0x40010400

08000298 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	; 0x24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	78db      	ldrb	r3, [r3, #3]
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d005      	beq.n	80002dc <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	461a      	mov	r2, r3
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	4313      	orrs	r3, r2
 80002da:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d044      	beq.n	8000370 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
 80002f0:	e038      	b.n	8000364 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80002f2:	2201      	movs	r2, #1
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4013      	ands	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000308:	693a      	ldr	r2, [r7, #16]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	429a      	cmp	r2, r3
 800030e:	d126      	bne.n	800035e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000316:	220f      	movs	r2, #15
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	43db      	mvns	r3, r3
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	4013      	ands	r3, r2
 8000328:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800032a:	69fa      	ldr	r2, [r7, #28]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	fa02 f303 	lsl.w	r3, r2, r3
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	4313      	orrs	r3, r2
 8000336:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	2b28      	cmp	r3, #40	; 0x28
 800033e:	d105      	bne.n	800034c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000340:	2201      	movs	r2, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	409a      	lsls	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	615a      	str	r2, [r3, #20]
 800034a:	e008      	b.n	800035e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	2b48      	cmp	r3, #72	; 0x48
 8000352:	d104      	bne.n	800035e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000354:	2201      	movs	r2, #1
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	409a      	lsls	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800035e:	69bb      	ldr	r3, [r7, #24]
 8000360:	3301      	adds	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
 8000364:	69bb      	ldr	r3, [r7, #24]
 8000366:	2b07      	cmp	r3, #7
 8000368:	d9c3      	bls.n	80002f2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2bff      	cmp	r3, #255	; 0xff
 8000376:	d946      	bls.n	8000406 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
 8000382:	e03a      	b.n	80003fa <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	3308      	adds	r3, #8
 8000388:	2201      	movs	r2, #1
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4013      	ands	r3, r2
 800039a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800039c:	693a      	ldr	r2, [r7, #16]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d127      	bne.n	80003f4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003aa:	220f      	movs	r2, #15
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	43db      	mvns	r3, r3
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	4013      	ands	r3, r2
 80003bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003be:	69fa      	ldr	r2, [r7, #28]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	2b28      	cmp	r3, #40	; 0x28
 80003d2:	d105      	bne.n	80003e0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	3308      	adds	r3, #8
 80003d8:	2201      	movs	r2, #1
 80003da:	409a      	lsls	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	78db      	ldrb	r3, [r3, #3]
 80003e4:	2b48      	cmp	r3, #72	; 0x48
 80003e6:	d105      	bne.n	80003f4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	3308      	adds	r3, #8
 80003ec:	2201      	movs	r2, #1
 80003ee:	409a      	lsls	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	3301      	adds	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	d9c1      	bls.n	8000384 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	605a      	str	r2, [r3, #4]
  }
}
 8000406:	bf00      	nop
 8000408:	3724      	adds	r7, #36	; 0x24
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800041e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2202      	movs	r2, #2
 8000424:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2204      	movs	r2, #4
 800042a:	70da      	strb	r2, [r3, #3]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000442:	887a      	ldrh	r2, [r7, #2]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	615a      	str	r2, [r3, #20]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <RCC_DeInit+0x54>)
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <RCC_DeInit+0x54>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000464:	4910      	ldr	r1, [pc, #64]	; (80004a8 <RCC_DeInit+0x54>)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <RCC_DeInit+0x54>)
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <RCC_DeInit+0x58>)
 800046c:	4013      	ands	r3, r2
 800046e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <RCC_DeInit+0x54>)
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <RCC_DeInit+0x54>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800047a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800047e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000480:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <RCC_DeInit+0x54>)
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <RCC_DeInit+0x54>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800048a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800048c:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <RCC_DeInit+0x54>)
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <RCC_DeInit+0x54>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000496:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <RCC_DeInit+0x54>)
 800049a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800049e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	f8ff0000 	.word	0xf8ff0000

080004b0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80004c8:	4b4c      	ldr	r3, [pc, #304]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d007      	beq.n	80004e8 <RCC_GetClocksFreq+0x38>
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d009      	beq.n	80004f0 <RCC_GetClocksFreq+0x40>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d133      	bne.n	8000548 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a47      	ldr	r2, [pc, #284]	; (8000600 <RCC_GetClocksFreq+0x150>)
 80004e4:	601a      	str	r2, [r3, #0]
      break;
 80004e6:	e033      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a45      	ldr	r2, [pc, #276]	; (8000600 <RCC_GetClocksFreq+0x150>)
 80004ec:	601a      	str	r2, [r3, #0]
      break;
 80004ee:	e02f      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80004f0:	4b42      	ldr	r3, [pc, #264]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004f8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000502:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	0c9b      	lsrs	r3, r3, #18
 8000508:	3302      	adds	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d106      	bne.n	8000520 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	4a3b      	ldr	r2, [pc, #236]	; (8000604 <RCC_GetClocksFreq+0x154>)
 8000516:	fb02 f203 	mul.w	r2, r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800051e:	e017      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000520:	4b36      	ldr	r3, [pc, #216]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d006      	beq.n	800053a <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	4a35      	ldr	r2, [pc, #212]	; (8000604 <RCC_GetClocksFreq+0x154>)
 8000530:	fb02 f203 	mul.w	r2, r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
      break;
 8000538:	e00a      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4a30      	ldr	r2, [pc, #192]	; (8000600 <RCC_GetClocksFreq+0x150>)
 800053e:	fb02 f203 	mul.w	r2, r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
      break;
 8000546:	e003      	b.n	8000550 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <RCC_GetClocksFreq+0x150>)
 800054c:	601a      	str	r2, [r3, #0]
      break;
 800054e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000558:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <RCC_GetClocksFreq+0x158>)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	40da      	lsrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000580:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000588:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <RCC_GetClocksFreq+0x158>)
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	40da      	lsrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005a8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	0adb      	lsrs	r3, r3, #11
 80005ae:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <RCC_GetClocksFreq+0x158>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	0b9b      	lsrs	r3, r3, #14
 80005d6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <RCC_GetClocksFreq+0x15c>)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	007a1200 	.word	0x007a1200
 8000604:	003d0900 	.word	0x003d0900
 8000608:	20000000 	.word	0x20000000
 800060c:	20000010 	.word	0x20000010

08000610 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000622:	4909      	ldr	r1, [pc, #36]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800062e:	e006      	b.n	800063e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000630:	4905      	ldr	r1, [pc, #20]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	43db      	mvns	r3, r3
 800063a:	4013      	ands	r3, r2
 800063c:	618b      	str	r3, [r1, #24]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800065e:	4909      	ldr	r1, [pc, #36]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000662:	69da      	ldr	r2, [r3, #28]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4313      	orrs	r3, r2
 8000668:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800066a:	e006      	b.n	800067a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800066c:	4905      	ldr	r1, [pc, #20]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000670:	69da      	ldr	r2, [r3, #28]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	43db      	mvns	r3, r3
 8000676:	4013      	ands	r3, r2
 8000678:	61cb      	str	r3, [r1, #28]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	887a      	ldrh	r2, [r7, #2]
 8000698:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	8a1b      	ldrh	r3, [r3, #16]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80006ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006d0:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80006d4:	4013      	ands	r3, r2
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	88db      	ldrh	r3, [r3, #6]
 80006dc:	461a      	mov	r2, r3
 80006de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e0:	4313      	orrs	r3, r2
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80006e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	899b      	ldrh	r3, [r3, #12]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80006f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80006fa:	4013      	ands	r3, r2
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	889a      	ldrh	r2, [r3, #4]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	891b      	ldrh	r3, [r3, #8]
 8000706:	4313      	orrs	r3, r2
 8000708:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800070e:	4313      	orrs	r3, r2
 8000710:	b29b      	uxth	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000716:	4313      	orrs	r3, r2
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071c:	b29a      	uxth	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	8a9b      	ldrh	r3, [r3, #20]
 8000726:	b29b      	uxth	r3, r3
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800072a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800072c:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000730:	4013      	ands	r3, r2
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	899b      	ldrh	r3, [r3, #12]
 8000738:	461a      	mov	r2, r3
 800073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073c:	4313      	orrs	r3, r2
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000742:	b29a      	uxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff feaf 	bl	80004b0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <USART_Init+0x16c>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d102      	bne.n	8000760 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
 800075e:	e001      	b.n	8000764 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	899b      	ldrh	r3, [r3, #12]
 8000768:	b29b      	uxth	r3, r3
 800076a:	b21b      	sxth	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	da0c      	bge.n	800078a <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	009a      	lsls	r2, r3, #2
 800077a:	441a      	add	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fbb2 f3f3 	udiv	r3, r2, r3
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
 8000788:	e00b      	b.n	80007a2 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800078a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	009a      	lsls	r2, r3, #2
 8000794:	441a      	add	r2, r3
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80007a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <USART_Init+0x170>)
 80007a6:	fba2 2303 	umull	r2, r3, r2, r3
 80007aa:	095b      	lsrs	r3, r3, #5
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80007b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b2:	091b      	lsrs	r3, r3, #4
 80007b4:	2264      	movs	r2, #100	; 0x64
 80007b6:	fb02 f303 	mul.w	r3, r2, r3
 80007ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	899b      	ldrh	r3, [r3, #12]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	da0c      	bge.n	80007e6 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007cc:	6a3b      	ldr	r3, [r7, #32]
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	3332      	adds	r3, #50	; 0x32
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <USART_Init+0x170>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	095b      	lsrs	r3, r3, #5
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007e0:	4313      	orrs	r3, r2
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007e4:	e00b      	b.n	80007fe <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	3332      	adds	r3, #50	; 0x32
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <USART_Init+0x170>)
 80007ee:	fba2 2303 	umull	r2, r3, r2, r3
 80007f2:	095b      	lsrs	r3, r3, #5
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007fa:	4313      	orrs	r3, r2
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	b29a      	uxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	811a      	strh	r2, [r3, #8]
}
 8000806:	bf00      	nop
 8000808:	3730      	adds	r7, #48	; 0x30
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40013800 	.word	0x40013800
 8000814:	51eb851f 	.word	0x51eb851f

08000818 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000826:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	220c      	movs	r2, #12
 800083e:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	819a      	strh	r2, [r3, #12]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d008      	beq.n	8000874 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	899b      	ldrh	r3, [r3, #12]
 8000866:	b29b      	uxth	r3, r3
 8000868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000872:	e007      	b.n	8000884 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	899b      	ldrh	r3, [r3, #12]
 8000878:	b29b      	uxth	r3, r3
 800087a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800087e:	b29a      	uxth	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	819a      	strh	r2, [r3, #12]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800088e:	b480      	push	{r7}
 8000890:	b087      	sub	sp, #28
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	460b      	mov	r3, r1
 8000898:	807b      	strh	r3, [r7, #2]
 800089a:	4613      	mov	r3, r2
 800089c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	f003 031f 	and.w	r3, r3, #31
 80008c2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80008c4:	2201      	movs	r2, #1
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d103      	bne.n	80008dc <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	330c      	adds	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	e009      	b.n	80008f0 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d103      	bne.n	80008ea <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3310      	adds	r3, #16
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e002      	b.n	80008f0 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	3314      	adds	r3, #20
 80008ee:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80008f0:	787b      	ldrb	r3, [r7, #1]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d006      	beq.n	8000904 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	6811      	ldr	r1, [r2, #0]
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	430a      	orrs	r2, r1
 8000900:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000902:	e006      	b.n	8000912 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	6811      	ldr	r1, [r2, #0]
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	43d2      	mvns	r2, r2
 800090e:	400a      	ands	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000928:	887b      	ldrh	r3, [r7, #2]
 800092a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800092e:	b29a      	uxth	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	809a      	strh	r2, [r3, #4]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	889b      	ldrh	r3, [r3, #4]
 800094a:	b29b      	uxth	r3, r3
 800094c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000950:	b29b      	uxth	r3, r3
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	b29a      	uxth	r2, r3
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	4013      	ands	r3, r2
 8000976:	b29b      	uxth	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800097c:	2301      	movs	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	e001      	b.n	8000986 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000986:	7bfb      	ldrb	r3, [r7, #15]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	43db      	mvns	r3, r3
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	801a      	strh	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b087      	sub	sp, #28
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80009ce:	887b      	ldrh	r3, [r7, #2]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	f003 031f 	and.w	r3, r3, #31
 80009de:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80009e0:	2201      	movs	r2, #1
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d107      	bne.n	8000a00 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	899b      	ldrh	r3, [r3, #12]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	461a      	mov	r2, r3
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	4013      	ands	r3, r2
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e011      	b.n	8000a24 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d107      	bne.n	8000a16 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	8a1b      	ldrh	r3, [r3, #16]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	4013      	ands	r3, r2
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	e006      	b.n	8000a24 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	8a9b      	ldrh	r3, [r3, #20]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	4013      	ands	r3, r2
 8000a22:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d005      	beq.n	8000a56 <USART_GetITStatus+0xa4>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000a50:	2301      	movs	r3, #1
 8000a52:	74fb      	strb	r3, [r7, #19]
 8000a54:	e001      	b.n	8000a5a <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
	...

08000a68 <GPIO_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void GPIO_Initialization(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_StructInit(&GPIO_InitStructure);	// Fills each GPIO_InitStruct member with its default value
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fccd 	bl	8000410 <GPIO_StructInit>

	/* Configure the GPIO pin */
	/* user */
	// PA5: LED-user
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000a76:	2320      	movs	r3, #32
 8000a78:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4842      	ldr	r0, [pc, #264]	; (8000b90 <GPIO_Initialization+0x128>)
 8000a88:	f7ff fc06 	bl	8000298 <GPIO_Init>

	// PC13: Button-user
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000a92:	2304      	movs	r3, #4
 8000a94:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000a96:	2302      	movs	r3, #2
 8000a98:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	483d      	ldr	r0, [pc, #244]	; (8000b94 <GPIO_Initialization+0x12c>)
 8000aa0:	f7ff fbfa 	bl	8000298 <GPIO_Init>


	/* USART */
	// PA2: USART2_TX
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000aa8:	2318      	movs	r3, #24
 8000aaa:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000aac:	2303      	movs	r3, #3
 8000aae:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4836      	ldr	r0, [pc, #216]	; (8000b90 <GPIO_Initialization+0x128>)
 8000ab6:	f7ff fbef 	bl	8000298 <GPIO_Init>

	// PA3: USART2_RX
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000aba:	2308      	movs	r3, #8
 8000abc:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4831      	ldr	r0, [pc, #196]	; (8000b90 <GPIO_Initialization+0x128>)
 8000acc:	f7ff fbe4 	bl	8000298 <GPIO_Init>


	/* Motor0 */
	// PB5: Motor0_Enbale
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	482d      	ldr	r0, [pc, #180]	; (8000b98 <GPIO_Initialization+0x130>)
 8000ae2:	f7ff fbd9 	bl	8000298 <GPIO_Init>

	// PB4: Motor0-Direction
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8000ae6:	2310      	movs	r3, #16
 8000ae8:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000aea:	2310      	movs	r3, #16
 8000aec:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000aee:	2302      	movs	r3, #2
 8000af0:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	4828      	ldr	r0, [pc, #160]	; (8000b98 <GPIO_Initialization+0x130>)
 8000af8:	f7ff fbce 	bl	8000298 <GPIO_Init>

	// PB10: Motor0-Speed(PWM, TIM2_CH3)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b00:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000b02:	2318      	movs	r3, #24
 8000b04:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b06:	2303      	movs	r3, #3
 8000b08:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4822      	ldr	r0, [pc, #136]	; (8000b98 <GPIO_Initialization+0x130>)
 8000b10:	f7ff fbc2 	bl	8000298 <GPIO_Init>

	// PB3: Motor0-Ready
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000b14:	2308      	movs	r3, #8
 8000b16:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	481c      	ldr	r0, [pc, #112]	; (8000b98 <GPIO_Initialization+0x130>)
 8000b26:	f7ff fbb7 	bl	8000298 <GPIO_Init>

	/* Motor1 */
	// PA8: Motor1_Enbale
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2e:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b30:	2310      	movs	r3, #16
 8000b32:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b34:	2302      	movs	r3, #2
 8000b36:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <GPIO_Initialization+0x128>)
 8000b3e:	f7ff fbab 	bl	8000298 <GPIO_Init>

	// PA9: Motor1-Direction
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	480e      	ldr	r0, [pc, #56]	; (8000b90 <GPIO_Initialization+0x128>)
 8000b56:	f7ff fb9f 	bl	8000298 <GPIO_Init>

	// PC7: Motor1-Speed(PWM, TIM3_CH2)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000b5e:	2318      	movs	r3, #24
 8000b60:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b62:	2303      	movs	r3, #3
 8000b64:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480a      	ldr	r0, [pc, #40]	; (8000b94 <GPIO_Initialization+0x12c>)
 8000b6c:	f7ff fb94 	bl	8000298 <GPIO_Init>

	// PB6: Motor1-Ready
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000b70:	2340      	movs	r3, #64	; 0x40
 8000b72:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000b74:	2304      	movs	r3, #4
 8000b76:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <GPIO_Initialization+0x130>)
 8000b82:	f7ff fb89 	bl	8000298 <GPIO_Init>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40011000 	.word	0x40011000
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <PinSet>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval None
  */
void PinSet(u8 PortPin)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	if(PortPin <= 15)								// Port-A:  0~15
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d809      	bhi.n	8000bc0 <PinSet+0x24>
		GPIOA->BSRR |= (0x0001 << PortPin);
 8000bac:	4922      	ldr	r1, [pc, #136]	; (8000c38 <PinSet+0x9c>)
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <PinSet+0x9c>)
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	610b      	str	r3, [r1, #16]
		GPIOD->BSRR |= (0x0001 << (PortPin - 48));
	else if(PortPin <= 79)							// Port-E: 64~79
		GPIOE->BSRR |= (0x0001 << (PortPin - 64));
	else											// Out of range(0~79)
		/* Null */;
}
 8000bbe:	e036      	b.n	8000c2e <PinSet+0x92>
	else if(PortPin <= 31)							// Port-B: 16~31
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b1f      	cmp	r3, #31
 8000bc4:	d80a      	bhi.n	8000bdc <PinSet+0x40>
		GPIOB->BSRR |= (0x0001 << (PortPin - 16));
 8000bc6:	491d      	ldr	r1, [pc, #116]	; (8000c3c <PinSet+0xa0>)
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <PinSet+0xa0>)
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	79fa      	ldrb	r2, [r7, #7]
 8000bce:	3a10      	subs	r2, #16
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	610b      	str	r3, [r1, #16]
}
 8000bda:	e028      	b.n	8000c2e <PinSet+0x92>
	else if(PortPin <= 47)							// Port-C: 32~47
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b2f      	cmp	r3, #47	; 0x2f
 8000be0:	d80a      	bhi.n	8000bf8 <PinSet+0x5c>
		GPIOC->BSRR |= (0x0001 << (PortPin - 32));
 8000be2:	4917      	ldr	r1, [pc, #92]	; (8000c40 <PinSet+0xa4>)
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <PinSet+0xa4>)
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	3a20      	subs	r2, #32
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	610b      	str	r3, [r1, #16]
}
 8000bf6:	e01a      	b.n	8000c2e <PinSet+0x92>
	else if(PortPin <= 63)							// Port-D: 48~63
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfc:	d80a      	bhi.n	8000c14 <PinSet+0x78>
		GPIOD->BSRR |= (0x0001 << (PortPin - 48));
 8000bfe:	4911      	ldr	r1, [pc, #68]	; (8000c44 <PinSet+0xa8>)
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <PinSet+0xa8>)
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	3a30      	subs	r2, #48	; 0x30
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	610b      	str	r3, [r1, #16]
}
 8000c12:	e00c      	b.n	8000c2e <PinSet+0x92>
	else if(PortPin <= 79)							// Port-E: 64~79
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b4f      	cmp	r3, #79	; 0x4f
 8000c18:	d809      	bhi.n	8000c2e <PinSet+0x92>
		GPIOE->BSRR |= (0x0001 << (PortPin - 64));
 8000c1a:	490b      	ldr	r1, [pc, #44]	; (8000c48 <PinSet+0xac>)
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <PinSet+0xac>)
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	3a40      	subs	r2, #64	; 0x40
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	610b      	str	r3, [r1, #16]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40011000 	.word	0x40011000
 8000c44:	40011400 	.word	0x40011400
 8000c48:	40011800 	.word	0x40011800

08000c4c <PinClr>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval None
  */
void PinClr(u8 PortPin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	if(PortPin <= 15)								// Port-A:  0~15
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d809      	bhi.n	8000c70 <PinClr+0x24>
		GPIOA->BRR |= (0x0001 << PortPin);
 8000c5c:	4922      	ldr	r1, [pc, #136]	; (8000ce8 <PinClr+0x9c>)
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <PinClr+0x9c>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	614b      	str	r3, [r1, #20]
		GPIOD->BRR |= (0x0001 << (PortPin - 48));
	else if(PortPin <= 79)							// Port-E: 64~79
		GPIOE->BRR |= (0x0001 << (PortPin - 64));
	else											// Out of range(0~79)
		/* Null */;
}
 8000c6e:	e036      	b.n	8000cde <PinClr+0x92>
	else if(PortPin <= 31)							// Port-B: 16~31
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b1f      	cmp	r3, #31
 8000c74:	d80a      	bhi.n	8000c8c <PinClr+0x40>
		GPIOB->BRR |= (0x0001 << (PortPin - 16));
 8000c76:	491d      	ldr	r1, [pc, #116]	; (8000cec <PinClr+0xa0>)
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <PinClr+0xa0>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	79fa      	ldrb	r2, [r7, #7]
 8000c7e:	3a10      	subs	r2, #16
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	4313      	orrs	r3, r2
 8000c88:	614b      	str	r3, [r1, #20]
}
 8000c8a:	e028      	b.n	8000cde <PinClr+0x92>
	else if(PortPin <= 47)							// Port-C: 32~47
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c90:	d80a      	bhi.n	8000ca8 <PinClr+0x5c>
		GPIOC->BRR |= (0x0001 << (PortPin - 32));
 8000c92:	4917      	ldr	r1, [pc, #92]	; (8000cf0 <PinClr+0xa4>)
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <PinClr+0xa4>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	3a20      	subs	r2, #32
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	614b      	str	r3, [r1, #20]
}
 8000ca6:	e01a      	b.n	8000cde <PinClr+0x92>
	else if(PortPin <= 63)							// Port-D: 48~63
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b3f      	cmp	r3, #63	; 0x3f
 8000cac:	d80a      	bhi.n	8000cc4 <PinClr+0x78>
		GPIOD->BRR |= (0x0001 << (PortPin - 48));
 8000cae:	4911      	ldr	r1, [pc, #68]	; (8000cf4 <PinClr+0xa8>)
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <PinClr+0xa8>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	79fa      	ldrb	r2, [r7, #7]
 8000cb6:	3a30      	subs	r2, #48	; 0x30
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	614b      	str	r3, [r1, #20]
}
 8000cc2:	e00c      	b.n	8000cde <PinClr+0x92>
	else if(PortPin <= 79)							// Port-E: 64~79
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b4f      	cmp	r3, #79	; 0x4f
 8000cc8:	d809      	bhi.n	8000cde <PinClr+0x92>
		GPIOE->BRR |= (0x0001 << (PortPin - 64));
 8000cca:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <PinClr+0xac>)
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <PinClr+0xac>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	3a40      	subs	r2, #64	; 0x40
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	614b      	str	r3, [r1, #20]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	40011000 	.word	0x40011000
 8000cf4:	40011400 	.word	0x40011400
 8000cf8:	40011800 	.word	0x40011800

08000cfc <PinWrite>:
  * @param	Value: select High or Low to write.
  * 		This parameter should be: 1 or 0
  * @retval None
  */
void PinWrite(u8 PortPin, u8 Value)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
	if(Value == 1)
 8000d0c:	79bb      	ldrb	r3, [r7, #6]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d104      	bne.n	8000d1c <PinWrite+0x20>
		PinSet(PortPin);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff41 	bl	8000b9c <PinSet>
	else if(Value == 0)
		PinClr(PortPin);
	else
		/* Null */;
}
 8000d1a:	e006      	b.n	8000d2a <PinWrite+0x2e>
	else if(Value == 0)
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d103      	bne.n	8000d2a <PinWrite+0x2e>
		PinClr(PortPin);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff91 	bl	8000c4c <PinClr>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <PinRead>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval The input-pin value
  */
u8 PinRead(u8 PortPin)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	u8 PinInputValue;

	if(PortPin <= 15)									// Port-A:  0~15
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <PinRead+0x26>
		PinInputValue = (GPIOA->IDR & (0x0001 << PortPin));
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <PinRead+0xa8>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	e03a      	b.n	8000dd0 <PinRead+0x9c>
	else if(PortPin <= 31)								// Port-B: 16~31
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	2b1f      	cmp	r3, #31
 8000d5e:	d80b      	bhi.n	8000d78 <PinRead+0x44>
		PinInputValue = (GPIOB->IDR & (0x0001 << (PortPin - 16)));
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <PinRead+0xac>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	3b10      	subs	r3, #16
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4013      	ands	r3, r2
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	e02b      	b.n	8000dd0 <PinRead+0x9c>
	else if(PortPin <= 47)								// Port-C: 32~47
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b2f      	cmp	r3, #47	; 0x2f
 8000d7c:	d80b      	bhi.n	8000d96 <PinRead+0x62>
		PinInputValue = (GPIOC->IDR & (0x0001 << (PortPin - 32)));
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <PinRead+0xb0>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	3b20      	subs	r3, #32
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4013      	ands	r3, r2
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	e01c      	b.n	8000dd0 <PinRead+0x9c>
	else if(PortPin <= 63)								// Port-D: 48~63
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b3f      	cmp	r3, #63	; 0x3f
 8000d9a:	d80b      	bhi.n	8000db4 <PinRead+0x80>
		PinInputValue = (GPIOD->IDR & (0x0001 << (PortPin - 48)));
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <PinRead+0xb4>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	2101      	movs	r1, #1
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	4013      	ands	r3, r2
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e00d      	b.n	8000dd0 <PinRead+0x9c>
	else if(PortPin <= 79)								// Port-E: 64~79
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b4f      	cmp	r3, #79	; 0x4f
 8000db8:	d80a      	bhi.n	8000dd0 <PinRead+0x9c>
		PinInputValue = (GPIOE->IDR & (0x0001 << (PortPin - 64)));
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <PinRead+0xb8>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	3b40      	subs	r3, #64	; 0x40
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	73fb      	strb	r3, [r7, #15]
	else												// Out of range(0~79)
		/* Null */;

	return PinInputValue;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	40010c00 	.word	0x40010c00
 8000de4:	40011000 	.word	0x40011000
 8000de8:	40011400 	.word	0x40011400
 8000dec:	40011800 	.word	0x40011800

08000df0 <NVIC_Initialization>:
  * @brief  Initialize NVIC.
  * @param  None
  * @retval None
  */
void NVIC_Initialization(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;	// Structure Declarations

	/* Configures the priority grouping */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 8000df6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000dfa:	f7ff f9a7 	bl	800014c <NVIC_PriorityGroupConfig>

	/* Configure the NVIC */
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000dfe:	2326      	movs	r3, #38	; 0x26
 8000e00:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff f9ad 	bl	8000170 <NVIC_Init>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <RCC_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run this function before any other initialization.
  */
void RCC_Initialization(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	/* Resets the RCC clock configuration to the default reset state */
	RCC_DeInit();
 8000e24:	f7ff fb16 	bl	8000454 <RCC_DeInit>

	/* RCC APB1 */
	RCC_APB1PeriphClockCmd(	RCC_APB1Periph_USART2	|
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <RCC_Initialization+0x1c>)
 8000e2c:	f7ff fc0e 	bl	800064c <RCC_APB1PeriphClockCmd>
							RCC_APB1Periph_TIM2		|	// PWM:Motor0-Speed
							RCC_APB1Periph_TIM3		,	// PWM:Motor1-Speed
							ENABLE);

	/* RCC APB2 */
	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA |
 8000e30:	2101      	movs	r1, #1
 8000e32:	207c      	movs	r0, #124	; 0x7c
 8000e34:	f7ff fbec 	bl	8000610 <RCC_APB2PeriphClockCmd>
							RCC_APB2Periph_GPIOB |
							RCC_APB2Periph_GPIOC |
							RCC_APB2Periph_GPIOD |
							RCC_APB2Periph_GPIOE ,
							ENABLE);
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	00020003 	.word	0x00020003

08000e40 <USART_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void USART_Initialization(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	USART_InitTypeDef USART_InitStructure;

//	USART_DeInit(USART2);
	USART_StructInit(&USART_InitStructure);	// Fills each USART_InitStruct member with its default value
 8000e46:	463b      	mov	r3, r7
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fce5 	bl	8000818 <USART_StructInit>
	 * - One Stop Bit
	 * - No parity
	 * - Hardware flow control disabled (RTS and CTS signals)
	 * - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = 9600;
 8000e4e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000e52:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000e54:	2300      	movs	r3, #0
 8000e56:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000e60:	2300      	movs	r3, #0
 8000e62:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000e64:	230c      	movs	r3, #12
 8000e66:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_InitStructure);
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480a      	ldr	r0, [pc, #40]	; (8000e98 <USART_Initialization+0x58>)
 8000e6e:	f7ff fc19 	bl	80006a4 <USART_Init>

	/* Enable "Receive data register not empty" interrupt */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f240 5125 	movw	r1, #1317	; 0x525
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <USART_Initialization+0x58>)
 8000e7a:	f7ff fd08 	bl	800088e <USART_ITConfig>

	/* Enable USART */
	USART_Cmd(USART2, ENABLE);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <USART_Initialization+0x58>)
 8000e82:	f7ff fce5 	bl	8000850 <USART_Cmd>

	/* Clear "Transmission Complete" flag, 否則第1位數據會丟失 */
	USART_ClearFlag(USART2, USART_FLAG_TC);
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <USART_Initialization+0x58>)
 8000e8a:	f7ff fd82 	bl	8000992 <USART_ClearFlag>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40004400 	.word	0x40004400

08000e9c <USART_Send>:
  *   				USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_Send(USART_TypeDef* USARTx, uint8_t* Data)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	for (int i = 0; Data[i] != '\0'; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	e013      	b.n	8000ed4 <USART_Send+0x38>
	{
		/* Transmits single data through the USARTx peripheral */
		USART_SendData(USARTx, (uint16_t)Data[i]);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fd2f 	bl	800091c <USART_SendData>

		/* Wait until transmission complete, use TC or TXE flag */
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET)
 8000ebe:	bf00      	nop
 8000ec0:	2140      	movs	r1, #64	; 0x40
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fd4a 	bl	800095c <USART_GetFlagStatus>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f8      	beq.n	8000ec0 <USART_Send+0x24>
	for (int i = 0; Data[i] != '\0'; i++)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	683a      	ldr	r2, [r7, #0]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1e5      	bne.n	8000eac <USART_Send+0x10>
		{/* Null */}
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da0b      	bge.n	8000f14 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000efc:	490d      	ldr	r1, [pc, #52]	; (8000f34 <NVIC_SetPriority+0x4c>)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	3b04      	subs	r3, #4
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000f12:	e009      	b.n	8000f28 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000f14:	4908      	ldr	r1, [pc, #32]	; (8000f38 <NVIC_SetPriority+0x50>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4a:	d301      	bcc.n	8000f50 <SysTick_Config+0x14>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e011      	b.n	8000f74 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f62:	f7ff ffc1 	bl	8000ee8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <SysTick_Config+0x40>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <main>:
 * @brief   Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	 To reconfigure the default setting of SystemInit() function, refer to
	 system_stm32f10x.c file
	 */

	/* SysTick end of count event each 1ms */
	RCC_GetClocksFreq(&RCC_Clocks);
 8000f86:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <main+0x64>)
 8000f88:	f7ff fa92 	bl	80004b0 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <main+0x64>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <main+0x68>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	099b      	lsrs	r3, r3, #6
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ffcf 	bl	8000f3c <SysTick_Config>
//  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);
	/* Initiate Blink Speed variable */
//  BlinkSpeed = 0;

	/* Initialization */
	RCC_Initialization();
 8000f9e:	f7ff ff3f 	bl	8000e20 <RCC_Initialization>
	USART_Initialization();
 8000fa2:	f7ff ff4d 	bl	8000e40 <USART_Initialization>
	GPIO_Initialization();
 8000fa6:	f7ff fd5f 	bl	8000a68 <GPIO_Initialization>
	NVIC_Initialization();
 8000faa:	f7ff ff21 	bl	8000df0 <NVIC_Initialization>
//  PWM_Initialization();	// ERROR. 會造成USART功能無法動作,假定為Timer的衝突問題。

	GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 8000fae:	2120      	movs	r1, #32
 8000fb0:	480e      	ldr	r0, [pc, #56]	; (8000fec <main+0x6c>)
 8000fb2:	f7ff fa40 	bl	8000436 <GPIO_ResetBits>

	/* Infinite loop */
	while (1)
	{
		USART_Send(USART2, TxBuf1);
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <main+0x70>)
 8000fb8:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <main+0x74>)
 8000fba:	f7ff ff6f 	bl	8000e9c <USART_Send>
		for(int i=0; i<2; i++)	// Send status of motor0&1
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	e007      	b.n	8000fd4 <main+0x54>
		{
			SendStatus(i);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f815 	bl	8000ff8 <SendStatus>
		for(int i=0; i<2; i++)	// Send status of motor0&1
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	ddf4      	ble.n	8000fc4 <main+0x44>
		}
		Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f000 f8d5 	bl	800118c <Delay>
		USART_Send(USART2, TxBuf1);
 8000fe2:	e7e8      	b.n	8000fb6 <main+0x36>
 8000fe4:	2000005c 	.word	0x2000005c
 8000fe8:	10624dd3 	.word	0x10624dd3
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	20000014 	.word	0x20000014
 8000ff4:	40004400 	.word	0x40004400

08000ff8 <SendStatus>:
* @brief  	Send status.
* @param	Motor: the number of motor. This parameter should be: 0~1.
* @retval 	None
*/
void SendStatus(uint8_t Motor)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
	uint8_t TxData;
//	uint8_t Status[] = "";

	// Binary:010nnrXX
	TxData = ((0x40 | (Motor << 3)) | (PinRead(MotorPin[Motor][2]) << 2));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	b25b      	sxtb	r3, r3
 8001008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100c:	b25c      	sxtb	r4, r3
 800100e:	79fa      	ldrb	r2, [r7, #7]
 8001010:	4917      	ldr	r1, [pc, #92]	; (8001070 <SendStatus+0x78>)
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	440b      	add	r3, r1
 800101a:	3302      	adds	r3, #2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe88 	bl	8000d34 <PinRead>
 8001024:	4603      	mov	r3, r0
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	b25b      	sxtb	r3, r3
 800102a:	4323      	orrs	r3, r4
 800102c:	b25b      	sxtb	r3, r3
 800102e:	73fb      	strb	r3, [r7, #15]
	USART_Send(USART2, TxData);
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	4619      	mov	r1, r3
 8001034:	480f      	ldr	r0, [pc, #60]	; (8001074 <SendStatus+0x7c>)
 8001036:	f7ff ff31 	bl	8000e9c <USART_Send>
//	USART_Send(USART2, "[Status]Motor%d "+Status+"\n", Motor);

	if(PinRead(MotorPin[Motor][2]) == 1)	// Motor_Ready pin=High
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	490c      	ldr	r1, [pc, #48]	; (8001070 <SendStatus+0x78>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	440b      	add	r3, r1
 8001046:	3302      	adds	r3, #2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fe72 	bl	8000d34 <PinRead>
 8001050:	4603      	mov	r3, r0
 8001052:	2b01      	cmp	r3, #1
 8001054:	d104      	bne.n	8001060 <SendStatus+0x68>
		USART_Send(USART2, "[Status]Motor Ready\n");
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <SendStatus+0x80>)
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <SendStatus+0x7c>)
 800105a:	f7ff ff1f 	bl	8000e9c <USART_Send>
//		Status = "Ready";
	else									// Motor_Ready pin=Low
		USART_Send(USART2, "[Status]Motor FAULT!\n");
//		Status = "FAULT!";
}
 800105e:	e003      	b.n	8001068 <SendStatus+0x70>
		USART_Send(USART2, "[Status]Motor FAULT!\n");
 8001060:	4906      	ldr	r1, [pc, #24]	; (800107c <SendStatus+0x84>)
 8001062:	4804      	ldr	r0, [pc, #16]	; (8001074 <SendStatus+0x7c>)
 8001064:	f7ff ff1a 	bl	8000e9c <USART_Send>
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bd90      	pop	{r4, r7, pc}
 8001070:	20000024 	.word	0x20000024
 8001074:	40004400 	.word	0x40004400
 8001078:	08001630 	.word	0x08001630
 800107c:	08001648 	.word	0x08001648

08001080 <MotorCtrl>:
* 			This parameter should be 0~2. 0: CW; 1: CCW; 2: maintain.
* @param	Speed: the speed of motor in %. This parameter should be: 0~100.
* @retval 	None
*/
void MotorCtrl(uint8_t Motor, uint8_t Status, uint8_t Direction, uint8_t Speed)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4604      	mov	r4, r0
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4623      	mov	r3, r4
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	4603      	mov	r3, r0
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	460b      	mov	r3, r1
 8001098:	717b      	strb	r3, [r7, #5]
 800109a:	4613      	mov	r3, r2
 800109c:	713b      	strb	r3, [r7, #4]
//	u16 DutyCycleValue;

	// Status
	if(Status == 1)
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10b      	bne.n	80010bc <MotorCtrl+0x3c>
	{
		PinWrite((MotorPin[Motor][0]), Enable);
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	4937      	ldr	r1, [pc, #220]	; (8001184 <MotorCtrl+0x104>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe21 	bl	8000cfc <PinWrite>
 80010ba:	e00d      	b.n	80010d8 <MotorCtrl+0x58>
	}
	else if(Status == 0)
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <MotorCtrl+0x58>
	{
		PinWrite((MotorPin[Motor][0]), Disable);
 80010c2:	79fa      	ldrb	r2, [r7, #7]
 80010c4:	492f      	ldr	r1, [pc, #188]	; (8001184 <MotorCtrl+0x104>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fe12 	bl	8000cfc <PinWrite>
	}
	else
		/*Null*/;

	// Direction
	if(Direction == 1)
 80010d8:	797b      	ldrb	r3, [r7, #5]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10c      	bne.n	80010f8 <MotorCtrl+0x78>
	{
		PinWrite((MotorPin[Motor][1]), CCW);
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	4928      	ldr	r1, [pc, #160]	; (8001184 <MotorCtrl+0x104>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	3301      	adds	r3, #1
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2101      	movs	r1, #1
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fe03 	bl	8000cfc <PinWrite>
 80010f6:	e00e      	b.n	8001116 <MotorCtrl+0x96>
	}
	else if(Direction == 0)
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10b      	bne.n	8001116 <MotorCtrl+0x96>
	{
		PinWrite((MotorPin[Motor][1]), CW);
 80010fe:	79fa      	ldrb	r2, [r7, #7]
 8001100:	4920      	ldr	r1, [pc, #128]	; (8001184 <MotorCtrl+0x104>)
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	440b      	add	r3, r1
 800110a:	3301      	adds	r3, #1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fdf3 	bl	8000cfc <PinWrite>
	}
	else
		/*Null*/;

	// Speed
	if(Speed == 0)	// OFF
 8001116:	793b      	ldrb	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10b      	bne.n	8001134 <MotorCtrl+0xb4>
	{
		PinWrite((MotorPin[Motor][0]), Disable);
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	4919      	ldr	r1, [pc, #100]	; (8001184 <MotorCtrl+0x104>)
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	440b      	add	r3, r1
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fde5 	bl	8000cfc <PinWrite>
//
//			break;
//		default:
//			break;
//	}
}
 8001132:	e022      	b.n	800117a <MotorCtrl+0xfa>
	else if(Speed == 100)
 8001134:	793b      	ldrb	r3, [r7, #4]
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d109      	bne.n	800114e <MotorCtrl+0xce>
		TIM_SetCompare1((MotorTimer[Motor]), 999);	// Set PWM duty cycle=100%
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4a12      	ldr	r2, [pc, #72]	; (8001188 <MotorCtrl+0x108>)
 800113e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001142:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fa9e 	bl	8000688 <TIM_SetCompare1>
}
 800114c:	e015      	b.n	800117a <MotorCtrl+0xfa>
	else if((Speed > 0) && (Speed < 100))
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d012      	beq.n	800117a <MotorCtrl+0xfa>
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	2b63      	cmp	r3, #99	; 0x63
 8001158:	d80f      	bhi.n	800117a <MotorCtrl+0xfa>
		TIM_SetCompare1((MotorTimer[Motor]), ((Speed-1)*10)); // Set duty cycle
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <MotorCtrl+0x108>)
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	4618      	mov	r0, r3
 8001164:	793b      	ldrb	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	b29b      	uxth	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4413      	add	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	b29b      	uxth	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fa87 	bl	8000688 <TIM_SetCompare1>
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	20000024 	.word	0x20000024
 8001188:	2000002c 	.word	0x2000002c

0800118c <Delay>:
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in 1 ms.
 * @retval None
 */
void Delay(__IO uint32_t nTime)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	TimingDelay = nTime;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <Delay+0x24>)
 8001198:	6013      	str	r3, [r2, #0]

	while (TimingDelay != 0)
 800119a:	bf00      	nop
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <Delay+0x24>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1fb      	bne.n	800119c <Delay+0x10>
		;
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000054 	.word	0x20000054

080011b4 <TimingDelay_Decrement>:
 * @brief  Decrements the TimingDelay variable.
 * @param  None
 * @retval None
 */
void TimingDelay_Decrement(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00)
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <TimingDelay_Decrement+0x20>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <TimingDelay_Decrement+0x16>
	{
		TimingDelay--;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <TimingDelay_Decrement+0x20>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <TimingDelay_Decrement+0x20>)
 80011c8:	6013      	str	r3, [r2, #0]
	}
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000054 	.word	0x20000054

080011d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011de:	e003      	b.n	80011e8 <LoopCopyDataInit>

080011e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80011e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011e6:	3104      	adds	r1, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80011ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011f0:	d3f6      	bcc.n	80011e0 <CopyDataInit>
	ldr	r2, =_sbss
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80011f4:	e002      	b.n	80011fc <LoopFillZerobss>

080011f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011f8:	f842 3b04 	str.w	r3, [r2], #4

080011fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80011fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001200:	d3f9      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001202:	f000 f955 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f000 f9e3 	bl	80015d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120a:	f7ff feb9 	bl	8000f80 <main>
	bx	lr
 800120e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001210:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001214:	08001764 	.word	0x08001764
	ldr	r0, =_sdata
 8001218:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800121c:	20000038 	.word	0x20000038
	ldr	r2, =_sbss
 8001220:	20000038 	.word	0x20000038
	ldr	r3, = _ebss
 8001224:	20000070 	.word	0x20000070

08001228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>

0800122a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8001276:	f7ff ff9d 	bl	80011b4 <TimingDelay_Decrement>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET)
 8001284:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001288:	f7fe ffd4 	bl	8000234 <EXTI_GetITStatus>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d013      	beq.n	80012ba <EXTI15_10_IRQHandler+0x3a>
  {		
    if(BlinkSpeed == 1)
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <EXTI15_10_IRQHandler+0x40>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d103      	bne.n	80012a4 <EXTI15_10_IRQHandler+0x24>
    {
      BlinkSpeed = 0;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <EXTI15_10_IRQHandler+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e006      	b.n	80012b2 <EXTI15_10_IRQHandler+0x32>
    }
    else
    {
      BlinkSpeed ++;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <EXTI15_10_IRQHandler+0x40>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <EXTI15_10_IRQHandler+0x40>)
 80012b0:	701a      	strb	r2, [r3, #0]
    }
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 80012b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012b6:	f7fe ffe1 	bl	800027c <EXTI_ClearITPendingBit>
  }	
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000058 	.word	0x20000058

080012c4 <USART2_IRQHandler>:
  * @brief  This function handles USART2_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) // 注意不是USART_FLAG_RXNE
 80012ca:	f240 5125 	movw	r1, #1317	; 0x525
 80012ce:	4868      	ldr	r0, [pc, #416]	; (8001470 <USART2_IRQHandler+0x1ac>)
 80012d0:	f7ff fb6f 	bl	80009b2 <USART_GetITStatus>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80c5 	beq.w	8001466 <USART2_IRQHandler+0x1a2>
	{
		uint16_t USART_ReceivData = 0xF0;
 80012dc:	23f0      	movs	r3, #240	; 0xf0
 80012de:	80fb      	strh	r3, [r7, #6]
//		uint8_t InstTex[] = "";

		USART_ReceivData = USART_ReceiveData(USART2);
 80012e0:	4863      	ldr	r0, [pc, #396]	; (8001470 <USART2_IRQHandler+0x1ac>)
 80012e2:	f7ff fb2c 	bl	800093e <USART_ReceiveData>
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]

//		USART_Send(USART2, USART_ReceivData);
//		USART_Send(USART2, "STM32:");

		if(nInst == 0)
 80012ea:	4b62      	ldr	r3, [pc, #392]	; (8001474 <USART2_IRQHandler+0x1b0>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d142      	bne.n	8001378 <USART2_IRQHandler+0xb4>
		{
			USART_Send(USART2, "STM32:\n");
 80012f2:	4961      	ldr	r1, [pc, #388]	; (8001478 <USART2_IRQHandler+0x1b4>)
 80012f4:	485e      	ldr	r0, [pc, #376]	; (8001470 <USART2_IRQHandler+0x1ac>)
 80012f6:	f7ff fdd1 	bl	8000e9c <USART_Send>

			if(USART_ReceivData == 0xE0)				// System stop
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	2be0      	cmp	r3, #224	; 0xe0
 80012fe:	d104      	bne.n	800130a <USART2_IRQHandler+0x46>
			{
				USART_Send(USART2, "[System]Stop.\n");
 8001300:	495e      	ldr	r1, [pc, #376]	; (800147c <USART2_IRQHandler+0x1b8>)
 8001302:	485b      	ldr	r0, [pc, #364]	; (8001470 <USART2_IRQHandler+0x1ac>)
 8001304:	f7ff fdca 	bl	8000e9c <USART_Send>
			}
		}
		/* NO need to clears the USARTx's interrupt pending bits */
		/* USART_ClearITPendingBit(USART2,USART_IT_RXNE); */
	}
}
 8001308:	e0ad      	b.n	8001466 <USART2_IRQHandler+0x1a2>
			else if(USART_ReceivData == 0xE1)			// System reset
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	2be1      	cmp	r3, #225	; 0xe1
 800130e:	d104      	bne.n	800131a <USART2_IRQHandler+0x56>
				USART_Send(USART2, "[System]Reset.\n");
 8001310:	495b      	ldr	r1, [pc, #364]	; (8001480 <USART2_IRQHandler+0x1bc>)
 8001312:	4857      	ldr	r0, [pc, #348]	; (8001470 <USART2_IRQHandler+0x1ac>)
 8001314:	f7ff fdc2 	bl	8000e9c <USART_Send>
}
 8001318:	e0a5      	b.n	8001466 <USART2_IRQHandler+0x1a2>
			else if((USART_ReceivData & 0xE0) == 0x20)	// Instruction start
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001320:	2b20      	cmp	r3, #32
 8001322:	d121      	bne.n	8001368 <USART2_IRQHandler+0xa4>
				while(selMotor != ((USART_ReceivData & 0x18) >> 3))
 8001324:	e007      	b.n	8001336 <USART2_IRQHandler+0x72>
					selMotor = ((USART_ReceivData & 0x18) >> 3);// Select motor
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	10db      	asrs	r3, r3, #3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b54      	ldr	r3, [pc, #336]	; (8001484 <USART2_IRQHandler+0x1c0>)
 8001334:	701a      	strb	r2, [r3, #0]
				while(selMotor != ((USART_ReceivData & 0x18) >> 3))
 8001336:	4b53      	ldr	r3, [pc, #332]	; (8001484 <USART2_IRQHandler+0x1c0>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	10db      	asrs	r3, r3, #3
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	429a      	cmp	r2, r3
 8001346:	d1ee      	bne.n	8001326 <USART2_IRQHandler+0x62>
				while(nInst != (USART_ReceivData & 0x07))
 8001348:	e005      	b.n	8001356 <USART2_IRQHandler+0x92>
					nInst = (USART_ReceivData & 0x07);	// Set instruction number
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b48      	ldr	r3, [pc, #288]	; (8001474 <USART2_IRQHandler+0x1b0>)
 8001354:	801a      	strh	r2, [r3, #0]
				while(nInst != (USART_ReceivData & 0x07))
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <USART2_IRQHandler+0x1b0>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	429a      	cmp	r2, r3
 8001364:	d1f1      	bne.n	800134a <USART2_IRQHandler+0x86>
}
 8001366:	e07e      	b.n	8001466 <USART2_IRQHandler+0x1a2>
			else if(USART_ReceivData == 0xF0)
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	2bf0      	cmp	r3, #240	; 0xf0
 800136c:	d07b      	beq.n	8001466 <USART2_IRQHandler+0x1a2>
				USART_Send(USART2, "[Error]Unknown instruction.\n");
 800136e:	4946      	ldr	r1, [pc, #280]	; (8001488 <USART2_IRQHandler+0x1c4>)
 8001370:	483f      	ldr	r0, [pc, #252]	; (8001470 <USART2_IRQHandler+0x1ac>)
 8001372:	f7ff fd93 	bl	8000e9c <USART_Send>
}
 8001376:	e076      	b.n	8001466 <USART2_IRQHandler+0x1a2>
			--nInst;
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <USART2_IRQHandler+0x1b0>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <USART2_IRQHandler+0x1b0>)
 8001382:	801a      	strh	r2, [r3, #0]
			if(selMotor == 0x00)
 8001384:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <USART2_IRQHandler+0x1c0>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d104      	bne.n	8001396 <USART2_IRQHandler+0xd2>
				USART_Send(USART2, "Motor-0\n");
 800138c:	493f      	ldr	r1, [pc, #252]	; (800148c <USART2_IRQHandler+0x1c8>)
 800138e:	4838      	ldr	r0, [pc, #224]	; (8001470 <USART2_IRQHandler+0x1ac>)
 8001390:	f7ff fd84 	bl	8000e9c <USART_Send>
 8001394:	e00c      	b.n	80013b0 <USART2_IRQHandler+0xec>
			else if(selMotor == 0x01)
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <USART2_IRQHandler+0x1c0>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d104      	bne.n	80013a8 <USART2_IRQHandler+0xe4>
				USART_Send(USART2, "Motor-1\n");
 800139e:	493c      	ldr	r1, [pc, #240]	; (8001490 <USART2_IRQHandler+0x1cc>)
 80013a0:	4833      	ldr	r0, [pc, #204]	; (8001470 <USART2_IRQHandler+0x1ac>)
 80013a2:	f7ff fd7b 	bl	8000e9c <USART_Send>
 80013a6:	e003      	b.n	80013b0 <USART2_IRQHandler+0xec>
				USART_Send(USART2, "[Error]No motors selected");
 80013a8:	493a      	ldr	r1, [pc, #232]	; (8001494 <USART2_IRQHandler+0x1d0>)
 80013aa:	4831      	ldr	r0, [pc, #196]	; (8001470 <USART2_IRQHandler+0x1ac>)
 80013ac:	f7ff fd76 	bl	8000e9c <USART_Send>
			if(((USART_ReceivData & 0x80) >> 7) == 0x01) 		// 1xxx xxxx(b)
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <USART2_IRQHandler+0x100>
				USART_Send(USART2, "[Motor]Set speed.\n");
 80013ba:	4937      	ldr	r1, [pc, #220]	; (8001498 <USART2_IRQHandler+0x1d4>)
 80013bc:	482c      	ldr	r0, [pc, #176]	; (8001470 <USART2_IRQHandler+0x1ac>)
 80013be:	f7ff fd6d 	bl	8000e9c <USART_Send>
 80013c2:	e045      	b.n	8001450 <USART2_IRQHandler+0x18c>
				if(((USART_ReceivData & 0x60) >> 5) == 0x01)	// x01x xxxx(b)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	115b      	asrs	r3, r3, #5
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10b      	bne.n	80013e8 <USART2_IRQHandler+0x124>
					MotorCtrl(selMotor, 1, 2, 127);
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <USART2_IRQHandler+0x1c0>)
 80013d2:	7818      	ldrb	r0, [r3, #0]
 80013d4:	237f      	movs	r3, #127	; 0x7f
 80013d6:	2202      	movs	r2, #2
 80013d8:	2101      	movs	r1, #1
 80013da:	f7ff fe51 	bl	8001080 <MotorCtrl>
					USART_Send(USART2, "[Motor]Enable.\n");
 80013de:	492f      	ldr	r1, [pc, #188]	; (800149c <USART2_IRQHandler+0x1d8>)
 80013e0:	4823      	ldr	r0, [pc, #140]	; (8001470 <USART2_IRQHandler+0x1ac>)
 80013e2:	f7ff fd5b 	bl	8000e9c <USART_Send>
 80013e6:	e010      	b.n	800140a <USART2_IRQHandler+0x146>
				else if(((USART_ReceivData & 0x60) >> 5) == 0x00)// x00x xxxx(b)
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	115b      	asrs	r3, r3, #5
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10a      	bne.n	800140a <USART2_IRQHandler+0x146>
					MotorCtrl(selMotor, 0, 2, 127);
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <USART2_IRQHandler+0x1c0>)
 80013f6:	7818      	ldrb	r0, [r3, #0]
 80013f8:	237f      	movs	r3, #127	; 0x7f
 80013fa:	2202      	movs	r2, #2
 80013fc:	2100      	movs	r1, #0
 80013fe:	f7ff fe3f 	bl	8001080 <MotorCtrl>
					USART_Send(USART2, "[Motor]Disable.\n");
 8001402:	4927      	ldr	r1, [pc, #156]	; (80014a0 <USART2_IRQHandler+0x1dc>)
 8001404:	481a      	ldr	r0, [pc, #104]	; (8001470 <USART2_IRQHandler+0x1ac>)
 8001406:	f7ff fd49 	bl	8000e9c <USART_Send>
				if(((USART_ReceivData & 0x18) >> 3) == 0x01)	// xxx0 1xxx(b)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	10db      	asrs	r3, r3, #3
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b01      	cmp	r3, #1
 8001414:	d10b      	bne.n	800142e <USART2_IRQHandler+0x16a>
					MotorCtrl(selMotor, 2, 1, 127);
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <USART2_IRQHandler+0x1c0>)
 8001418:	7818      	ldrb	r0, [r3, #0]
 800141a:	237f      	movs	r3, #127	; 0x7f
 800141c:	2201      	movs	r2, #1
 800141e:	2102      	movs	r1, #2
 8001420:	f7ff fe2e 	bl	8001080 <MotorCtrl>
					USART_Send(USART2, "[Motor]Direction:CCW.\n");
 8001424:	491f      	ldr	r1, [pc, #124]	; (80014a4 <USART2_IRQHandler+0x1e0>)
 8001426:	4812      	ldr	r0, [pc, #72]	; (8001470 <USART2_IRQHandler+0x1ac>)
 8001428:	f7ff fd38 	bl	8000e9c <USART_Send>
 800142c:	e010      	b.n	8001450 <USART2_IRQHandler+0x18c>
				else if(((USART_ReceivData & 0x18) >> 3) == 0x00)// xxx0 0xxx(b)
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	10db      	asrs	r3, r3, #3
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10a      	bne.n	8001450 <USART2_IRQHandler+0x18c>
					MotorCtrl(selMotor, 2, 0, 127);
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <USART2_IRQHandler+0x1c0>)
 800143c:	7818      	ldrb	r0, [r3, #0]
 800143e:	237f      	movs	r3, #127	; 0x7f
 8001440:	2200      	movs	r2, #0
 8001442:	2102      	movs	r1, #2
 8001444:	f7ff fe1c 	bl	8001080 <MotorCtrl>
					USART_Send(USART2, "[Motor]Direction:CW.\n");
 8001448:	4917      	ldr	r1, [pc, #92]	; (80014a8 <USART2_IRQHandler+0x1e4>)
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <USART2_IRQHandler+0x1ac>)
 800144c:	f7ff fd26 	bl	8000e9c <USART_Send>
			if(nInst == 0)
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <USART2_IRQHandler+0x1b0>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d106      	bne.n	8001466 <USART2_IRQHandler+0x1a2>
				selMotor = 0xFF;	// Deselect motor
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <USART2_IRQHandler+0x1c0>)
 800145a:	22ff      	movs	r2, #255	; 0xff
 800145c:	701a      	strb	r2, [r3, #0]
				USART_Send(USART2, "[Motor]Control done.\n");
 800145e:	4913      	ldr	r1, [pc, #76]	; (80014ac <USART2_IRQHandler+0x1e8>)
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <USART2_IRQHandler+0x1ac>)
 8001462:	f7ff fd1b 	bl	8000e9c <USART_Send>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40004400 	.word	0x40004400
 8001474:	2000005a 	.word	0x2000005a
 8001478:	08001660 	.word	0x08001660
 800147c:	08001668 	.word	0x08001668
 8001480:	08001678 	.word	0x08001678
 8001484:	20000034 	.word	0x20000034
 8001488:	08001688 	.word	0x08001688
 800148c:	080016a8 	.word	0x080016a8
 8001490:	080016b4 	.word	0x080016b4
 8001494:	080016c0 	.word	0x080016c0
 8001498:	080016dc 	.word	0x080016dc
 800149c:	080016f0 	.word	0x080016f0
 80014a0:	08001700 	.word	0x08001700
 80014a4:	08001714 	.word	0x08001714
 80014a8:	0800172c 	.word	0x0800172c
 80014ac:	08001744 	.word	0x08001744

080014b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014b4:	4a15      	ldr	r2, [pc, #84]	; (800150c <SystemInit+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <SystemInit+0x5c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

  /* Reset SW,SWS, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80014c0:	4912      	ldr	r1, [pc, #72]	; (800150c <SystemInit+0x5c>)
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <SystemInit+0x5c>)
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <SystemInit+0x60>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <SystemInit+0x5c>)
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <SystemInit+0x5c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014dc:	4a0b      	ldr	r2, [pc, #44]	; (800150c <SystemInit+0x5c>)
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <SystemInit+0x5c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80014e8:	4a08      	ldr	r2, [pc, #32]	; (800150c <SystemInit+0x5c>)
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <SystemInit+0x5c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014f2:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SystemInit+0x5c>)
 80014f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014fa:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80014fc:	f000 f80c 	bl	8001518 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SystemInit+0x64>)
 8001502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001506:	609a      	str	r2, [r3, #8]
#endif 
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	f8ff0000 	.word	0xf8ff0000
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <SetSysClock>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
  
 #ifdef PLL_SOURCE_HSI  
  /* At this stage the HSI is already enabled */
  
  /*  PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL));
 8001526:	4a28      	ldr	r2, [pc, #160]	; (80015c8 <SetSysClock+0xb0>)
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <SetSysClock+0xb0>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001530:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLMULL16);
 8001532:	4a25      	ldr	r2, [pc, #148]	; (80015c8 <SetSysClock+0xb0>)
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <SetSysClock+0xb0>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 800153c:	6053      	str	r3, [r2, #4]
  }
  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800153e:	4a23      	ldr	r2, [pc, #140]	; (80015cc <SetSysClock+0xb4>)
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <SetSysClock+0xb4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f043 0310 	orr.w	r3, r3, #16
 8001548:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800154a:	4a20      	ldr	r2, [pc, #128]	; (80015cc <SetSysClock+0xb4>)
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <SetSysClock+0xb4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f023 0303 	bic.w	r3, r3, #3
 8001554:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001556:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <SetSysClock+0xb4>)
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <SetSysClock+0xb4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <SetSysClock+0xb0>)
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <SetSysClock+0xb0>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <SetSysClock+0xb0>)
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <SetSysClock+0xb0>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001572:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <SetSysClock+0xb0>)
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <SetSysClock+0xb0>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157c:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <SetSysClock+0xb0>)
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <SetSysClock+0xb0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001588:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800158a:	bf00      	nop
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <SetSysClock+0xb0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f9      	beq.n	800158c <SetSysClock+0x74>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <SetSysClock+0xb0>)
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <SetSysClock+0xb0>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f023 0303 	bic.w	r3, r3, #3
 80015a2:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80015a4:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <SetSysClock+0xb0>)
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <SetSysClock+0xb0>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80015b0:	bf00      	nop
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SetSysClock+0xb0>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d1f9      	bne.n	80015b2 <SetSysClock+0x9a>
    {
    }
  }
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40022000 	.word	0x40022000

080015d0 <__libc_init_array>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2500      	movs	r5, #0
 80015d4:	4e0c      	ldr	r6, [pc, #48]	; (8001608 <__libc_init_array+0x38>)
 80015d6:	4c0d      	ldr	r4, [pc, #52]	; (800160c <__libc_init_array+0x3c>)
 80015d8:	1ba4      	subs	r4, r4, r6
 80015da:	10a4      	asrs	r4, r4, #2
 80015dc:	42a5      	cmp	r5, r4
 80015de:	d109      	bne.n	80015f4 <__libc_init_array+0x24>
 80015e0:	f000 f81a 	bl	8001618 <_init>
 80015e4:	2500      	movs	r5, #0
 80015e6:	4e0a      	ldr	r6, [pc, #40]	; (8001610 <__libc_init_array+0x40>)
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <__libc_init_array+0x44>)
 80015ea:	1ba4      	subs	r4, r4, r6
 80015ec:	10a4      	asrs	r4, r4, #2
 80015ee:	42a5      	cmp	r5, r4
 80015f0:	d105      	bne.n	80015fe <__libc_init_array+0x2e>
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
 80015f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015f8:	4798      	blx	r3
 80015fa:	3501      	adds	r5, #1
 80015fc:	e7ee      	b.n	80015dc <__libc_init_array+0xc>
 80015fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001602:	4798      	blx	r3
 8001604:	3501      	adds	r5, #1
 8001606:	e7f2      	b.n	80015ee <__libc_init_array+0x1e>
 8001608:	0800175c 	.word	0x0800175c
 800160c:	0800175c 	.word	0x0800175c
 8001610:	0800175c 	.word	0x0800175c
 8001614:	08001760 	.word	0x08001760

08001618 <_init>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	bf00      	nop
 800161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161e:	bc08      	pop	{r3}
 8001620:	469e      	mov	lr, r3
 8001622:	4770      	bx	lr

08001624 <_fini>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	bf00      	nop
 8001628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162a:	bc08      	pop	{r3}
 800162c:	469e      	mov	lr, r3
 800162e:	4770      	bx	lr
