
PoweredExoskeleton-01_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08001ad8  08001ad8  00011ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c00  08001c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08001c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000038  20000028  08001c2c  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000060  08001c2c  00020060  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005d7c  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001402  00000000  00000000  00025dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000840  00000000  00000000  000271d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007d0  00000000  00000000  00027a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002618  00000000  00000000  000281e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000240e  00000000  00000000  0002a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002cc06  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000021dc  00000000  00000000  0002cc84  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002ee60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ac0 	.word	0x08001ac0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08001ac0 	.word	0x08001ac0

0800014c <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000154:	4a05      	ldr	r2, [pc, #20]	; (800016c <NVIC_PriorityGroupConfig+0x20>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800015c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000160:	60d3      	str	r3, [r2, #12]
}
 8000162:	bf00      	nop
 8000164:	370c      	adds	r7, #12
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	e000ed00 	.word	0xe000ed00

08000170 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000170:	b480      	push	{r7}
 8000172:	b087      	sub	sp, #28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000178:	2300      	movs	r3, #0
 800017a:	617b      	str	r3, [r7, #20]
 800017c:	2300      	movs	r3, #0
 800017e:	613b      	str	r3, [r7, #16]
 8000180:	230f      	movs	r3, #15
 8000182:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	78db      	ldrb	r3, [r3, #3]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d03a      	beq.n	8000202 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800018c:	4b27      	ldr	r3, [pc, #156]	; (800022c <NVIC_Init+0xbc>)
 800018e:	68db      	ldr	r3, [r3, #12]
 8000190:	43db      	mvns	r3, r3
 8000192:	0a1b      	lsrs	r3, r3, #8
 8000194:	f003 0307 	and.w	r3, r3, #7
 8000198:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800019a:	697b      	ldr	r3, [r7, #20]
 800019c:	f1c3 0304 	rsb	r3, r3, #4
 80001a0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80001a2:	68fa      	ldr	r2, [r7, #12]
 80001a4:	697b      	ldr	r3, [r7, #20]
 80001a6:	fa22 f303 	lsr.w	r3, r2, r3
 80001aa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	461a      	mov	r2, r3
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	fa02 f303 	lsl.w	r3, r2, r3
 80001b8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	789b      	ldrb	r3, [r3, #2]
 80001be:	461a      	mov	r2, r3
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4013      	ands	r3, r2
 80001c4:	697a      	ldr	r2, [r7, #20]
 80001c6:	4313      	orrs	r3, r2
 80001c8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <NVIC_Init+0xc0>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	6979      	ldr	r1, [r7, #20]
 80001d8:	b2c9      	uxtb	r1, r1
 80001da:	4413      	add	r3, r2
 80001dc:	460a      	mov	r2, r1
 80001de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001e2:	4a13      	ldr	r2, [pc, #76]	; (8000230 <NVIC_Init+0xc0>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	095b      	lsrs	r3, r3, #5
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	f003 031f 	and.w	r3, r3, #31
 80001f6:	2101      	movs	r1, #1
 80001f8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000200:	e00f      	b.n	8000222 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000202:	490b      	ldr	r1, [pc, #44]	; (8000230 <NVIC_Init+0xc0>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	095b      	lsrs	r3, r3, #5
 800020a:	b2db      	uxtb	r3, r3
 800020c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	f003 031f 	and.w	r3, r3, #31
 8000216:	2201      	movs	r2, #1
 8000218:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800021a:	f100 0320 	add.w	r3, r0, #32
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000222:	bf00      	nop
 8000224:	371c      	adds	r7, #28
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	e000ed00 	.word	0xe000ed00
 8000230:	e000e100 	.word	0xe000e100

08000234 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800023c:	2300      	movs	r3, #0
 800023e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4013      	ands	r3, r2
 800024c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <EXTI_GetITStatus+0x44>)
 8000250:	695a      	ldr	r2, [r3, #20]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4013      	ands	r3, r2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d005      	beq.n	8000266 <EXTI_GetITStatus+0x32>
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d002      	beq.n	8000266 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000260:	2301      	movs	r3, #1
 8000262:	73fb      	strb	r3, [r7, #15]
 8000264:	e001      	b.n	800026a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000266:	2300      	movs	r3, #0
 8000268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800026a:	7bfb      	ldrb	r3, [r7, #15]
}
 800026c:	4618      	mov	r0, r3
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40010400 	.word	0x40010400

0800027c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000284:	4a03      	ldr	r2, [pc, #12]	; (8000294 <EXTI_ClearITPendingBit+0x18>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	6153      	str	r3, [r2, #20]
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	40010400 	.word	0x40010400

08000298 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	; 0x24
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	2300      	movs	r3, #0
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	78db      	ldrb	r3, [r3, #3]
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d005      	beq.n	80002dc <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	789b      	ldrb	r3, [r3, #2]
 80002d4:	461a      	mov	r2, r3
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	4313      	orrs	r3, r2
 80002da:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d044      	beq.n	8000370 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
 80002f0:	e038      	b.n	8000364 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80002f2:	2201      	movs	r2, #1
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4013      	ands	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000308:	693a      	ldr	r2, [r7, #16]
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	429a      	cmp	r2, r3
 800030e:	d126      	bne.n	800035e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000316:	220f      	movs	r2, #15
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	43db      	mvns	r3, r3
 8000324:	697a      	ldr	r2, [r7, #20]
 8000326:	4013      	ands	r3, r2
 8000328:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800032a:	69fa      	ldr	r2, [r7, #28]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	fa02 f303 	lsl.w	r3, r2, r3
 8000332:	697a      	ldr	r2, [r7, #20]
 8000334:	4313      	orrs	r3, r2
 8000336:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	2b28      	cmp	r3, #40	; 0x28
 800033e:	d105      	bne.n	800034c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000340:	2201      	movs	r2, #1
 8000342:	69bb      	ldr	r3, [r7, #24]
 8000344:	409a      	lsls	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	615a      	str	r2, [r3, #20]
 800034a:	e008      	b.n	800035e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	2b48      	cmp	r3, #72	; 0x48
 8000352:	d104      	bne.n	800035e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000354:	2201      	movs	r2, #1
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	409a      	lsls	r2, r3
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800035e:	69bb      	ldr	r3, [r7, #24]
 8000360:	3301      	adds	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
 8000364:	69bb      	ldr	r3, [r7, #24]
 8000366:	2b07      	cmp	r3, #7
 8000368:	d9c3      	bls.n	80002f2 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	697a      	ldr	r2, [r7, #20]
 800036e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	2bff      	cmp	r3, #255	; 0xff
 8000376:	d946      	bls.n	8000406 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
 8000382:	e03a      	b.n	80003fa <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	3308      	adds	r3, #8
 8000388:	2201      	movs	r2, #1
 800038a:	fa02 f303 	lsl.w	r3, r2, r3
 800038e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	461a      	mov	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4013      	ands	r3, r2
 800039a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800039c:	693a      	ldr	r2, [r7, #16]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d127      	bne.n	80003f4 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003aa:	220f      	movs	r2, #15
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	43db      	mvns	r3, r3
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	4013      	ands	r3, r2
 80003bc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003be:	69fa      	ldr	r2, [r7, #28]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	2b28      	cmp	r3, #40	; 0x28
 80003d2:	d105      	bne.n	80003e0 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	3308      	adds	r3, #8
 80003d8:	2201      	movs	r2, #1
 80003da:	409a      	lsls	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	78db      	ldrb	r3, [r3, #3]
 80003e4:	2b48      	cmp	r3, #72	; 0x48
 80003e6:	d105      	bne.n	80003f4 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	3308      	adds	r3, #8
 80003ec:	2201      	movs	r2, #1
 80003ee:	409a      	lsls	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	3301      	adds	r3, #1
 80003f8:	61bb      	str	r3, [r7, #24]
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	d9c1      	bls.n	8000384 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	605a      	str	r2, [r3, #4]
  }
}
 8000406:	bf00      	nop
 8000408:	3724      	adds	r7, #36	; 0x24
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800041e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2202      	movs	r2, #2
 8000424:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2204      	movs	r2, #4
 800042a:	70da      	strb	r2, [r3, #3]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000436:	b480      	push	{r7}
 8000438:	b083      	sub	sp, #12
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
 800043e:	460b      	mov	r3, r1
 8000440:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000442:	887a      	ldrh	r2, [r7, #2]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	615a      	str	r2, [r3, #20]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <RCC_DeInit+0x54>)
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <RCC_DeInit+0x54>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000464:	4910      	ldr	r1, [pc, #64]	; (80004a8 <RCC_DeInit+0x54>)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <RCC_DeInit+0x54>)
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <RCC_DeInit+0x58>)
 800046c:	4013      	ands	r3, r2
 800046e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <RCC_DeInit+0x54>)
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <RCC_DeInit+0x54>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800047a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800047e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000480:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <RCC_DeInit+0x54>)
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <RCC_DeInit+0x54>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800048a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800048c:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <RCC_DeInit+0x54>)
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <RCC_DeInit+0x54>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000496:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <RCC_DeInit+0x54>)
 800049a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800049e:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000
 80004ac:	f8ff0000 	.word	0xf8ff0000

080004b0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80004c8:	4b4c      	ldr	r3, [pc, #304]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d007      	beq.n	80004e8 <RCC_GetClocksFreq+0x38>
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d009      	beq.n	80004f0 <RCC_GetClocksFreq+0x40>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d133      	bne.n	8000548 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a47      	ldr	r2, [pc, #284]	; (8000600 <RCC_GetClocksFreq+0x150>)
 80004e4:	601a      	str	r2, [r3, #0]
      break;
 80004e6:	e033      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a45      	ldr	r2, [pc, #276]	; (8000600 <RCC_GetClocksFreq+0x150>)
 80004ec:	601a      	str	r2, [r3, #0]
      break;
 80004ee:	e02f      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80004f0:	4b42      	ldr	r3, [pc, #264]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004f8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80004fa:	4b40      	ldr	r3, [pc, #256]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000502:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	0c9b      	lsrs	r3, r3, #18
 8000508:	3302      	adds	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d106      	bne.n	8000520 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	4a3b      	ldr	r2, [pc, #236]	; (8000604 <RCC_GetClocksFreq+0x154>)
 8000516:	fb02 f203 	mul.w	r2, r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800051e:	e017      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000520:	4b36      	ldr	r3, [pc, #216]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d006      	beq.n	800053a <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	4a35      	ldr	r2, [pc, #212]	; (8000604 <RCC_GetClocksFreq+0x154>)
 8000530:	fb02 f203 	mul.w	r2, r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	601a      	str	r2, [r3, #0]
      break;
 8000538:	e00a      	b.n	8000550 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	4a30      	ldr	r2, [pc, #192]	; (8000600 <RCC_GetClocksFreq+0x150>)
 800053e:	fb02 f203 	mul.w	r2, r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
      break;
 8000546:	e003      	b.n	8000550 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <RCC_GetClocksFreq+0x150>)
 800054c:	601a      	str	r2, [r3, #0]
      break;
 800054e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000550:	4b2a      	ldr	r3, [pc, #168]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000558:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	091b      	lsrs	r3, r3, #4
 800055e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <RCC_GetClocksFreq+0x158>)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	40da      	lsrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000578:	4b20      	ldr	r3, [pc, #128]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000580:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000588:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <RCC_GetClocksFreq+0x158>)
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	40da      	lsrs	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005a8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	0adb      	lsrs	r3, r3, #11
 80005ae:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <RCC_GetClocksFreq+0x158>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <RCC_GetClocksFreq+0x14c>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	0b9b      	lsrs	r3, r3, #14
 80005d6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <RCC_GetClocksFreq+0x15c>)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	611a      	str	r2, [r3, #16]
}
 80005f2:	bf00      	nop
 80005f4:	371c      	adds	r7, #28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40021000 	.word	0x40021000
 8000600:	007a1200 	.word	0x007a1200
 8000604:	003d0900 	.word	0x003d0900
 8000608:	20000000 	.word	0x20000000
 800060c:	20000010 	.word	0x20000010

08000610 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000622:	4909      	ldr	r1, [pc, #36]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800062e:	e006      	b.n	800063e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000630:	4905      	ldr	r1, [pc, #20]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <RCC_APB2PeriphClockCmd+0x38>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	43db      	mvns	r3, r3
 800063a:	4013      	ands	r3, r2
 800063c:	618b      	str	r3, [r1, #24]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800065e:	4909      	ldr	r1, [pc, #36]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000662:	69da      	ldr	r2, [r3, #28]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4313      	orrs	r3, r2
 8000668:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800066a:	e006      	b.n	800067a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800066c:	4905      	ldr	r1, [pc, #20]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <RCC_APB1PeriphClockCmd+0x38>)
 8000670:	69da      	ldr	r2, [r3, #28]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	43db      	mvns	r3, r3
 8000676:	4013      	ands	r3, r2
 8000678:	61cb      	str	r3, [r1, #28]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <TIM_TimeBaseInit+0xd0>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d013      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a2d      	ldr	r2, [pc, #180]	; (800075c <TIM_TimeBaseInit+0xd4>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d00f      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006b2:	d00b      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a2a      	ldr	r2, [pc, #168]	; (8000760 <TIM_TimeBaseInit+0xd8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d007      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a29      	ldr	r2, [pc, #164]	; (8000764 <TIM_TimeBaseInit+0xdc>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d003      	beq.n	80006cc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <TIM_TimeBaseInit+0xe0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d108      	bne.n	80006de <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80006cc:	89fb      	ldrh	r3, [r7, #14]
 80006ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006d2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	885a      	ldrh	r2, [r3, #2]
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	4313      	orrs	r3, r2
 80006dc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <TIM_TimeBaseInit+0xe4>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d00c      	beq.n	8000700 <TIM_TimeBaseInit+0x78>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <TIM_TimeBaseInit+0xe8>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d008      	beq.n	8000700 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006f4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	88da      	ldrh	r2, [r3, #6]
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	89fa      	ldrh	r2, [r7, #14]
 8000704:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	889a      	ldrh	r2, [r3, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	881a      	ldrh	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <TIM_TimeBaseInit+0xd0>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d00f      	beq.n	800073e <TIM_TimeBaseInit+0xb6>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <TIM_TimeBaseInit+0xd4>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d00b      	beq.n	800073e <TIM_TimeBaseInit+0xb6>
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <TIM_TimeBaseInit+0xec>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d007      	beq.n	800073e <TIM_TimeBaseInit+0xb6>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a11      	ldr	r2, [pc, #68]	; (8000778 <TIM_TimeBaseInit+0xf0>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d003      	beq.n	800073e <TIM_TimeBaseInit+0xb6>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <TIM_TimeBaseInit+0xf4>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d104      	bne.n	8000748 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	7a1b      	ldrb	r3, [r3, #8]
 8000742:	b29a      	uxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2201      	movs	r2, #1
 800074c:	829a      	strh	r2, [r3, #20]
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40012c00 	.word	0x40012c00
 800075c:	40013400 	.word	0x40013400
 8000760:	40000400 	.word	0x40000400
 8000764:	40000800 	.word	0x40000800
 8000768:	40000c00 	.word	0x40000c00
 800076c:	40001000 	.word	0x40001000
 8000770:	40001400 	.word	0x40001400
 8000774:	40014000 	.word	0x40014000
 8000778:	40014400 	.word	0x40014400
 800077c:	40014800 	.word	0x40014800

08000780 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	817b      	strh	r3, [r7, #10]
 800078e:	2300      	movs	r3, #0
 8000790:	81fb      	strh	r3, [r7, #14]
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	8c1b      	ldrh	r3, [r3, #32]
 800079a:	b29b      	uxth	r3, r3
 800079c:	f023 0310 	bic.w	r3, r3, #16
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	8c1b      	ldrh	r3, [r3, #32]
 80007aa:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	8b1b      	ldrh	r3, [r3, #24]
 80007b6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 80007b8:	897b      	ldrh	r3, [r7, #10]
 80007ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80007be:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80007c0:	897b      	ldrh	r3, [r7, #10]
 80007c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007c6:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	897b      	ldrh	r3, [r7, #10]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80007d6:	89fb      	ldrh	r3, [r7, #14]
 80007d8:	f023 0320 	bic.w	r3, r3, #32
 80007dc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	891b      	ldrh	r3, [r3, #8]
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	885b      	ldrh	r3, [r3, #2]
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a22      	ldr	r2, [pc, #136]	; (8000888 <TIM_OC2Init+0x108>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d003      	beq.n	800080a <TIM_OC2Init+0x8a>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <TIM_OC2Init+0x10c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d12b      	bne.n	8000862 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000810:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	895b      	ldrh	r3, [r3, #10]
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	b29a      	uxth	r2, r3
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	4313      	orrs	r3, r2
 800081e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8000820:	89fb      	ldrh	r3, [r7, #14]
 8000822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000826:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	889b      	ldrh	r3, [r3, #4]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	b29a      	uxth	r2, r3
 8000830:	89fb      	ldrh	r3, [r7, #14]
 8000832:	4313      	orrs	r3, r2
 8000834:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800083c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 800083e:	89bb      	ldrh	r3, [r7, #12]
 8000840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000844:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	b29a      	uxth	r2, r3
 800084e:	89bb      	ldrh	r3, [r7, #12]
 8000850:	4313      	orrs	r3, r2
 8000852:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	89db      	ldrh	r3, [r3, #14]
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	b29a      	uxth	r2, r3
 800085c:	89bb      	ldrh	r3, [r7, #12]
 800085e:	4313      	orrs	r3, r2
 8000860:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	89ba      	ldrh	r2, [r7, #12]
 8000866:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	897a      	ldrh	r2, [r7, #10]
 800086c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	88da      	ldrh	r2, [r3, #6]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	89fa      	ldrh	r2, [r7, #14]
 800087a:	841a      	strh	r2, [r3, #32]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40012c00 	.word	0x40012c00
 800088c:	40013400 	.word	0x40013400

08000890 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	817b      	strh	r3, [r7, #10]
 800089e:	2300      	movs	r3, #0
 80008a0:	81fb      	strh	r3, [r7, #14]
 80008a2:	2300      	movs	r3, #0
 80008a4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8c1b      	ldrh	r3, [r3, #32]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	8c1b      	ldrh	r3, [r3, #32]
 80008ba:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	8b9b      	ldrh	r3, [r3, #28]
 80008c6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 80008c8:	897b      	ldrh	r3, [r7, #10]
 80008ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008ce:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80008d0:	897b      	ldrh	r3, [r7, #10]
 80008d2:	f023 0303 	bic.w	r3, r3, #3
 80008d6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	881a      	ldrh	r2, [r3, #0]
 80008dc:	897b      	ldrh	r3, [r7, #10]
 80008de:	4313      	orrs	r3, r2
 80008e0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008e8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	891b      	ldrh	r3, [r3, #8]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	89fb      	ldrh	r3, [r7, #14]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	885b      	ldrh	r3, [r3, #2]
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	b29a      	uxth	r2, r3
 8000900:	89fb      	ldrh	r3, [r7, #14]
 8000902:	4313      	orrs	r3, r2
 8000904:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a22      	ldr	r2, [pc, #136]	; (8000994 <TIM_OC3Init+0x104>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d003      	beq.n	8000916 <TIM_OC3Init+0x86>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <TIM_OC3Init+0x108>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d12b      	bne.n	800096e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800091c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	895b      	ldrh	r3, [r3, #10]
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	b29a      	uxth	r2, r3
 8000926:	89fb      	ldrh	r3, [r7, #14]
 8000928:	4313      	orrs	r3, r2
 800092a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 800092c:	89fb      	ldrh	r3, [r7, #14]
 800092e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000932:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	889b      	ldrh	r3, [r3, #4]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b29a      	uxth	r2, r3
 800093c:	89fb      	ldrh	r3, [r7, #14]
 800093e:	4313      	orrs	r3, r2
 8000940:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8000942:	89bb      	ldrh	r3, [r7, #12]
 8000944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000948:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800094a:	89bb      	ldrh	r3, [r7, #12]
 800094c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000950:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	899b      	ldrh	r3, [r3, #12]
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	b29a      	uxth	r2, r3
 800095a:	89bb      	ldrh	r3, [r7, #12]
 800095c:	4313      	orrs	r3, r2
 800095e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	89db      	ldrh	r3, [r3, #14]
 8000964:	011b      	lsls	r3, r3, #4
 8000966:	b29a      	uxth	r2, r3
 8000968:	89bb      	ldrh	r3, [r7, #12]
 800096a:	4313      	orrs	r3, r2
 800096c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	89ba      	ldrh	r2, [r7, #12]
 8000972:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	897a      	ldrh	r2, [r7, #10]
 8000978:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	88da      	ldrh	r2, [r3, #6]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	89fa      	ldrh	r2, [r7, #14]
 8000986:	841a      	strh	r2, [r3, #32]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40012c00 	.word	0x40012c00
 8000998:	40013400 	.word	0x40013400

0800099c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2200      	movs	r2, #0
 80009ae:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2200      	movs	r2, #0
 80009b4:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	81da      	strh	r2, [r3, #14]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr

080009de <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	460b      	mov	r3, r1
 80009e8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000a00:	e007      	b.n	8000a12 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	f023 0301 	bic.w	r3, r3, #1
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	801a      	strh	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d008      	beq.n	8000a40 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8000a3e:	e007      	b.n	8000a50 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	801a      	strh	r2, [r3, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	460b      	mov	r3, r1
 8000a64:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	8b1b      	ldrh	r3, [r3, #24]
 8000a6e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a76:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000a78:	887b      	ldrh	r3, [r7, #2]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	89fb      	ldrh	r3, [r7, #14]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	89fa      	ldrh	r2, [r7, #14]
 8000a88:	831a      	strh	r2, [r3, #24]
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	8b9b      	ldrh	r3, [r3, #28]
 8000aa8:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000aaa:	89fb      	ldrh	r3, [r7, #14]
 8000aac:	f023 0308 	bic.w	r3, r3, #8
 8000ab0:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000ab2:	89fa      	ldrh	r2, [r7, #14]
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	89fa      	ldrh	r2, [r7, #14]
 8000abe:	839a      	strh	r2, [r3, #28]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	887a      	ldrh	r2, [r7, #2]
 8000ada:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
	...

08000ae8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8a1b      	ldrh	r3, [r3, #16]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b14:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	88db      	ldrh	r3, [r3, #6]
 8000b20:	461a      	mov	r2, r3
 8000b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b24:	4313      	orrs	r3, r2
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	899b      	ldrh	r3, [r3, #12]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b3a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000b3e:	4013      	ands	r3, r2
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	889a      	ldrh	r2, [r3, #4]
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	891b      	ldrh	r3, [r3, #8]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	8a9b      	ldrh	r3, [r3, #20]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b70:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000b74:	4013      	ands	r3, r2
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	899b      	ldrh	r3, [r3, #12]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b80:	4313      	orrs	r3, r2
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fc8d 	bl	80004b0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <USART_Init+0x16c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d102      	bne.n	8000ba4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ba2:	e001      	b.n	8000ba8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	899b      	ldrh	r3, [r3, #12]
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da0c      	bge.n	8000bce <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	009a      	lsls	r2, r3, #2
 8000bbe:	441a      	add	r2, r3
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
 8000bcc:	e00b      	b.n	8000be6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	009a      	lsls	r2, r3, #2
 8000bd8:	441a      	add	r2, r3
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <USART_Init+0x170>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	2264      	movs	r2, #100	; 0x64
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	899b      	ldrh	r3, [r3, #12]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da0c      	bge.n	8000c2a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	3332      	adds	r3, #50	; 0x32
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <USART_Init+0x170>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	095b      	lsrs	r3, r3, #5
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c24:	4313      	orrs	r3, r2
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c28:	e00b      	b.n	8000c42 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	3332      	adds	r3, #50	; 0x32
 8000c30:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <USART_Init+0x170>)
 8000c32:	fba2 2303 	umull	r2, r3, r2, r3
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	811a      	strh	r2, [r3, #8]
}
 8000c4a:	bf00      	nop
 8000c4c:	3730      	adds	r7, #48	; 0x30
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40013800 	.word	0x40013800
 8000c58:	51eb851f 	.word	0x51eb851f

08000c5c <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c6a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	220c      	movs	r2, #12
 8000c82:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	819a      	strh	r2, [r3, #12]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ca0:	78fb      	ldrb	r3, [r7, #3]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d008      	beq.n	8000cb8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	899b      	ldrh	r3, [r3, #12]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000cb6:	e007      	b.n	8000cc8 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	899b      	ldrh	r3, [r3, #12]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	819a      	strh	r2, [r3, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	807b      	strh	r3, [r7, #2]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	f003 031f 	and.w	r3, r3, #31
 8000d06:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d103      	bne.n	8000d20 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	330c      	adds	r3, #12
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e009      	b.n	8000d34 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d103      	bne.n	8000d2e <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3310      	adds	r3, #16
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e002      	b.n	8000d34 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3314      	adds	r3, #20
 8000d32:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000d34:	787b      	ldrb	r3, [r7, #1]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d006      	beq.n	8000d48 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	6811      	ldr	r1, [r2, #0]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000d46:	e006      	b.n	8000d56 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	6811      	ldr	r1, [r2, #0]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	43d2      	mvns	r2, r2
 8000d52:	400a      	ands	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000d6c:	887b      	ldrh	r3, [r7, #2]
 8000d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	809a      	strh	r2, [r3, #4]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	889b      	ldrh	r3, [r3, #4]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d94:	b29b      	uxth	r3, r3
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	4013      	ands	r3, r2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e001      	b.n	8000dca <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr

08000dd6 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	460b      	mov	r3, r1
 8000de0:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	801a      	strh	r2, [r3, #0]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b087      	sub	sp, #28
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000e24:	2201      	movs	r2, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d107      	bne.n	8000e44 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	899b      	ldrh	r3, [r3, #12]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e011      	b.n	8000e68 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d107      	bne.n	8000e5a <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	8a1b      	ldrh	r3, [r3, #16]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	4013      	ands	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e006      	b.n	8000e68 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	8a9b      	ldrh	r3, [r3, #20]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	461a      	mov	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000e70:	2201      	movs	r2, #1
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <USART_GetITStatus+0xa4>
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000e94:	2301      	movs	r3, #1
 8000e96:	74fb      	strb	r3, [r7, #19]
 8000e98:	e001      	b.n	8000e9e <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000e9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
	...

08000eac <GPIO_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void GPIO_Initialization(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Fills each GPIO_InitStruct member with its default value */
	GPIO_StructInit(&GPIO_InitStructure);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff faab 	bl	8000410 <GPIO_StructInit>

	/* Configure the GPIO pin */
	/* user */
	// PA5: LED-user
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000eba:	2320      	movs	r3, #32
 8000ebc:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4842      	ldr	r0, [pc, #264]	; (8000fd4 <GPIO_Initialization+0x128>)
 8000ecc:	f7ff f9e4 	bl	8000298 <GPIO_Init>

	// PC13: Button-user
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed4:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000eda:	2302      	movs	r3, #2
 8000edc:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	483d      	ldr	r0, [pc, #244]	; (8000fd8 <GPIO_Initialization+0x12c>)
 8000ee4:	f7ff f9d8 	bl	8000298 <GPIO_Init>


	/* USART */
	// PA2: USART2_TX
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000eec:	2318      	movs	r3, #24
 8000eee:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4836      	ldr	r0, [pc, #216]	; (8000fd4 <GPIO_Initialization+0x128>)
 8000efa:	f7ff f9cd 	bl	8000298 <GPIO_Init>

	// PA3: USART2_RX
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000efe:	2308      	movs	r3, #8
 8000f00:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000f02:	2304      	movs	r3, #4
 8000f04:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f06:	2303      	movs	r3, #3
 8000f08:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4831      	ldr	r0, [pc, #196]	; (8000fd4 <GPIO_Initialization+0x128>)
 8000f10:	f7ff f9c2 	bl	8000298 <GPIO_Init>


	/* Motor0 */
	// PB5: Motor0_Enbale
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000f14:	2320      	movs	r3, #32
 8000f16:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	482d      	ldr	r0, [pc, #180]	; (8000fdc <GPIO_Initialization+0x130>)
 8000f26:	f7ff f9b7 	bl	8000298 <GPIO_Init>

	// PB4: Motor0-Direction
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000f2e:	2310      	movs	r3, #16
 8000f30:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f32:	2302      	movs	r3, #2
 8000f34:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4828      	ldr	r0, [pc, #160]	; (8000fdc <GPIO_Initialization+0x130>)
 8000f3c:	f7ff f9ac 	bl	8000298 <GPIO_Init>

	// PB10: Motor0-Speed(PWM, TIM2_CH3)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f44:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000f46:	2318      	movs	r3, #24
 8000f48:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4822      	ldr	r0, [pc, #136]	; (8000fdc <GPIO_Initialization+0x130>)
 8000f54:	f7ff f9a0 	bl	8000298 <GPIO_Init>

	// PB3: Motor0-Ready
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f60:	2302      	movs	r3, #2
 8000f62:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	481c      	ldr	r0, [pc, #112]	; (8000fdc <GPIO_Initialization+0x130>)
 8000f6a:	f7ff f995 	bl	8000298 <GPIO_Init>

	/* Motor1 */
	// PA8: Motor1_Enbale
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000f74:	2310      	movs	r3, #16
 8000f76:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <GPIO_Initialization+0x128>)
 8000f82:	f7ff f989 	bl	8000298 <GPIO_Init>

	// PA9: Motor1-Direction
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8a:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000f90:	2302      	movs	r3, #2
 8000f92:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <GPIO_Initialization+0x128>)
 8000f9a:	f7ff f97d 	bl	8000298 <GPIO_Init>

	// PC7: Motor1-Speed(PWM, TIM3_CH2)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000fa2:	2318      	movs	r3, #24
 8000fa4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <GPIO_Initialization+0x12c>)
 8000fb0:	f7ff f972 	bl	8000298 <GPIO_Init>

	// PB6: Motor1-Ready
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8000fb4:	2340      	movs	r3, #64	; 0x40
 8000fb6:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <GPIO_Initialization+0x130>)
 8000fc6:	f7ff f967 	bl	8000298 <GPIO_Init>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40011000 	.word	0x40011000
 8000fdc:	40010c00 	.word	0x40010c00

08000fe0 <PinSet>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval None
  */
void PinSet(u8 PortPin)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	if(PortPin <= 15)								// Port-A:  0~15
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d809      	bhi.n	8001004 <PinSet+0x24>
		GPIOA->BSRR |= (0x0001 << PortPin);
 8000ff0:	4922      	ldr	r1, [pc, #136]	; (800107c <PinSet+0x9c>)
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <PinSet+0x9c>)
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	4313      	orrs	r3, r2
 8001000:	610b      	str	r3, [r1, #16]
		GPIOD->BSRR |= (0x0001 << (PortPin - 48));
	else if(PortPin <= 79)							// Port-E: 64~79
		GPIOE->BSRR |= (0x0001 << (PortPin - 64));
	else											// Out of range(0~79)
		/* Null */;
}
 8001002:	e036      	b.n	8001072 <PinSet+0x92>
	else if(PortPin <= 31)							// Port-B: 16~31
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b1f      	cmp	r3, #31
 8001008:	d80a      	bhi.n	8001020 <PinSet+0x40>
		GPIOB->BSRR |= (0x0001 << (PortPin - 16));
 800100a:	491d      	ldr	r1, [pc, #116]	; (8001080 <PinSet+0xa0>)
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <PinSet+0xa0>)
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	3a10      	subs	r2, #16
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	4313      	orrs	r3, r2
 800101c:	610b      	str	r3, [r1, #16]
}
 800101e:	e028      	b.n	8001072 <PinSet+0x92>
	else if(PortPin <= 47)							// Port-C: 32~47
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b2f      	cmp	r3, #47	; 0x2f
 8001024:	d80a      	bhi.n	800103c <PinSet+0x5c>
		GPIOC->BSRR |= (0x0001 << (PortPin - 32));
 8001026:	4917      	ldr	r1, [pc, #92]	; (8001084 <PinSet+0xa4>)
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <PinSet+0xa4>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	3a20      	subs	r2, #32
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	4313      	orrs	r3, r2
 8001038:	610b      	str	r3, [r1, #16]
}
 800103a:	e01a      	b.n	8001072 <PinSet+0x92>
	else if(PortPin <= 63)							// Port-D: 48~63
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b3f      	cmp	r3, #63	; 0x3f
 8001040:	d80a      	bhi.n	8001058 <PinSet+0x78>
		GPIOD->BSRR |= (0x0001 << (PortPin - 48));
 8001042:	4911      	ldr	r1, [pc, #68]	; (8001088 <PinSet+0xa8>)
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <PinSet+0xa8>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	3a30      	subs	r2, #48	; 0x30
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	4313      	orrs	r3, r2
 8001054:	610b      	str	r3, [r1, #16]
}
 8001056:	e00c      	b.n	8001072 <PinSet+0x92>
	else if(PortPin <= 79)							// Port-E: 64~79
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b4f      	cmp	r3, #79	; 0x4f
 800105c:	d809      	bhi.n	8001072 <PinSet+0x92>
		GPIOE->BSRR |= (0x0001 << (PortPin - 64));
 800105e:	490b      	ldr	r1, [pc, #44]	; (800108c <PinSet+0xac>)
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <PinSet+0xac>)
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	3a40      	subs	r2, #64	; 0x40
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	4313      	orrs	r3, r2
 8001070:	610b      	str	r3, [r1, #16]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40010800 	.word	0x40010800
 8001080:	40010c00 	.word	0x40010c00
 8001084:	40011000 	.word	0x40011000
 8001088:	40011400 	.word	0x40011400
 800108c:	40011800 	.word	0x40011800

08001090 <PinClr>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval None
  */
void PinClr(u8 PortPin)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	if(PortPin <= 15)								// Port-A:  0~15
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d809      	bhi.n	80010b4 <PinClr+0x24>
		GPIOA->BRR |= (0x0001 << PortPin);
 80010a0:	4922      	ldr	r1, [pc, #136]	; (800112c <PinClr+0x9c>)
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <PinClr+0x9c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	4313      	orrs	r3, r2
 80010b0:	614b      	str	r3, [r1, #20]
		GPIOD->BRR |= (0x0001 << (PortPin - 48));
	else if(PortPin <= 79)							// Port-E: 64~79
		GPIOE->BRR |= (0x0001 << (PortPin - 64));
	else											// Out of range(0~79)
		/* Null */;
}
 80010b2:	e036      	b.n	8001122 <PinClr+0x92>
	else if(PortPin <= 31)							// Port-B: 16~31
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b1f      	cmp	r3, #31
 80010b8:	d80a      	bhi.n	80010d0 <PinClr+0x40>
		GPIOB->BRR |= (0x0001 << (PortPin - 16));
 80010ba:	491d      	ldr	r1, [pc, #116]	; (8001130 <PinClr+0xa0>)
 80010bc:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <PinClr+0xa0>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	79fa      	ldrb	r2, [r7, #7]
 80010c2:	3a10      	subs	r2, #16
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	4313      	orrs	r3, r2
 80010cc:	614b      	str	r3, [r1, #20]
}
 80010ce:	e028      	b.n	8001122 <PinClr+0x92>
	else if(PortPin <= 47)							// Port-C: 32~47
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b2f      	cmp	r3, #47	; 0x2f
 80010d4:	d80a      	bhi.n	80010ec <PinClr+0x5c>
		GPIOC->BRR |= (0x0001 << (PortPin - 32));
 80010d6:	4917      	ldr	r1, [pc, #92]	; (8001134 <PinClr+0xa4>)
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <PinClr+0xa4>)
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	3a20      	subs	r2, #32
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	4313      	orrs	r3, r2
 80010e8:	614b      	str	r3, [r1, #20]
}
 80010ea:	e01a      	b.n	8001122 <PinClr+0x92>
	else if(PortPin <= 63)							// Port-D: 48~63
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b3f      	cmp	r3, #63	; 0x3f
 80010f0:	d80a      	bhi.n	8001108 <PinClr+0x78>
		GPIOD->BRR |= (0x0001 << (PortPin - 48));
 80010f2:	4911      	ldr	r1, [pc, #68]	; (8001138 <PinClr+0xa8>)
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <PinClr+0xa8>)
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	3a30      	subs	r2, #48	; 0x30
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	4313      	orrs	r3, r2
 8001104:	614b      	str	r3, [r1, #20]
}
 8001106:	e00c      	b.n	8001122 <PinClr+0x92>
	else if(PortPin <= 79)							// Port-E: 64~79
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b4f      	cmp	r3, #79	; 0x4f
 800110c:	d809      	bhi.n	8001122 <PinClr+0x92>
		GPIOE->BRR |= (0x0001 << (PortPin - 64));
 800110e:	490b      	ldr	r1, [pc, #44]	; (800113c <PinClr+0xac>)
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <PinClr+0xac>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	3a40      	subs	r2, #64	; 0x40
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	4313      	orrs	r3, r2
 8001120:	614b      	str	r3, [r1, #20]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40010800 	.word	0x40010800
 8001130:	40010c00 	.word	0x40010c00
 8001134:	40011000 	.word	0x40011000
 8001138:	40011400 	.word	0x40011400
 800113c:	40011800 	.word	0x40011800

08001140 <PinWrite>:
  * @param	Value: select High or Low to write.
  * 		This parameter should be: 1 or 0
  * @retval None
  */
void PinWrite(u8 PortPin, u8 Value)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
	if(Value == 1)
 8001150:	79bb      	ldrb	r3, [r7, #6]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d104      	bne.n	8001160 <PinWrite+0x20>
		PinSet(PortPin);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff41 	bl	8000fe0 <PinSet>
	else if(Value == 0)
		PinClr(PortPin);
	else
		/* Null */;
}
 800115e:	e006      	b.n	800116e <PinWrite+0x2e>
	else if(Value == 0)
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d103      	bne.n	800116e <PinWrite+0x2e>
		PinClr(PortPin);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff91 	bl	8001090 <PinClr>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <PinRead>:
  * 		 0~15:PA0~PA15; 16~31:PB0~PB15; 32~47:PC0~PC15;
  * 		48~63:PD0~PD15; 64~79:PE0~PE15
  * @retval The input-pin value
  */
u8 PinRead(u8 PortPin)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	u8 PinInputValue;

	if(PortPin <= 15)									// Port-A:  0~15
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <PinRead+0x26>
		PinInputValue = (GPIOA->IDR & (0x0001 << PortPin));
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <PinRead+0xa8>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4013      	ands	r3, r2
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e03a      	b.n	8001214 <PinRead+0x9c>
	else if(PortPin <= 31)								// Port-B: 16~31
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b1f      	cmp	r3, #31
 80011a2:	d80b      	bhi.n	80011bc <PinRead+0x44>
		PinInputValue = (GPIOB->IDR & (0x0001 << (PortPin - 16)));
 80011a4:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <PinRead+0xac>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	3b10      	subs	r3, #16
 80011ae:	2101      	movs	r1, #1
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4013      	ands	r3, r2
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e02b      	b.n	8001214 <PinRead+0x9c>
	else if(PortPin <= 47)								// Port-C: 32~47
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b2f      	cmp	r3, #47	; 0x2f
 80011c0:	d80b      	bhi.n	80011da <PinRead+0x62>
		PinInputValue = (GPIOC->IDR & (0x0001 << (PortPin - 32)));
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <PinRead+0xb0>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	3b20      	subs	r3, #32
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e01c      	b.n	8001214 <PinRead+0x9c>
	else if(PortPin <= 63)								// Port-D: 48~63
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b3f      	cmp	r3, #63	; 0x3f
 80011de:	d80b      	bhi.n	80011f8 <PinRead+0x80>
		PinInputValue = (GPIOD->IDR & (0x0001 << (PortPin - 48)));
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <PinRead+0xb4>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	3b30      	subs	r3, #48	; 0x30
 80011ea:	2101      	movs	r1, #1
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4013      	ands	r3, r2
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e00d      	b.n	8001214 <PinRead+0x9c>
	else if(PortPin <= 79)								// Port-E: 64~79
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b4f      	cmp	r3, #79	; 0x4f
 80011fc:	d80a      	bhi.n	8001214 <PinRead+0x9c>
		PinInputValue = (GPIOE->IDR & (0x0001 << (PortPin - 64)));
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <PinRead+0xb8>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	3b40      	subs	r3, #64	; 0x40
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4013      	ands	r3, r2
 8001212:	73fb      	strb	r3, [r7, #15]
	else												// Out of range(0~79)
		/* Null */;

	return PinInputValue;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40010800 	.word	0x40010800
 8001224:	40010c00 	.word	0x40010c00
 8001228:	40011000 	.word	0x40011000
 800122c:	40011400 	.word	0x40011400
 8001230:	40011800 	.word	0x40011800

08001234 <NVIC_Initialization>:
  * @brief  Initialize NVIC.
  * @param  None
  * @retval None
  */
void NVIC_Initialization(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;	// Structure Declarations

	/* Configures the priority grouping */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 800123a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800123e:	f7fe ff85 	bl	800014c <NVIC_PriorityGroupConfig>

	/* Configure the NVIC */
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001242:	2326      	movs	r3, #38	; 0x26
 8001244:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800124e:	2301      	movs	r3, #1
 8001250:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ff8b 	bl	8000170 <NVIC_Init>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <PWM_Initialization>:
  * @brief  Initialize PWM.
  * @param  None
  * @retval None
  */
void PWM_Initialization(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

	/* Structure Declarations */
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_OCInitTypeDef 		TIM_OCInitStructure;

	TIM_OCStructInit(& TIM_OCInitStructure);
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb95 	bl	800099c <TIM_OCStructInit>

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = 999; // Set the Auto-Reload value
 8001272:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001276:	833b      	strh	r3, [r7, #24]
	TIM_TimeBaseStructure.TIM_Prescaler = 0; // Set the Prescaler value
 8001278:	2300      	movs	r3, #0
 800127a:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;	// Select the Counter Mode
 800127c:	2300      	movs	r3, #0
 800127e:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	481b      	ldr	r0, [pc, #108]	; (80012f4 <PWM_Initialization+0x90>)
 8001288:	f7ff f9fe 	bl	8000688 <TIM_TimeBaseInit>
//	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);		// ERROR. 會造成USART功能無法動作。

	/* PWM1 Mode configuration */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800128c:	2360      	movs	r3, #96	; 0x60
 800128e:	80bb      	strh	r3, [r7, #4]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001290:	2301      	movs	r3, #1
 8001292:	80fb      	strh	r3, [r7, #6]
	TIM_OCInitStructure.TIM_Pulse = 333;	// TIM_Pulse=CCR1
 8001294:	f240 134d 	movw	r3, #333	; 0x14d
 8001298:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800129a:	2300      	movs	r3, #0
 800129c:	81bb      	strh	r3, [r7, #12]
	TIM_OC2Init(TIM3, &TIM_OCInitStructure);	// TIM3_CH2
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <PWM_Initialization+0x90>)
 80012a4:	f7ff fa6c 	bl	8000780 <TIM_OC2Init>
	TIM_OC3Init(TIM2, &TIM_OCInitStructure);	// TIM2_CH3
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012b0:	f7ff faee 	bl	8000890 <TIM_OC3Init>

	/* Enable */
	// TIM3_CH2 (Motor1)
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);	// TIMx peripheral Preload register on CCR1
 80012b4:	2108      	movs	r1, #8
 80012b6:	480f      	ldr	r0, [pc, #60]	; (80012f4 <PWM_Initialization+0x90>)
 80012b8:	f7ff fbcf 	bl	8000a5a <TIM_OC2PreloadConfig>
	TIM_ARRPreloadConfig(TIM3, ENABLE);					// TIMx peripheral Preload register on ARR
 80012bc:	2101      	movs	r1, #1
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <PWM_Initialization+0x90>)
 80012c0:	f7ff fbac 	bl	8000a1c <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM3, ENABLE);								// The specified TIM peripheral
 80012c4:	2101      	movs	r1, #1
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <PWM_Initialization+0x90>)
 80012c8:	f7ff fb89 	bl	80009de <TIM_Cmd>

	// TIM2_CH3 (Motor0)
	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);	// TIMx peripheral Preload register on CCR1
 80012cc:	2108      	movs	r1, #8
 80012ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012d2:	f7ff fbdf 	bl	8000a94 <TIM_OC3PreloadConfig>
	TIM_ARRPreloadConfig(TIM2, ENABLE);					// TIMx peripheral Preload register on ARR
 80012d6:	2101      	movs	r1, #1
 80012d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012dc:	f7ff fb9e 	bl	8000a1c <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM2, ENABLE);								// The specified TIM peripheral
 80012e0:	2101      	movs	r1, #1
 80012e2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012e6:	f7ff fb7a 	bl	80009de <TIM_Cmd>
}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40000400 	.word	0x40000400

080012f8 <RCC_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run this function before any other initialization.
  */
void RCC_Initialization(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

	/* Resets the RCC clock configuration to the default reset state */
	RCC_DeInit();
 80012fc:	f7ff f8aa 	bl	8000454 <RCC_DeInit>

	/* RCC APB1 */
	RCC_APB1PeriphClockCmd(	RCC_APB1Periph_USART2	|
 8001300:	2101      	movs	r1, #1
 8001302:	4804      	ldr	r0, [pc, #16]	; (8001314 <RCC_Initialization+0x1c>)
 8001304:	f7ff f9a2 	bl	800064c <RCC_APB1PeriphClockCmd>
							RCC_APB1Periph_TIM2		|	// PWM:Motor0-Speed
							RCC_APB1Periph_TIM3		,	// PWM:Motor1-Speed
							ENABLE);

	/* RCC APB2 */
	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOA |
 8001308:	2101      	movs	r1, #1
 800130a:	207c      	movs	r0, #124	; 0x7c
 800130c:	f7ff f980 	bl	8000610 <RCC_APB2PeriphClockCmd>
							RCC_APB2Periph_GPIOB |
							RCC_APB2Periph_GPIOC |
							RCC_APB2Periph_GPIOD |
							RCC_APB2Periph_GPIOE ,
							ENABLE);
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	00020003 	.word	0x00020003

08001318 <USART_Initialization>:
  * @param  None
  * @retval None
  * @attention Please run "RCC_Initialization()" before this function.
  */
void USART_Initialization(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
	/* Structure Declarations */
	USART_InitTypeDef USART_InitStructure;

//	USART_DeInit(USART2);
	USART_StructInit(&USART_InitStructure);	// Fills each USART_InitStruct member with its default value
 800131e:	463b      	mov	r3, r7
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fc9b 	bl	8000c5c <USART_StructInit>
	 * - One Stop Bit
	 * - No parity
	 * - Hardware flow control disabled (RTS and CTS signals)
	 * - Receive and transmit enabled
	 */
	USART_InitStructure.USART_BaudRate = 9600;
 8001326:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800132a:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800132c:	2300      	movs	r3, #0
 800132e:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001330:	2300      	movs	r3, #0
 8001332:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8001334:	2300      	movs	r3, #0
 8001336:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001338:	2300      	movs	r3, #0
 800133a:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800133c:	230c      	movs	r3, #12
 800133e:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_InitStructure);
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <USART_Initialization+0x58>)
 8001346:	f7ff fbcf 	bl	8000ae8 <USART_Init>

	/* Enable "Receive data register not empty" interrupt */
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800134a:	2201      	movs	r2, #1
 800134c:	f240 5125 	movw	r1, #1317	; 0x525
 8001350:	4807      	ldr	r0, [pc, #28]	; (8001370 <USART_Initialization+0x58>)
 8001352:	f7ff fcbe 	bl	8000cd2 <USART_ITConfig>

	/* Enable USART */
	USART_Cmd(USART2, ENABLE);
 8001356:	2101      	movs	r1, #1
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <USART_Initialization+0x58>)
 800135a:	f7ff fc9b 	bl	8000c94 <USART_Cmd>

	/* Clear "Transmission Complete" flag, 否則第1位數據會丟失 */
	USART_ClearFlag(USART2, USART_FLAG_TC);
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <USART_Initialization+0x58>)
 8001362:	f7ff fd38 	bl	8000dd6 <USART_ClearFlag>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40004400 	.word	0x40004400

08001374 <USART_Send>:
  *   				USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_Send(USART_TypeDef* USARTx, uint8_t* Data)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
	for (int i = 0; Data[i] != '\0'; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	e013      	b.n	80013ac <USART_Send+0x38>
	{
		/* Transmits single data through the USARTx peripheral */
		USART_SendData(USARTx, (uint16_t)Data[i]);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4619      	mov	r1, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fce5 	bl	8000d60 <USART_SendData>

		/* Wait until transmission complete, use TC or TXE flag */
		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET)
 8001396:	bf00      	nop
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fd00 	bl	8000da0 <USART_GetFlagStatus>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f8      	beq.n	8001398 <USART_Send+0x24>
	for (int i = 0; Data[i] != '\0'; i++)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e5      	bne.n	8001384 <USART_Send+0x10>
		{/* Null */}
	}
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da0b      	bge.n	80013ec <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80013d4:	490d      	ldr	r1, [pc, #52]	; (800140c <NVIC_SetPriority+0x4c>)
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	3b04      	subs	r3, #4
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80013ea:	e009      	b.n	8001400 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80013ec:	4908      	ldr	r1, [pc, #32]	; (8001410 <NVIC_SetPriority+0x50>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	e000e100 	.word	0xe000e100

08001414 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001422:	d301      	bcc.n	8001428 <SysTick_Config+0x14>
 8001424:	2301      	movs	r3, #1
 8001426:	e011      	b.n	800144c <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <SysTick_Config+0x40>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001430:	3b01      	subs	r3, #1
 8001432:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8001434:	210f      	movs	r1, #15
 8001436:	f04f 30ff 	mov.w	r0, #4294967295
 800143a:	f7ff ffc1 	bl	80013c0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Config+0x40>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <SysTick_Config+0x40>)
 8001446:	2207      	movs	r2, #7
 8001448:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	e000e010 	.word	0xe000e010

08001458 <main>:
 * @brief   Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	 To reconfigure the default setting of SystemInit() function, refer to
	 system_stm32f10x.c file
	 */

	/* SysTick end of count event each 1ms */
	RCC_GetClocksFreq(&RCC_Clocks);
 800145e:	4818      	ldr	r0, [pc, #96]	; (80014c0 <main+0x68>)
 8001460:	f7ff f826 	bl	80004b0 <RCC_GetClocksFreq>
	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <main+0x68>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <main+0x6c>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	099b      	lsrs	r3, r3, #6
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ffcf 	bl	8001414 <SysTick_Config>
//  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);
	/* Initiate Blink Speed variable */
//  BlinkSpeed = 0;

	/* Initialization */
	RCC_Initialization();
 8001476:	f7ff ff3f 	bl	80012f8 <RCC_Initialization>
	GPIO_Initialization();
 800147a:	f7ff fd17 	bl	8000eac <GPIO_Initialization>
	PWM_Initialization();
 800147e:	f7ff fef1 	bl	8001264 <PWM_Initialization>
	USART_Initialization();
 8001482:	f7ff ff49 	bl	8001318 <USART_Initialization>
	NVIC_Initialization();
 8001486:	f7ff fed5 	bl	8001234 <NVIC_Initialization>

	GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 800148a:	2120      	movs	r1, #32
 800148c:	480e      	ldr	r0, [pc, #56]	; (80014c8 <main+0x70>)
 800148e:	f7fe ffd2 	bl	8000436 <GPIO_ResetBits>

	/* Infinite loop */
	while (1)
	{
//		USART_Send(USART2, TxBuf1);
		for(int i=0; i<2; i++)	// Send status of motor0&1
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e007      	b.n	80014a8 <main+0x50>
		{
			SendStatus(i);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f819 	bl	80014d4 <SendStatus>
		for(int i=0; i<2; i++)	// Send status of motor0&1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	ddf4      	ble.n	8001498 <main+0x40>
		}
		USART_Send(USART2, "----------\n");
 80014ae:	4907      	ldr	r1, [pc, #28]	; (80014cc <main+0x74>)
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <main+0x78>)
 80014b2:	f7ff ff5f 	bl	8001374 <USART_Send>
		Delay(1000);
 80014b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ba:	f000 f8b7 	bl	800162c <Delay>
		for(int i=0; i<2; i++)	// Send status of motor0&1
 80014be:	e7e8      	b.n	8001492 <main+0x3a>
 80014c0:	2000004c 	.word	0x2000004c
 80014c4:	10624dd3 	.word	0x10624dd3
 80014c8:	40010800 	.word	0x40010800
 80014cc:	08001ad8 	.word	0x08001ad8
 80014d0:	40004400 	.word	0x40004400

080014d4 <SendStatus>:
* @brief  	Send status.
* @param	Motor: the number of motor. This parameter should be: 0~1.
* @retval 	None
*/
void SendStatus(uint8_t Motor)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	uint8_t TxData;
//	uint8_t Status[] = "";

	// Binary:010nnrXX
	TxData = ((0x40 | (Motor << 3)) | (PinRead(MotorPin[Motor][2]) << 2));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e8:	b25c      	sxtb	r4, r3
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4917      	ldr	r1, [pc, #92]	; (800154c <SendStatus+0x78>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	3302      	adds	r3, #2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe3c 	bl	8001178 <PinRead>
 8001500:	4603      	mov	r3, r0
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	b25b      	sxtb	r3, r3
 8001506:	4323      	orrs	r3, r4
 8001508:	b25b      	sxtb	r3, r3
 800150a:	73fb      	strb	r3, [r7, #15]
	USART_Send(USART2, TxData);
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	4619      	mov	r1, r3
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <SendStatus+0x7c>)
 8001512:	f7ff ff2f 	bl	8001374 <USART_Send>

//	USART_Send(USART2, "[Status]Motor%d "+Status+"\n", Motor);

	if(PinRead(MotorPin[Motor][2]) == 1)	// Motor_Ready pin=High
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <SendStatus+0x78>)
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	440b      	add	r3, r1
 8001522:	3302      	adds	r3, #2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe26 	bl	8001178 <PinRead>
 800152c:	4603      	mov	r3, r0
 800152e:	2b01      	cmp	r3, #1
 8001530:	d104      	bne.n	800153c <SendStatus+0x68>
		USART_Send(USART2, "[Status]Motor Ready\n");
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <SendStatus+0x80>)
 8001534:	4806      	ldr	r0, [pc, #24]	; (8001550 <SendStatus+0x7c>)
 8001536:	f7ff ff1d 	bl	8001374 <USART_Send>
//		Status = "Ready";
	else									// Motor_Ready pin=Low
		USART_Send(USART2, "[Status]Motor FAULT!\n");
//		Status = "FAULT!";
}
 800153a:	e003      	b.n	8001544 <SendStatus+0x70>
		USART_Send(USART2, "[Status]Motor FAULT!\n");
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <SendStatus+0x84>)
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <SendStatus+0x7c>)
 8001540:	f7ff ff18 	bl	8001374 <USART_Send>
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	20000014 	.word	0x20000014
 8001550:	40004400 	.word	0x40004400
 8001554:	08001ae4 	.word	0x08001ae4
 8001558:	08001afc 	.word	0x08001afc

0800155c <MotorCtrl>:
* 			This parameter should be 0~2. 0: CW; 1: CCW; 2: maintain.
* @param	Speed: the speed of motor in %. This parameter should be: 0~100,127.
* @retval 	None
*/
void MotorCtrl(uint8_t Motor, uint8_t Status, uint8_t Direction, uint8_t Speed)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4604      	mov	r4, r0
 8001564:	4608      	mov	r0, r1
 8001566:	4611      	mov	r1, r2
 8001568:	461a      	mov	r2, r3
 800156a:	4623      	mov	r3, r4
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	4603      	mov	r3, r0
 8001570:	71bb      	strb	r3, [r7, #6]
 8001572:	460b      	mov	r3, r1
 8001574:	717b      	strb	r3, [r7, #5]
 8001576:	4613      	mov	r3, r2
 8001578:	713b      	strb	r3, [r7, #4]
//	u16 DutyCycleValue;

	// Status
	if(Status <= 1)
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d80b      	bhi.n	8001598 <MotorCtrl+0x3c>
		PinWrite((MotorPin[Motor][0]), Status);
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	4928      	ldr	r1, [pc, #160]	; (8001624 <MotorCtrl+0xc8>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	440b      	add	r3, r1
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	79ba      	ldrb	r2, [r7, #6]
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fdd4 	bl	8001140 <PinWrite>
//		PinWrite((MotorPin[Motor][0]), Disable);
//	}
//	else /*Null*/;

	// Direction
	if(Direction <= 1)
 8001598:	797b      	ldrb	r3, [r7, #5]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d80c      	bhi.n	80015b8 <MotorCtrl+0x5c>
		PinWrite((MotorPin[Motor][1]), Direction);
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	4920      	ldr	r1, [pc, #128]	; (8001624 <MotorCtrl+0xc8>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	3301      	adds	r3, #1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	797a      	ldrb	r2, [r7, #5]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fdc4 	bl	8001140 <PinWrite>
//		PinWrite((MotorPin[Motor][1]), CW);
//	}
//	else /*Null*/;

	// Speed
	if(Speed == 0)	// OFF
 80015b8:	793b      	ldrb	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10b      	bne.n	80015d6 <MotorCtrl+0x7a>
	{
		PinWrite((MotorPin[Motor][0]), Disable);
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	4918      	ldr	r1, [pc, #96]	; (8001624 <MotorCtrl+0xc8>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fdb6 	bl	8001140 <PinWrite>
	else if(Speed == 127)	// Keep speed of motor
	{
		/* Null */;
	}
	else /* Null */;
}
 80015d4:	e022      	b.n	800161c <MotorCtrl+0xc0>
	else if(Speed == 100)
 80015d6:	793b      	ldrb	r3, [r7, #4]
 80015d8:	2b64      	cmp	r3, #100	; 0x64
 80015da:	d109      	bne.n	80015f0 <MotorCtrl+0x94>
		TIM_SetCompare1((MotorTimer[Motor]), 999);	// Set PWM duty cycle=100%
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MotorCtrl+0xcc>)
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	f240 31e7 	movw	r1, #999	; 0x3e7
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fa6e 	bl	8000aca <TIM_SetCompare1>
}
 80015ee:	e015      	b.n	800161c <MotorCtrl+0xc0>
	else if((Speed > 0) && (Speed < 100))
 80015f0:	793b      	ldrb	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d012      	beq.n	800161c <MotorCtrl+0xc0>
 80015f6:	793b      	ldrb	r3, [r7, #4]
 80015f8:	2b63      	cmp	r3, #99	; 0x63
 80015fa:	d80f      	bhi.n	800161c <MotorCtrl+0xc0>
		TIM_SetCompare1((MotorTimer[Motor]), ((Speed-1)*10)); // Set duty cycle
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <MotorCtrl+0xcc>)
 8001600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001604:	4618      	mov	r0, r3
 8001606:	793b      	ldrb	r3, [r7, #4]
 8001608:	3b01      	subs	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	4413      	add	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fa57 	bl	8000aca <TIM_SetCompare1>
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bd90      	pop	{r4, r7, pc}
 8001624:	20000014 	.word	0x20000014
 8001628:	2000001c 	.word	0x2000001c

0800162c <Delay>:
 * @brief  Inserts a delay time.
 * @param  nTime: specifies the delay time length, in 1 ms.
 * @retval None
 */
void Delay(__IO uint32_t nTime)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	TimingDelay = nTime;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <Delay+0x24>)
 8001638:	6013      	str	r3, [r2, #0]

	while (TimingDelay != 0)
 800163a:	bf00      	nop
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <Delay+0x24>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1fb      	bne.n	800163c <Delay+0x10>
		;
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000044 	.word	0x20000044

08001654 <TimingDelay_Decrement>:
 * @brief  Decrements the TimingDelay variable.
 * @param  None
 * @retval None
 */
void TimingDelay_Decrement(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00)
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <TimingDelay_Decrement+0x20>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <TimingDelay_Decrement+0x16>
	{
		TimingDelay--;
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <TimingDelay_Decrement+0x20>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3b01      	subs	r3, #1
 8001666:	4a03      	ldr	r2, [pc, #12]	; (8001674 <TimingDelay_Decrement+0x20>)
 8001668:	6013      	str	r3, [r2, #0]
	}
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000044 	.word	0x20000044

08001678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800167c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800167e:	e003      	b.n	8001688 <LoopCopyDataInit>

08001680 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001682:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001684:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001686:	3104      	adds	r1, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001688:	480b      	ldr	r0, [pc, #44]	; (80016b8 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800168c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800168e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001690:	d3f6      	bcc.n	8001680 <CopyDataInit>
	ldr	r2, =_sbss
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001694:	e002      	b.n	800169c <LoopFillZerobss>

08001696 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001696:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001698:	f842 3b04 	str.w	r3, [r2], #4

0800169c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800169e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016a0:	d3f9      	bcc.n	8001696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016a2:	f000 f959 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a6:	f000 f9e7 	bl	8001a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016aa:	f7ff fed5 	bl	8001458 <main>
	bx	lr
 80016ae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b0:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80016b4:	08001c04 	.word	0x08001c04
	ldr	r0, =_sdata
 80016b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016bc:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 80016c0:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 80016c4:	20000060 	.word	0x20000060

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>

080016ca <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
  TimingDelay_Decrement();
 8001716:	f7ff ff9d 	bl	8001654 <TimingDelay_Decrement>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI15_10_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  if (EXTI_GetITStatus(USER_BUTTON_EXTI_LINE) != RESET)
 8001724:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001728:	f7fe fd84 	bl	8000234 <EXTI_GetITStatus>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d013      	beq.n	800175a <EXTI15_10_IRQHandler+0x3a>
  {		
    if(BlinkSpeed == 1)
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <EXTI15_10_IRQHandler+0x40>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d103      	bne.n	8001744 <EXTI15_10_IRQHandler+0x24>
    {
      BlinkSpeed = 0;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <EXTI15_10_IRQHandler+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	e006      	b.n	8001752 <EXTI15_10_IRQHandler+0x32>
    }
    else
    {
      BlinkSpeed ++;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <EXTI15_10_IRQHandler+0x40>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	3301      	adds	r3, #1
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <EXTI15_10_IRQHandler+0x40>)
 8001750:	701a      	strb	r2, [r3, #0]
    }
    /* Clear the EXTI line pending bit */
    EXTI_ClearITPendingBit(USER_BUTTON_EXTI_LINE);
 8001752:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001756:	f7fe fd91 	bl	800027c <EXTI_ClearITPendingBit>
  }	
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000048 	.word	0x20000048

08001764 <USART2_IRQHandler>:
  * @brief  This function handles USART2_IRQHandler Handler.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) // 注意不是USART_FLAG_RXNE
 800176a:	f240 5125 	movw	r1, #1317	; 0x525
 800176e:	486a      	ldr	r0, [pc, #424]	; (8001918 <USART2_IRQHandler+0x1b4>)
 8001770:	f7ff fb41 	bl	8000df6 <USART_GetITStatus>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80ca 	beq.w	8001910 <USART2_IRQHandler+0x1ac>
	{
		uint16_t USART_ReceivData = 0xF0;
 800177c:	23f0      	movs	r3, #240	; 0xf0
 800177e:	80fb      	strh	r3, [r7, #6]
//		uint8_t InstTex[] = "";

		USART_ReceivData = USART_ReceiveData(USART2);
 8001780:	4865      	ldr	r0, [pc, #404]	; (8001918 <USART2_IRQHandler+0x1b4>)
 8001782:	f7ff fafe 	bl	8000d82 <USART_ReceiveData>
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]

//		USART_Send(USART2, USART_ReceivData);
//		USART_Send(USART2, "STM32:");

		if(nInst == 0)
 800178a:	4b64      	ldr	r3, [pc, #400]	; (800191c <USART2_IRQHandler+0x1b8>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d158      	bne.n	8001844 <USART2_IRQHandler+0xe0>
		{
			USART_Send(USART2, "STM32:\n");
 8001792:	4963      	ldr	r1, [pc, #396]	; (8001920 <USART2_IRQHandler+0x1bc>)
 8001794:	4860      	ldr	r0, [pc, #384]	; (8001918 <USART2_IRQHandler+0x1b4>)
 8001796:	f7ff fded 	bl	8001374 <USART_Send>

			if(USART_ReceivData == 0xE0)				// System stop
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	2be0      	cmp	r3, #224	; 0xe0
 800179e:	d104      	bne.n	80017aa <USART2_IRQHandler+0x46>
			{
				USART_Send(USART2, "[System]Stop.\n");
 80017a0:	4960      	ldr	r1, [pc, #384]	; (8001924 <USART2_IRQHandler+0x1c0>)
 80017a2:	485d      	ldr	r0, [pc, #372]	; (8001918 <USART2_IRQHandler+0x1b4>)
 80017a4:	f7ff fde6 	bl	8001374 <USART_Send>
			}
		}
		/* NO need to clears the USARTx's interrupt pending bits */
		/* USART_ClearITPendingBit(USART2,USART_IT_RXNE); */
	}
}
 80017a8:	e0b2      	b.n	8001910 <USART2_IRQHandler+0x1ac>
			else if(USART_ReceivData == 0xE1)			// System reset
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	2be1      	cmp	r3, #225	; 0xe1
 80017ae:	d104      	bne.n	80017ba <USART2_IRQHandler+0x56>
				USART_Send(USART2, "[System]Reset.\n");
 80017b0:	495d      	ldr	r1, [pc, #372]	; (8001928 <USART2_IRQHandler+0x1c4>)
 80017b2:	4859      	ldr	r0, [pc, #356]	; (8001918 <USART2_IRQHandler+0x1b4>)
 80017b4:	f7ff fdde 	bl	8001374 <USART_Send>
}
 80017b8:	e0aa      	b.n	8001910 <USART2_IRQHandler+0x1ac>
			else if((USART_ReceivData & 0xE0) == 0x20)	// Instruction start
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	d137      	bne.n	8001834 <USART2_IRQHandler+0xd0>
				while(selMotor != ((USART_ReceivData & 0x18) >> 3))
 80017c4:	e007      	b.n	80017d6 <USART2_IRQHandler+0x72>
					selMotor = ((USART_ReceivData & 0x18) >> 3);
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	10db      	asrs	r3, r3, #3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b56      	ldr	r3, [pc, #344]	; (800192c <USART2_IRQHandler+0x1c8>)
 80017d4:	701a      	strb	r2, [r3, #0]
				while(selMotor != ((USART_ReceivData & 0x18) >> 3))
 80017d6:	4b55      	ldr	r3, [pc, #340]	; (800192c <USART2_IRQHandler+0x1c8>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	10db      	asrs	r3, r3, #3
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1ee      	bne.n	80017c6 <USART2_IRQHandler+0x62>
				while(nInst != (USART_ReceivData & 0x07))
 80017e8:	e005      	b.n	80017f6 <USART2_IRQHandler+0x92>
					nInst = (USART_ReceivData & 0x07);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b4a      	ldr	r3, [pc, #296]	; (800191c <USART2_IRQHandler+0x1b8>)
 80017f4:	801a      	strh	r2, [r3, #0]
				while(nInst != (USART_ReceivData & 0x07))
 80017f6:	4b49      	ldr	r3, [pc, #292]	; (800191c <USART2_IRQHandler+0x1b8>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	429a      	cmp	r2, r3
 8001804:	d1f1      	bne.n	80017ea <USART2_IRQHandler+0x86>
				if(selMotor == 0x00)
 8001806:	4b49      	ldr	r3, [pc, #292]	; (800192c <USART2_IRQHandler+0x1c8>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d104      	bne.n	8001818 <USART2_IRQHandler+0xb4>
					USART_Send(USART2, "[Control]Motor-0\n");
 800180e:	4948      	ldr	r1, [pc, #288]	; (8001930 <USART2_IRQHandler+0x1cc>)
 8001810:	4841      	ldr	r0, [pc, #260]	; (8001918 <USART2_IRQHandler+0x1b4>)
 8001812:	f7ff fdaf 	bl	8001374 <USART_Send>
}
 8001816:	e07b      	b.n	8001910 <USART2_IRQHandler+0x1ac>
				else if(selMotor == 0x01)
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <USART2_IRQHandler+0x1c8>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d104      	bne.n	800182a <USART2_IRQHandler+0xc6>
					USART_Send(USART2, "[Control]Motor-1\n");
 8001820:	4944      	ldr	r1, [pc, #272]	; (8001934 <USART2_IRQHandler+0x1d0>)
 8001822:	483d      	ldr	r0, [pc, #244]	; (8001918 <USART2_IRQHandler+0x1b4>)
 8001824:	f7ff fda6 	bl	8001374 <USART_Send>
}
 8001828:	e072      	b.n	8001910 <USART2_IRQHandler+0x1ac>
					USART_Send(USART2, "[Error]No motors selected.\n");
 800182a:	4943      	ldr	r1, [pc, #268]	; (8001938 <USART2_IRQHandler+0x1d4>)
 800182c:	483a      	ldr	r0, [pc, #232]	; (8001918 <USART2_IRQHandler+0x1b4>)
 800182e:	f7ff fda1 	bl	8001374 <USART_Send>
}
 8001832:	e06d      	b.n	8001910 <USART2_IRQHandler+0x1ac>
			else if(USART_ReceivData == 0xF0)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	2bf0      	cmp	r3, #240	; 0xf0
 8001838:	d06a      	beq.n	8001910 <USART2_IRQHandler+0x1ac>
				USART_Send(USART2, "[Error]Unknown instruction.\n");
 800183a:	4940      	ldr	r1, [pc, #256]	; (800193c <USART2_IRQHandler+0x1d8>)
 800183c:	4836      	ldr	r0, [pc, #216]	; (8001918 <USART2_IRQHandler+0x1b4>)
 800183e:	f7ff fd99 	bl	8001374 <USART_Send>
}
 8001842:	e065      	b.n	8001910 <USART2_IRQHandler+0x1ac>
			nInst--;
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <USART2_IRQHandler+0x1b8>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <USART2_IRQHandler+0x1b8>)
 800184e:	801a      	strh	r2, [r3, #0]
			if(((USART_ReceivData & 0x80) >> 7) == 0x01) 		// 1xxx xxxx(b)
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <USART2_IRQHandler+0x100>
				USART_Send(USART2, " Set speed.\n");
 800185a:	4939      	ldr	r1, [pc, #228]	; (8001940 <USART2_IRQHandler+0x1dc>)
 800185c:	482e      	ldr	r0, [pc, #184]	; (8001918 <USART2_IRQHandler+0x1b4>)
 800185e:	f7ff fd89 	bl	8001374 <USART_Send>
 8001862:	e045      	b.n	80018f0 <USART2_IRQHandler+0x18c>
				if(((USART_ReceivData & 0x60) >> 5) == 0x01)	// x01x xxxx(b)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	115b      	asrs	r3, r3, #5
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d10b      	bne.n	8001888 <USART2_IRQHandler+0x124>
					MotorCtrl(selMotor, 1, 2, 127);
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <USART2_IRQHandler+0x1c8>)
 8001872:	7818      	ldrb	r0, [r3, #0]
 8001874:	237f      	movs	r3, #127	; 0x7f
 8001876:	2202      	movs	r2, #2
 8001878:	2101      	movs	r1, #1
 800187a:	f7ff fe6f 	bl	800155c <MotorCtrl>
					USART_Send(USART2, " Enable.\n");
 800187e:	4931      	ldr	r1, [pc, #196]	; (8001944 <USART2_IRQHandler+0x1e0>)
 8001880:	4825      	ldr	r0, [pc, #148]	; (8001918 <USART2_IRQHandler+0x1b4>)
 8001882:	f7ff fd77 	bl	8001374 <USART_Send>
 8001886:	e010      	b.n	80018aa <USART2_IRQHandler+0x146>
				else if(((USART_ReceivData & 0x60) >> 5) == 0x00)// x00x xxxx(b)
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	115b      	asrs	r3, r3, #5
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10a      	bne.n	80018aa <USART2_IRQHandler+0x146>
					MotorCtrl(selMotor, 0, 2, 127);
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <USART2_IRQHandler+0x1c8>)
 8001896:	7818      	ldrb	r0, [r3, #0]
 8001898:	237f      	movs	r3, #127	; 0x7f
 800189a:	2202      	movs	r2, #2
 800189c:	2100      	movs	r1, #0
 800189e:	f7ff fe5d 	bl	800155c <MotorCtrl>
					USART_Send(USART2, " Disable.\n");
 80018a2:	4929      	ldr	r1, [pc, #164]	; (8001948 <USART2_IRQHandler+0x1e4>)
 80018a4:	481c      	ldr	r0, [pc, #112]	; (8001918 <USART2_IRQHandler+0x1b4>)
 80018a6:	f7ff fd65 	bl	8001374 <USART_Send>
				if(((USART_ReceivData & 0x18) >> 3) == 0x01)	// xxx0 1xxx(b)
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	10db      	asrs	r3, r3, #3
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d10b      	bne.n	80018ce <USART2_IRQHandler+0x16a>
					MotorCtrl(selMotor, 2, 1, 127);
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <USART2_IRQHandler+0x1c8>)
 80018b8:	7818      	ldrb	r0, [r3, #0]
 80018ba:	237f      	movs	r3, #127	; 0x7f
 80018bc:	2201      	movs	r2, #1
 80018be:	2102      	movs	r1, #2
 80018c0:	f7ff fe4c 	bl	800155c <MotorCtrl>
					USART_Send(USART2, " Direction:CCW.\n");
 80018c4:	4921      	ldr	r1, [pc, #132]	; (800194c <USART2_IRQHandler+0x1e8>)
 80018c6:	4814      	ldr	r0, [pc, #80]	; (8001918 <USART2_IRQHandler+0x1b4>)
 80018c8:	f7ff fd54 	bl	8001374 <USART_Send>
 80018cc:	e010      	b.n	80018f0 <USART2_IRQHandler+0x18c>
				else if(((USART_ReceivData & 0x18) >> 3) == 0x00)// xxx0 0xxx(b)
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	10db      	asrs	r3, r3, #3
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10a      	bne.n	80018f0 <USART2_IRQHandler+0x18c>
					MotorCtrl(selMotor, 2, 0, 127);
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <USART2_IRQHandler+0x1c8>)
 80018dc:	7818      	ldrb	r0, [r3, #0]
 80018de:	237f      	movs	r3, #127	; 0x7f
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	f7ff fe3a 	bl	800155c <MotorCtrl>
					USART_Send(USART2, " Direction:CW.\n");
 80018e8:	4919      	ldr	r1, [pc, #100]	; (8001950 <USART2_IRQHandler+0x1ec>)
 80018ea:	480b      	ldr	r0, [pc, #44]	; (8001918 <USART2_IRQHandler+0x1b4>)
 80018ec:	f7ff fd42 	bl	8001374 <USART_Send>
			if(nInst == 0)
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <USART2_IRQHandler+0x1b8>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10b      	bne.n	8001910 <USART2_IRQHandler+0x1ac>
				while(selMotor != 0xFF) selMotor = 0xFF;
 80018f8:	e002      	b.n	8001900 <USART2_IRQHandler+0x19c>
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <USART2_IRQHandler+0x1c8>)
 80018fc:	22ff      	movs	r2, #255	; 0xff
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <USART2_IRQHandler+0x1c8>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2bff      	cmp	r3, #255	; 0xff
 8001906:	d1f8      	bne.n	80018fa <USART2_IRQHandler+0x196>
				USART_Send(USART2, "[Control]Done.\n");
 8001908:	4912      	ldr	r1, [pc, #72]	; (8001954 <USART2_IRQHandler+0x1f0>)
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <USART2_IRQHandler+0x1b4>)
 800190c:	f7ff fd32 	bl	8001374 <USART_Send>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40004400 	.word	0x40004400
 800191c:	2000004a 	.word	0x2000004a
 8001920:	08001b14 	.word	0x08001b14
 8001924:	08001b1c 	.word	0x08001b1c
 8001928:	08001b2c 	.word	0x08001b2c
 800192c:	20000024 	.word	0x20000024
 8001930:	08001b3c 	.word	0x08001b3c
 8001934:	08001b50 	.word	0x08001b50
 8001938:	08001b64 	.word	0x08001b64
 800193c:	08001b80 	.word	0x08001b80
 8001940:	08001ba0 	.word	0x08001ba0
 8001944:	08001bb0 	.word	0x08001bb0
 8001948:	08001bbc 	.word	0x08001bbc
 800194c:	08001bc8 	.word	0x08001bc8
 8001950:	08001bdc 	.word	0x08001bdc
 8001954:	08001bec 	.word	0x08001bec

08001958 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800195c:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <SystemInit+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <SystemInit+0x5c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

  /* Reset SW,SWS, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */

  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001968:	4912      	ldr	r1, [pc, #72]	; (80019b4 <SystemInit+0x5c>)
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <SystemInit+0x5c>)
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <SystemInit+0x60>)
 8001970:	4013      	ands	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001974:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <SystemInit+0x5c>)
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <SystemInit+0x5c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001984:	4a0b      	ldr	r2, [pc, #44]	; (80019b4 <SystemInit+0x5c>)
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <SystemInit+0x5c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001990:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <SystemInit+0x5c>)
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <SystemInit+0x5c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800199a:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SystemInit+0x5c>)
 800199e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019a2:	609a      	str	r2, [r3, #8]

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80019a4:	f000 f80c 	bl	80019c0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SystemInit+0x64>)
 80019aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ae:	609a      	str	r2, [r3, #8]
#endif 
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000
 80019b8:	f8ff0000 	.word	0xf8ff0000
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <SetSysClock>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
  
 #ifdef PLL_SOURCE_HSI  
  /* At this stage the HSI is already enabled */
  
  /*  PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL));
 80019ce:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <SetSysClock+0xb0>)
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <SetSysClock+0xb0>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80019d8:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLMULL16);
 80019da:	4a25      	ldr	r2, [pc, #148]	; (8001a70 <SetSysClock+0xb0>)
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <SetSysClock+0xb0>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80019e4:	6053      	str	r3, [r2, #4]
  }
  
#endif /*PLL_SOURCE_HSI*/
  
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <SetSysClock+0xb4>)
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <SetSysClock+0xb4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80019f2:	4a20      	ldr	r2, [pc, #128]	; (8001a74 <SetSysClock+0xb4>)
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <SetSysClock+0xb4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 0303 	bic.w	r3, r3, #3
 80019fc:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80019fe:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <SetSysClock+0xb4>)
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <SetSysClock+0xb4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001a0a:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <SetSysClock+0xb0>)
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <SetSysClock+0xb0>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <SetSysClock+0xb0>)
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <SetSysClock+0xb0>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001a1a:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <SetSysClock+0xb0>)
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <SetSysClock+0xb0>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a24:	6053      	str	r3, [r2, #4]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <SetSysClock+0xb0>)
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <SetSysClock+0xb0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a30:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001a32:	bf00      	nop
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <SetSysClock+0xb0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f9      	beq.n	8001a34 <SetSysClock+0x74>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <SetSysClock+0xb0>)
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <SetSysClock+0xb0>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001a4c:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <SetSysClock+0xb0>)
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <SetSysClock+0xb0>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001a58:	bf00      	nop
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <SetSysClock+0xb0>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d1f9      	bne.n	8001a5a <SetSysClock+0x9a>
    {
    }
  }
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40022000 	.word	0x40022000

08001a78 <__libc_init_array>:
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	4e0c      	ldr	r6, [pc, #48]	; (8001ab0 <__libc_init_array+0x38>)
 8001a7e:	4c0d      	ldr	r4, [pc, #52]	; (8001ab4 <__libc_init_array+0x3c>)
 8001a80:	1ba4      	subs	r4, r4, r6
 8001a82:	10a4      	asrs	r4, r4, #2
 8001a84:	42a5      	cmp	r5, r4
 8001a86:	d109      	bne.n	8001a9c <__libc_init_array+0x24>
 8001a88:	f000 f81a 	bl	8001ac0 <_init>
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	4e0a      	ldr	r6, [pc, #40]	; (8001ab8 <__libc_init_array+0x40>)
 8001a90:	4c0a      	ldr	r4, [pc, #40]	; (8001abc <__libc_init_array+0x44>)
 8001a92:	1ba4      	subs	r4, r4, r6
 8001a94:	10a4      	asrs	r4, r4, #2
 8001a96:	42a5      	cmp	r5, r4
 8001a98:	d105      	bne.n	8001aa6 <__libc_init_array+0x2e>
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
 8001a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aa0:	4798      	blx	r3
 8001aa2:	3501      	adds	r5, #1
 8001aa4:	e7ee      	b.n	8001a84 <__libc_init_array+0xc>
 8001aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aaa:	4798      	blx	r3
 8001aac:	3501      	adds	r5, #1
 8001aae:	e7f2      	b.n	8001a96 <__libc_init_array+0x1e>
 8001ab0:	08001bfc 	.word	0x08001bfc
 8001ab4:	08001bfc 	.word	0x08001bfc
 8001ab8:	08001bfc 	.word	0x08001bfc
 8001abc:	08001c00 	.word	0x08001c00

08001ac0 <_init>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	bf00      	nop
 8001ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac6:	bc08      	pop	{r3}
 8001ac8:	469e      	mov	lr, r3
 8001aca:	4770      	bx	lr

08001acc <_fini>:
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	bf00      	nop
 8001ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ad2:	bc08      	pop	{r3}
 8001ad4:	469e      	mov	lr, r3
 8001ad6:	4770      	bx	lr
